// Module: S3road.obj
// Source: C:\Copter\Source\Game\S3road.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:00137470-00138bf2 Module: 157, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00538470
void S3RoadDataInit() {
	int32_t dir;
	double straightLegSize;
	double turnRadius;
	int32_t incline;
	int32_t leg;
	double turnAngle;
	double DiagShortDist;
	double DiagLongDist;

// LINE 43:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xA8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 53:
	__asm        mov    reinterpret_cast<uint32_t>(straightLegSize), 0x9999999A;
	__asm        mov    *reinterpret_cast<uint32_t*>(reinterpret_cast<char*>(&straightLegSize) + 4), 0x40199999;
// LINE 54:
	__asm        mov    leg, 0;
	__asm        jmp    near ptr 0x00538499;
	__asm        inc    leg;
	__asm        cmp    leg, 0xB;
	__asm        jge    near ptr 0x005384EA;
// LINE 56:
	__asm        fld    qword ptr ds:[0x593338];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D390], eax;
// LINE 57:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x3C], eax;
	__asm        fild   dword ptr [ebp-0x3C];
	__asm        fmul   straightLegSize;
	__asm        fadd   qword ptr ds:[0x593340];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D394], eax;
// LINE 58:
	__asm        jmp    near ptr 0x00538496;
// LINE 59:
	__asm        mov    leg, 0;
	__asm        jmp    near ptr 0x005384F9;
	__asm        inc    leg;
	__asm        cmp    leg, 0xB;
	__asm        jge    near ptr 0x0053854A;
// LINE 61:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x40], eax;
	__asm        fild   dword ptr [ebp-0x40];
	__asm        fmul   straightLegSize;
	__asm        fadd   qword ptr ds:[0x593348];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D3E8], eax;
// LINE 62:
	__asm        fld    qword ptr ds:[0x593350];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D3EC], eax;
// LINE 63:
	__asm        jmp    near ptr 0x005384F6;
// LINE 64:
	__asm        mov    leg, 0;
	__asm        jmp    near ptr 0x00538559;
	__asm        inc    leg;
	__asm        cmp    leg, 0xB;
	__asm        jge    near ptr 0x005385AA;
// LINE 66:
	__asm        fld    qword ptr ds:[0x593358];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D440], eax;
// LINE 67:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x44], eax;
	__asm        fild   dword ptr [ebp-0x44];
	__asm        fmul   straightLegSize;
	__asm        fsubr  qword ptr ds:[0x593360];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D444], eax;
// LINE 68:
	__asm        jmp    near ptr 0x00538556;
// LINE 69:
	__asm        mov    leg, 0;
	__asm        jmp    near ptr 0x005385B9;
	__asm        inc    leg;
	__asm        cmp    leg, 0xB;
	__asm        jge    near ptr 0x0053860A;
// LINE 71:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x48], eax;
	__asm        fild   dword ptr [ebp-0x48];
	__asm        fmul   straightLegSize;
	__asm        fsubr  qword ptr ds:[0x593368];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D498], eax;
// LINE 72:
	__asm        fld    qword ptr ds:[0x593370];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D49C], eax;
// LINE 73:
	__asm        jmp    near ptr 0x005385B6;
// LINE 85:
	__asm        mov    dword ptr ds:[0x62BB00], 1;
// LINE 86:
	__asm        mov    dword ptr ds:[0x62BB08], 0xFFFFFFFF;
// LINE 87:
	__asm        mov    dword ptr ds:[0x62BB04], 0;
// LINE 88:
	__asm        push   0x62BB00;
	__asm        call   0x004CA1E3;
	__asm        add    esp, 4;
// LINE 89:
	__asm        push   0x62BB00;
	__asm        push   0x62BA00;
	__asm        call   0x004CAEFB;
	__asm        add    esp, 8;
// LINE 91:
	__asm        mov    dword ptr ds:[0x62BB0C], 0xFFFFFFFF;
// LINE 92:
	__asm        mov    dword ptr ds:[0x62BB14], 0xFFFFFFFF;
// LINE 93:
	__asm        mov    dword ptr ds:[0x62BB10], 0;
// LINE 94:
	__asm        mov    eax, 0x62BB00;
	__asm        add    eax, 0xC;
	__asm        push   eax;
	__asm        call   0x004CA1E3;
	__asm        add    esp, 4;
// LINE 95:
	__asm        mov    eax, 0x62BB00;
	__asm        add    eax, 0xC;
	__asm        push   eax;
	__asm        mov    eax, 0x62BA00;
	__asm        add    eax, 0x40;
	__asm        push   eax;
	__asm        call   0x004CAEFB;
	__asm        add    esp, 8;
// LINE 97:
	__asm        mov    dword ptr ds:[0x62BB18], 0xFFFFFFFF;
// LINE 98:
	__asm        mov    dword ptr ds:[0x62BB20], 1;
// LINE 99:
	__asm        mov    dword ptr ds:[0x62BB1C], 0;
// LINE 100:
	__asm        mov    eax, 0x62BB00;
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        call   0x004CA1E3;
	__asm        add    esp, 4;
// LINE 101:
	__asm        mov    eax, 0x62BB00;
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, 0x62BA00;
	__asm        add    eax, 0x80;
	__asm        push   eax;
	__asm        call   0x004CAEFB;
	__asm        add    esp, 8;
// LINE 103:
	__asm        mov    dword ptr ds:[0x62BB24], 1;
// LINE 104:
	__asm        mov    dword ptr ds:[0x62BB2C], 1;
// LINE 105:
	__asm        mov    dword ptr ds:[0x62BB28], 0;
// LINE 106:
	__asm        mov    eax, 0x62BB00;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        call   0x004CA1E3;
	__asm        add    esp, 4;
// LINE 107:
	__asm        mov    eax, 0x62BB00;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    eax, 0x62BA00;
	__asm        add    eax, 0xC0;
	__asm        push   eax;
	__asm        call   0x004CAEFB;
	__asm        add    esp, 8;
// LINE 111:
	__asm        fld    qword ptr ds:[0x593408];
	__asm        call   0x0056EC1A;
	__asm        fstp   DiagShortDist;
// LINE 112:
	__asm        fld    qword ptr ds:[0x593410];
	__asm        call   0x0056EC1A;
	__asm        fst    DiagLongDist;
// LINE 117:
	__asm        mov    dword ptr ds:[0x635110], 0xFFF80000;
// LINE 118:
	__asm        mov    dword ptr ds:[0x635118], 0x200000;
// LINE 119:
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ds:[0x635114], eax;
// LINE 121:
	__asm        mov    dword ptr ds:[0x635128], 0x200000;
// LINE 122:
	__asm        mov    dword ptr ds:[0x635130], 0x80000;
// LINE 123:
	__asm        fld    DiagShortDist;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ds:[0x63512C], eax;
// LINE 125:
	__asm        mov    dword ptr ds:[0x63514C], 0x200000;
// LINE 126:
	__asm        mov    dword ptr ds:[0x635154], 0x80000;
// LINE 127:
	__asm        fld    DiagLongDist;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ds:[0x635150], eax;
// LINE 129:
	__asm        mov    dword ptr ds:[0x635164], 0x80000;
// LINE 130:
	__asm        mov    dword ptr ds:[0x63516C], 0xFFE00000;
// LINE 131:
	__asm        fld    DiagShortDist;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ds:[0x635168], eax;
// LINE 133:
	__asm        mov    dword ptr ds:[0x635170], 0xFFE00000;
// LINE 134:
	__asm        mov    dword ptr ds:[0x635178], 0xFFF80000;
// LINE 135:
	__asm        fld    DiagShortDist;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ds:[0x635174], eax;
// LINE 137:
	__asm        mov    dword ptr ds:[0x635188], 0x80000;
// LINE 138:
	__asm        mov    dword ptr ds:[0x635190], 0xFFE00000;
// LINE 139:
	__asm        fld    DiagLongDist;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ds:[0x63518C], eax;
// LINE 141:
	__asm        mov    dword ptr ds:[0x6351AC], 0xFFF80000;
// LINE 142:
	__asm        mov    dword ptr ds:[0x6351B4], 0x200000;
// LINE 143:
	__asm        fld    DiagShortDist;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ds:[0x6351B0], eax;
// LINE 145:
	__asm        mov    dword ptr ds:[0x6351C4], 0xFFE00000;
// LINE 146:
	__asm        mov    dword ptr ds:[0x6351CC], 0xFFF80000;
// LINE 147:
	__asm        fld    DiagLongDist;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ds:[0x6351C8], eax;
// LINE 151:
	__asm        fld    qword ptr ds:[0x593378];
	__asm        fsub   qword ptr ds:[0x593338];
	__asm        fstp   turnRadius;
// LINE 152:
	__asm        mov    reinterpret_cast<uint32_t>(turnAngle), 0x769A7903;
	__asm        mov    *reinterpret_cast<uint32_t*>(reinterpret_cast<char*>(&turnAngle) + 4), 0x3FC41B2F;
// LINE 153:
	__asm        mov    leg, 0;
	__asm        jmp    near ptr 0x005388A3;
	__asm        inc    leg;
	__asm        cmp    leg, 0xB;
	__asm        jge    near ptr 0x00538910;
// LINE 155:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x4C], eax;
	__asm        fild   dword ptr [ebp-0x4C];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fsubr  qword ptr ds:[0x593378];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D4F0], eax;
// LINE 156:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x50], eax;
	__asm        fild   dword ptr [ebp-0x50];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fadd   qword ptr ds:[0x593380];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D4F4], eax;
// LINE 157:
	__asm        jmp    near ptr 0x005388A0;
// LINE 158:
	__asm        mov    leg, 0;
	__asm        jmp    near ptr 0x0053891F;
	__asm        inc    leg;
	__asm        cmp    leg, 0xB;
	__asm        jge    near ptr 0x0053898C;
// LINE 160:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x54], eax;
	__asm        fild   dword ptr [ebp-0x54];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fadd   qword ptr ds:[0x593388];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D548], eax;
// LINE 161:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x58], eax;
	__asm        fild   dword ptr [ebp-0x58];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fadd   qword ptr ds:[0x593390];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D54C], eax;
// LINE 162:
	__asm        jmp    near ptr 0x0053891C;
// LINE 163:
	__asm        mov    leg, 0;
	__asm        jmp    near ptr 0x0053899B;
	__asm        inc    leg;
	__asm        cmp    leg, 0xB;
	__asm        jge    near ptr 0x00538A08;
// LINE 165:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x5C], eax;
	__asm        fild   dword ptr [ebp-0x5C];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fadd   qword ptr ds:[0x593398];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D5A0], eax;
// LINE 166:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x60], eax;
	__asm        fild   dword ptr [ebp-0x60];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fsubr  qword ptr ds:[0x5933A0];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D5A4], eax;
// LINE 167:
	__asm        jmp    near ptr 0x00538998;
// LINE 168:
	__asm        mov    leg, 0;
	__asm        jmp    near ptr 0x00538A17;
	__asm        inc    leg;
	__asm        cmp    leg, 0xB;
	__asm        jge    near ptr 0x00538A84;
// LINE 170:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x64], eax;
	__asm        fild   dword ptr [ebp-0x64];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fsubr  qword ptr ds:[0x5933A8];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D5F8], eax;
// LINE 171:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x68], eax;
	__asm        fild   dword ptr [ebp-0x68];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fsubr  qword ptr ds:[0x5933B0];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D5FC], eax;
// LINE 172:
	__asm        jmp    near ptr 0x00538A14;
// LINE 176:
	__asm        fld    qword ptr ds:[0x593338];
	__asm        fsub   qword ptr ds:[0x5933B8];
	__asm        fstp   turnRadius;
// LINE 177:
	__asm        mov    reinterpret_cast<uint32_t>(turnAngle), 0x769A7903;
	__asm        mov    *reinterpret_cast<uint32_t*>(reinterpret_cast<char*>(&turnAngle) + 4), 0x3FC41B2F;
// LINE 178:
	__asm        mov    leg, 0;
	__asm        jmp    near ptr 0x00538AB0;
	__asm        inc    leg;
	__asm        cmp    leg, 0xB;
	__asm        jge    near ptr 0x00538B1D;
// LINE 180:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x6C], eax;
	__asm        fild   dword ptr [ebp-0x6C];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fadd   qword ptr ds:[0x5933B8];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D650], eax;
// LINE 181:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x70], eax;
	__asm        fild   dword ptr [ebp-0x70];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fadd   qword ptr ds:[0x5933C0];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D654], eax;
// LINE 182:
	__asm        jmp    near ptr 0x00538AAD;
// LINE 183:
	__asm        mov    leg, 0;
	__asm        jmp    near ptr 0x00538B2C;
	__asm        inc    leg;
	__asm        cmp    leg, 0xB;
	__asm        jge    near ptr 0x00538B99;
// LINE 185:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x74], eax;
	__asm        fild   dword ptr [ebp-0x74];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fadd   qword ptr ds:[0x5933C8];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D6A8], eax;
// LINE 186:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x78], eax;
	__asm        fild   dword ptr [ebp-0x78];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fsubr  qword ptr ds:[0x5933D0];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D6AC], eax;
// LINE 187:
	__asm        jmp    near ptr 0x00538B29;
// LINE 188:
	__asm        mov    leg, 0;
	__asm        jmp    near ptr 0x00538BA8;
	__asm        inc    leg;
	__asm        cmp    leg, 0xB;
	__asm        jge    near ptr 0x00538C15;
// LINE 190:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x7C], eax;
	__asm        fild   dword ptr [ebp-0x7C];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fsubr  qword ptr ds:[0x5933D8];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D700], eax;
// LINE 191:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x80], eax;
	__asm        fild   dword ptr [ebp-0x80];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fsubr  qword ptr ds:[0x5933E0];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D704], eax;
// LINE 192:
	__asm        jmp    near ptr 0x00538BA5;
// LINE 193:
	__asm        mov    leg, 0;
	__asm        jmp    near ptr 0x00538C24;
	__asm        inc    leg;
	__asm        cmp    leg, 0xB;
	__asm        jge    near ptr 0x00538C9D;
// LINE 195:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x84], eax;
	__asm        fild   dword ptr [ebp-0x84];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fsubr  qword ptr ds:[0x5933E8];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D758], eax;
// LINE 196:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x88], eax;
	__asm        fild   dword ptr [ebp-0x88];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fadd   qword ptr ds:[0x5933F0];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D75C], eax;
// LINE 197:
	__asm        jmp    near ptr 0x00538C21;
// LINE 201:
	__asm        mov    reinterpret_cast<uint32_t>(turnRadius), 0;
	__asm        mov    *reinterpret_cast<uint32_t*>(reinterpret_cast<char*>(&turnRadius) + 4), 0x40200000;
// LINE 202:
	__asm        mov    reinterpret_cast<uint32_t>(turnAngle), 0x54411744;
	__asm        mov    *reinterpret_cast<uint32_t*>(reinterpret_cast<char*>(&turnAngle) + 4), 0x3FD921FB;
// LINE 204:
	__asm        fld    qword ptr ds:[0x593338];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ds:[0x62D7B0], eax;
// LINE 205:
	__asm        fld    qword ptr ds:[0x593340];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ds:[0x62D7B4], eax;
// LINE 206:
	__asm        mov    leg, 1;
	__asm        jmp    near ptr 0x00538CF4;
	__asm        inc    leg;
	__asm        cmp    leg, 0xA;
	__asm        jge    near ptr 0x00538D63;
// LINE 208:
	__asm        mov    eax, leg;
	__asm        dec    eax;
	__asm        mov    [ebp-0x8C], eax;
	__asm        fild   dword ptr [ebp-0x8C];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D7B0], eax;
// LINE 209:
	__asm        mov    eax, leg;
	__asm        dec    eax;
	__asm        mov    [ebp-0x90], eax;
	__asm        fild   dword ptr [ebp-0x90];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D7B4], eax;
// LINE 210:
	__asm        jmp    near ptr 0x00538CF1;
// LINE 211:
	__asm        mov    dword ptr ds:[0x62D800], 0xFFF80000;
// LINE 212:
	__asm        mov    dword ptr ds:[0x62D804], 0xFFE00000;
// LINE 214:
	__asm        fld    qword ptr ds:[0x593348];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ds:[0x62D808], eax;
// LINE 215:
	__asm        fld    qword ptr ds:[0x593350];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ds:[0x62D80C], eax;
// LINE 216:
	__asm        mov    leg, 1;
	__asm        jmp    near ptr 0x00538DB2;
	__asm        inc    leg;
	__asm        cmp    leg, 0xA;
	__asm        jge    near ptr 0x00538E23;
// LINE 218:
	__asm        mov    eax, leg;
	__asm        dec    eax;
	__asm        mov    [ebp-0x94], eax;
	__asm        fild   dword ptr [ebp-0x94];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D808], eax;
// LINE 219:
	__asm        mov    eax, leg;
	__asm        dec    eax;
	__asm        mov    [ebp-0x98], eax;
	__asm        fild   dword ptr [ebp-0x98];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fchs;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D80C], eax;
// LINE 220:
	__asm        jmp    near ptr 0x00538DAF;
// LINE 221:
	__asm        mov    dword ptr ds:[0x62D858], 0xFFE00000;
// LINE 222:
	__asm        mov    dword ptr ds:[0x62D85C], 0x80000;
// LINE 224:
	__asm        fld    qword ptr ds:[0x593358];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ds:[0x62D860], eax;
// LINE 225:
	__asm        fld    qword ptr ds:[0x593360];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ds:[0x62D864], eax;
// LINE 226:
	__asm        mov    leg, 1;
	__asm        jmp    near ptr 0x00538E72;
	__asm        inc    leg;
	__asm        cmp    leg, 0xA;
	__asm        jge    near ptr 0x00538EE5;
// LINE 228:
	__asm        mov    eax, leg;
	__asm        dec    eax;
	__asm        mov    [ebp-0x9C], eax;
	__asm        fild   dword ptr [ebp-0x9C];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fchs;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D860], eax;
// LINE 229:
	__asm        mov    eax, leg;
	__asm        dec    eax;
	__asm        mov    [ebp-0xA0], eax;
	__asm        fild   dword ptr [ebp-0xA0];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fchs;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D864], eax;
// LINE 230:
	__asm        jmp    near ptr 0x00538E6F;
// LINE 231:
	__asm        mov    dword ptr ds:[0x62D8B0], 0x80000;
// LINE 232:
	__asm        mov    dword ptr ds:[0x62D8B4], 0x200000;
// LINE 234:
	__asm        fld    qword ptr ds:[0x593368];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ds:[0x62D8B8], eax;
// LINE 235:
	__asm        fld    qword ptr ds:[0x593370];
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ds:[0x62D8BC], eax;
// LINE 236:
	__asm        mov    leg, 1;
	__asm        jmp    near ptr 0x00538F34;
	__asm        inc    leg;
	__asm        cmp    leg, 0xA;
	__asm        jge    near ptr 0x00538FA5;
// LINE 238:
	__asm        mov    eax, leg;
	__asm        dec    eax;
	__asm        mov    [ebp-0xA4], eax;
	__asm        fild   dword ptr [ebp-0xA4];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fchs;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D8B8], eax;
// LINE 239:
	__asm        mov    eax, leg;
	__asm        dec    eax;
	__asm        mov    [ebp-0xA8], eax;
	__asm        fild   dword ptr [ebp-0xA8];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    [ecx*8+0x62D8BC], eax;
// LINE 240:
	__asm        jmp    near ptr 0x00538F31;
// LINE 241:
	__asm        mov    dword ptr ds:[0x62D908], 0x200000;
// LINE 242:
	__asm        mov    dword ptr ds:[0x62D90C], 0xFFF80000;
// LINE 245:
	__asm        mov    incline, 0;
// LINE 249:
	__asm        mov    incline, 0;
	__asm        jmp    near ptr 0x00538FCF;
	__asm        inc    incline;
	__asm        cmp    incline, 3;
	__asm        jge    near ptr 0x00539256;
// LINE 250:
// Block start:
	int32_t tType;
	__asm        mov    tType, 0;
	__asm        jmp    near ptr 0x00538FE8;
	__asm        inc    tType;
	__asm        cmp    tType, 4;
	__asm        jge    near ptr 0x00539251;
// LINE 252:
	__asm        mov    dir, 0;
	__asm        jmp    near ptr 0x00539001;
	__asm        inc    dir;
	__asm        cmp    dir, 4;
	__asm        jge    near ptr 0x0053924C;
// LINE 254:
	__asm        mov    leg, 0;
	__asm        jmp    near ptr 0x0053901A;
	__asm        inc    leg;
	__asm        cmp    leg, 0xA;
	__asm        jge    near ptr 0x00539247;
// LINE 258:
	__asm        mov    eax, leg;
	__asm        mov    ecx, dir;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        shl    ecx, 3;
	__asm        lea    eax, [ecx+eax*8+8];
	__asm        mov    ecx, tType;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        shl    ecx, 5;
	__asm        mov    eax, [eax+ecx+0x62D390];
	__asm        mov    ecx, dir;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        mov    edx, leg;
	__asm        shl    edx, 3;
	__asm        lea    ecx, [edx+ecx*8];
	__asm        mov    edx, tType;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        shl    edx, 5;
	__asm        sub    eax, [ecx+edx+0x62D390];
	__asm        mov    ecx, incline;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    edx, leg;
	__asm        shl    edx, 2;
	__asm        lea    edx, [edx+edx*8];
	__asm        lea    ecx, [edx+ecx*4];
	__asm        mov    edx, tType;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*8];
	__asm        shl    edx, 5;
	__asm        add    ecx, edx;
	__asm        mov    edx, dir;
	__asm        lea    edx, [edx+edx*4];
	__asm        shl    edx, 3;
	__asm        lea    edx, [edx+edx*8];
	__asm        mov    [ecx+edx+0x62BD10], eax;
// LINE 260:
	__asm        mov    eax, leg;
	__asm        mov    ecx, dir;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        shl    ecx, 3;
	__asm        lea    eax, [ecx+eax*8+8];
	__asm        mov    ecx, tType;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        shl    ecx, 5;
	__asm        mov    eax, [eax+ecx+0x62D394];
	__asm        mov    ecx, dir;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        mov    edx, leg;
	__asm        shl    edx, 3;
	__asm        lea    ecx, [edx+ecx*8];
	__asm        mov    edx, tType;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        shl    edx, 5;
	__asm        sub    eax, [ecx+edx+0x62D394];
	__asm        mov    ecx, incline;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    edx, leg;
	__asm        shl    edx, 2;
	__asm        lea    edx, [edx+edx*8];
	__asm        lea    ecx, [edx+ecx*4];
	__asm        mov    edx, tType;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*8];
	__asm        shl    edx, 5;
	__asm        add    ecx, edx;
	__asm        mov    edx, dir;
	__asm        lea    edx, [edx+edx*4];
	__asm        shl    edx, 3;
	__asm        lea    edx, [edx+edx*8];
	__asm        mov    [ecx+edx+0x62BD18], eax;
// LINE 263:
	__asm        mov    eax, incline;
	__asm        dec    eax;
	__asm        shl    eax, 5;
	__asm        mov    ecx, 0xA;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, incline;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    edx, leg;
	__asm        shl    edx, 2;
	__asm        lea    edx, [edx+edx*8];
	__asm        lea    ecx, [edx+ecx*4];
	__asm        mov    edx, tType;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*8];
	__asm        shl    edx, 5;
	__asm        add    ecx, edx;
	__asm        mov    edx, dir;
	__asm        lea    edx, [edx+edx*4];
	__asm        shl    edx, 3;
	__asm        lea    edx, [edx+edx*8];
	__asm        mov    [ecx+edx+0x62BD14], eax;
// LINE 267:
	__asm        mov    eax, incline;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, leg;
	__asm        shl    ecx, 2;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    eax, [ecx+eax*4];
	__asm        mov    ecx, tType;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        shl    ecx, 5;
	__asm        add    eax, ecx;
	__asm        mov    ecx, dir;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        shl    ecx, 3;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        add    eax, ecx;
	__asm        add    eax, 0x62BD10;
	__asm        push   eax;
	__asm        call   0x004CA1E3;
	__asm        add    esp, 4;
	__asm        mov    ecx, leg;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    edx, incline;
	__asm        shl    edx, 2;
	__asm        lea    ecx, [edx+ecx*4];
	__asm        mov    edx, tType;
	__asm        shl    edx, 3;
	__asm        lea    edx, [edx+edx*2];
	__asm        lea    edx, [edx+edx*4];
	__asm        mov    [ecx+edx+0x62BB30], eax;
// LINE 270:
	__asm        mov    eax, incline;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, leg;
	__asm        shl    ecx, 2;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    eax, [ecx+eax*4];
	__asm        mov    ecx, tType;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        shl    ecx, 5;
	__asm        add    eax, ecx;
	__asm        mov    ecx, dir;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        shl    ecx, 3;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        add    eax, ecx;
	__asm        add    eax, 0x62BD10;
	__asm        push   eax;
	__asm        mov    eax, tType;
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 9;
	__asm        mov    ecx, incline;
	__asm        shl    ecx, 6;
	__asm        add    eax, ecx;
	__asm        mov    ecx, dir;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        shl    ecx, 7;
	__asm        add    eax, ecx;
	__asm        mov    ecx, leg;
	__asm        shl    ecx, 6;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        add    eax, ecx;
	__asm        add    eax, 0x62D910;
	__asm        push   eax;
	__asm        call   0x004CAEFB;
	__asm        add    esp, 8;
// LINE 271:
	__asm        jmp    near ptr 0x00539017;
// LINE 272:
	__asm        jmp    near ptr 0x00538FFE;
// LINE 273:
	__asm        jmp    near ptr 0x00538FE5;
// Block end:
	__asm        jmp    near ptr 0x00538FCC;
// LINE 274:
	__asm        jmp    near ptr 0x0053925B;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00539260
int32_t IsThisAnIntersection(long x, long y) {
	unsigned short t2;
	unsigned short t;

// LINE 419:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 420:
	__asm        cmp    x, 0;
	__asm        jl     near ptr 0x00539297;
	__asm        cmp    y, 0;
	__asm        jl     near ptr 0x00539297;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x00539297;
	__asm        cmp    y, 0x80;
	__asm        jl     near ptr 0x005392A2;
	__asm        mov    t, 0;
	__asm        jmp    near ptr 0x005392DA;
	__asm        mov    eax, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    t, ax;
	__asm        jmp    near ptr 0x005392DA;
// LINE 423:
	__asm        mov    eax, reinterpret_cast<uint32_t>(t);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x69;
	__asm        jne    near ptr 0x00539316;
// LINE 425:
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        test   al, 1;
	__asm        je     near ptr 0x005392FE;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00539645;
// LINE 426:
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        test   al, 1;
	__asm        je     near ptr 0x00539311;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00539645;
// LINE 430:
	__asm        jmp    near ptr 0x0053963E;
	__asm        mov    eax, reinterpret_cast<uint32_t>(t);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x27;
	__asm        jl     near ptr 0x00539347;
	__asm        mov    eax, reinterpret_cast<uint32_t>(t);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2B;
	__asm        jg     near ptr 0x00539347;
// LINE 432:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00539645;
// LINE 436:
	__asm        jmp    near ptr 0x0053963E;
	__asm        mov    eax, reinterpret_cast<uint32_t>(t);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x49;
	__asm        jne    near ptr 0x005394C7;
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        test   al, 1;
	__asm        je     near ptr 0x005394C7;
// LINE 438:
	__asm        cmp    x, 1;
	__asm        jle    near ptr 0x00539411;
// LINE 440:
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        js     near ptr 0x0053939E;
	__asm        cmp    y, 0;
	__asm        jl     near ptr 0x0053939E;
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0053939E;
	__asm        cmp    y, 0x80;
	__asm        jl     near ptr 0x005393A9;
	__asm        mov    t2, 0;
	__asm        jmp    near ptr 0x005393E1;
	__asm        mov    eax, x;
	__asm        mov    eax, [eax*4+0x638F6C];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, [ecx*4+0x63984C];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    t2, ax;
	__asm        jmp    near ptr 0x005393E1;
// LINE 441:
	__asm        mov    eax, reinterpret_cast<uint32_t>(t2);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x805F;
	__asm        je     near ptr 0x00539407;
	__asm        mov    eax, reinterpret_cast<uint32_t>(t2);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x8060;
	__asm        jne    near ptr 0x00539411;
// LINE 442:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00539645;
// LINE 445:
	__asm        cmp    x, 0x7C;
	__asm        jge    near ptr 0x005394C2;
// LINE 447:
	__asm        mov    eax, x;
	__asm        add    eax, 2;
	__asm        js     near ptr 0x0053944F;
	__asm        cmp    y, 0;
	__asm        jl     near ptr 0x0053944F;
	__asm        mov    eax, x;
	__asm        add    eax, 2;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0053944F;
	__asm        cmp    y, 0x80;
	__asm        jl     near ptr 0x0053945A;
	__asm        mov    t2, 0;
	__asm        jmp    near ptr 0x00539492;
	__asm        mov    eax, x;
	__asm        mov    eax, [eax*4+0x638F78];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, [ecx*4+0x639858];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    t2, ax;
	__asm        jmp    near ptr 0x00539492;
// LINE 448:
	__asm        mov    eax, reinterpret_cast<uint32_t>(t2);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x805D;
	__asm        je     near ptr 0x005394B8;
	__asm        mov    eax, reinterpret_cast<uint32_t>(t2);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x805E;
	__asm        jne    near ptr 0x005394C2;
// LINE 449:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00539645;
// LINE 452:
	__asm        jmp    near ptr 0x0053963E;
	__asm        mov    eax, reinterpret_cast<uint32_t>(t);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x4A;
	__asm        jne    near ptr 0x0053963E;
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        test   al, 1;
	__asm        je     near ptr 0x0053963E;
// LINE 454:
	__asm        cmp    y, 1;
	__asm        jle    near ptr 0x0053958F;
// LINE 456:
	__asm        cmp    x, 0;
	__asm        jl     near ptr 0x0053951E;
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        js     near ptr 0x0053951E;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x0053951E;
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x00539529;
	__asm        mov    t2, 0;
	__asm        jmp    near ptr 0x00539563;
	__asm        mov    eax, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx-1];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx-1];
	__asm        or     eax, ebx;
	__asm        mov    t2, ax;
	__asm        jmp    near ptr 0x00539563;
// LINE 457:
	__asm        mov    eax, reinterpret_cast<uint32_t>(t2);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x60;
	__asm        je     near ptr 0x00539585;
	__asm        mov    eax, reinterpret_cast<uint32_t>(t2);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5F;
	__asm        jne    near ptr 0x0053958F;
// LINE 458:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00539645;
// LINE 461:
	__asm        cmp    y, 0x7C;
	__asm        jge    near ptr 0x0053963E;
// LINE 463:
	__asm        cmp    x, 0;
	__asm        jl     near ptr 0x005395CD;
	__asm        mov    eax, y;
	__asm        add    eax, 2;
	__asm        js     near ptr 0x005395CD;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x005395CD;
	__asm        mov    eax, y;
	__asm        add    eax, 2;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x005395D8;
	__asm        mov    t2, 0;
	__asm        jmp    near ptr 0x00539612;
	__asm        mov    eax, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+2];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx+2];
	__asm        or     eax, ebx;
	__asm        mov    t2, ax;
	__asm        jmp    near ptr 0x00539612;
// LINE 464:
	__asm        mov    eax, reinterpret_cast<uint32_t>(t2);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5E;
	__asm        je     near ptr 0x00539634;
	__asm        mov    eax, reinterpret_cast<uint32_t>(t2);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5D;
	__asm        jne    near ptr 0x0053963E;
// LINE 465:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00539645;
// LINE 469:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00539645;
// LINE 470:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0053964a
int32_t DoRoadTilesConnect(unsigned short fromTile, unsigned short toTile, enum DirectionTypes CurDir, enum DirectionTypes TestDir) {
	 // Switch table at 0x00539a7e
	enum DirectionTypes fromConnections;
	enum DirectionTypes toConnections;

// LINE 492:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x34;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    ax, toTile;
	__asm        mov    [ebp-0x24], ax;
// LINE 498:
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFF;
	__asm        mov    [ebp-0x24], ax;
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1D;
	__asm        jl     near ptr 0x00539689;
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2B;
	__asm        jle    near ptr 0x005396EF;
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x3F;
	__asm        jl     near ptr 0x005396AB;
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x46;
	__asm        jle    near ptr 0x005396EF;
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x49;
	__asm        jl     near ptr 0x005396CD;
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x59;
	__asm        jle    near ptr 0x005396EF;
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5D;
	__asm        jl     near ptr 0x005396FE;
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x6B;
	__asm        jg     near ptr 0x005396FE;
	__asm        jmp    near ptr 0x00539714;
	__asm        jmp    near ptr 0x0053970D;
	__asm        jmp    near ptr 0x00539703;
	__asm        jmp    near ptr 0x0053970D;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    near ptr 0x00539714;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 501:
	__asm        mov    ax, fromTile;
	__asm        mov    [ebp-0xC], ax;
	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0x7FFF;
	__asm        mov    [ebp-0xC], ax;
	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5D;
	__asm        jl     near ptr 0x00539759;
	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x60;
	__asm        jg     near ptr 0x00539759;
	__asm        jmp    near ptr 0x005397BC;
	__asm        jmp    near ptr 0x00539768;
	__asm        jmp    near ptr 0x0053975E;
	__asm        jmp    near ptr 0x00539768;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        jne    near ptr 0x005397BC;
	__asm        mov    ax, toTile;
	__asm        mov    [ebp-0x14], ax;
	__asm        mov    eax, [ebp-0x14];
	__asm        and    eax, 0x7FFF;
	__asm        mov    [ebp-0x14], ax;
	__asm        mov    eax, [ebp-0x14];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5D;
	__asm        jl     near ptr 0x005397A8;
	__asm        mov    eax, [ebp-0x14];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x60;
	__asm        jg     near ptr 0x005397A8;
	__asm        jmp    near ptr 0x005397BC;
	__asm        jmp    near ptr 0x005397B2;
	__asm        jmp    near ptr 0x0053998C;
	__asm        jmp    near ptr 0x005397BC;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x0053998C;
// LINE 503:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00539829;
// LINE 505:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 2;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 506:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 8;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 507:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 1;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 508:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 1;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 509:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 8;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 510:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 2;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 511:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 4;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 512:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 4;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 513:
	__asm        jmp    near ptr 0x00539890;
	__asm        cmp    dword ptr [ebp-0x2C], 0x805D;
	__asm        jg     near ptr 0x00539864;
	__asm        je     near ptr 0x005397D7;
	__asm        sub    dword ptr [ebp-0x2C], 0x5D;
	__asm        cmp    dword ptr [ebp-0x2C], 3;
	__asm        ja     near ptr 0x00539890;
	__asm        mov    eax, [ebp-0x2C];
	__asm        jmp    dword ptr [eax*4+0x539854];
	__asm        int    3;
	__asm        xchg   edi, eax;
	__asm        push   ebx;
	__asm        add    dl, ah;
	__asm        xchg   edi, eax;
	__asm        push   ebx;
	__asm        add    al, bh;
	__asm        xchg   edi, eax;
	__asm        push   ebx;
	__asm        add    [esi], cl;
	__asm        cwde;
	__asm        push   ebx;
	__asm        add    [ecx-0x7FA12B83], al;
	__asm        add    [eax], al;
	__asm        je     near ptr 0x005397ED;
	__asm        cmp    dword ptr [ebp-0x2C], 0x805F;
	__asm        je     near ptr 0x00539803;
	__asm        cmp    dword ptr [ebp-0x2C], 0x8060;
	__asm        je     near ptr 0x00539819;
	__asm        jmp    near ptr 0x00539890;
// LINE 516:
	__asm        mov    eax, reinterpret_cast<uint32_t>(toTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x0053991E;
// LINE 518:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 4;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 519:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 1;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 520:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 2;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 521:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 2;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 522:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 1;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 523:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 4;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 524:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 8;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 525:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 8;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 526:
	__asm        push   0x20E;
	__asm        push   0x5B804C;
	__asm        push   0x5B8070;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00539919;
	__asm        jmp    near ptr 0x00539919;
// LINE 527:
	__asm        jmp    near ptr 0x00539985;
	__asm        cmp    dword ptr [ebp-0x30], 0x805D;
	__asm        jg     near ptr 0x00539959;
	__asm        je     near ptr 0x005398AB;
	__asm        sub    dword ptr [ebp-0x30], 0x5D;
	__asm        cmp    dword ptr [ebp-0x30], 3;
	__asm        ja     near ptr 0x005398F8;
	__asm        mov    eax, [ebp-0x30];
	__asm        jmp    dword ptr [eax*4+0x539949];
	__asm        mov    al, ds:[0xB6005398];
	__asm        cwde;
	__asm        push   ebx;
	__asm        add    ah, cl;
	__asm        cwde;
	__asm        push   ebx;
	__asm        add    dl, ah;
	__asm        cwde;
	__asm        push   ebx;
	__asm        add    [ecx-0x7FA12F83], al;
	__asm        add    [eax], al;
	__asm        je     near ptr 0x005398C1;
	__asm        cmp    dword ptr [ebp-0x30], 0x805F;
	__asm        je     near ptr 0x005398D7;
	__asm        cmp    dword ptr [ebp-0x30], 0x8060;
	__asm        je     near ptr 0x005398ED;
	__asm        jmp    near ptr 0x005398F8;
// LINE 529:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 536:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x4B;
	__asm        je     near ptr 0x005399D0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x4C;
	__asm        je     near ptr 0x005399D0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(toTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x4B;
	__asm        je     near ptr 0x005399D0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(toTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x4C;
	__asm        jne    near ptr 0x00539A8D;
// LINE 538:
	__asm        mov    eax, CurDir;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x00539A4B;
// LINE 540:
	__asm        test   reinterpret_cast<uint8_t>(TestDir), 1;
	__asm        je     near ptr 0x005399EF;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00539BEE;
	__asm        jmp    near ptr 0x00539A86;
// LINE 541:
	__asm        test   reinterpret_cast<uint8_t>(TestDir), 2;
	__asm        je     near ptr 0x00539A08;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00539BEE;
	__asm        jmp    near ptr 0x00539A86;
// LINE 542:
	__asm        test   reinterpret_cast<uint8_t>(TestDir), 4;
	__asm        je     near ptr 0x00539A21;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00539BEE;
	__asm        jmp    near ptr 0x00539A86;
// LINE 543:
	__asm        test   reinterpret_cast<uint8_t>(TestDir), 8;
	__asm        je     near ptr 0x00539A3A;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00539BEE;
	__asm        jmp    near ptr 0x00539A86;
// LINE 544:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 545:
	__asm        jmp    near ptr 0x00539A86;
	__asm        dec    dword ptr [ebp-0x34];
	__asm        cmp    dword ptr [ebp-0x34], 7;
	__asm        ja     near ptr 0x00539A3F;
	__asm        mov    eax, [ebp-0x34];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x539A7E];
	__asm        jmp    dword ptr [ecx*4+0x539A6A];
	__asm        fistp  dword ptr [ecx-0x660BFFAD];
	__asm        push   ebx;
	__asm        add    ds:[0x2600539A], cl;
	__asm        call   far ptr 0x0053:0x9A3F0053;
	__asm        add    [ecx], al;
	__asm        add    al, 2;
	__asm        add    al, 4;
	__asm        add    al, 3;
// LINE 547:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 552:
	__asm        mov    dword ptr [ebp-0x1C], 0x5B57E8;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    ecx, 0xFFFF;
	__asm        cmp    [eax], ecx;
	__asm        jne    near ptr 0x00539AB6;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    fromConnections, eax;
	__asm        jmp    near ptr 0x00539AEA;
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00539AD5;
	__asm        mov    eax, 0x5B57E8;
	__asm        add    eax, 0xF40;
	__asm        cmp    eax, [ebp-0x1C];
	__asm        jae    near ptr 0x00539AE1;
	__asm        mov    fromConnections, 0;
	__asm        jmp    near ptr 0x00539AEA;
	__asm        add    dword ptr [ebp-0x1C], 8;
	__asm        jmp    near ptr 0x00539A94;
// LINE 553:
	__asm        mov    dword ptr [ebp-0x20], 0x5B57E8;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, reinterpret_cast<uint32_t>(toTile);
	__asm        and    ecx, 0xFFFF;
	__asm        cmp    [eax], ecx;
	__asm        jne    near ptr 0x00539B13;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    toConnections, eax;
	__asm        jmp    near ptr 0x00539B47;
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00539B32;
	__asm        mov    eax, 0x5B57E8;
	__asm        add    eax, 0xF40;
	__asm        cmp    eax, [ebp-0x20];
	__asm        jae    near ptr 0x00539B3E;
	__asm        mov    toConnections, 0;
	__asm        jmp    near ptr 0x00539B47;
	__asm        add    dword ptr [ebp-0x20], 8;
	__asm        jmp    near ptr 0x00539AF1;
// LINE 556:
	__asm        test   reinterpret_cast<uint8_t>(TestDir), 1;
	__asm        je     near ptr 0x00539B6F;
	__asm        test   reinterpret_cast<uint8_t>(fromConnections), 1;
	__asm        je     near ptr 0x00539B6F;
	__asm        test   reinterpret_cast<uint8_t>(toConnections), 4;
	__asm        je     near ptr 0x00539B6F;
// LINE 557:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 558:
	__asm        test   reinterpret_cast<uint8_t>(TestDir), 4;
	__asm        je     near ptr 0x00539B97;
	__asm        test   reinterpret_cast<uint8_t>(fromConnections), 4;
	__asm        je     near ptr 0x00539B97;
	__asm        test   reinterpret_cast<uint8_t>(toConnections), 1;
	__asm        je     near ptr 0x00539B97;
// LINE 559:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 560:
	__asm        test   reinterpret_cast<uint8_t>(TestDir), 8;
	__asm        je     near ptr 0x00539BBF;
	__asm        test   reinterpret_cast<uint8_t>(fromConnections), 8;
	__asm        je     near ptr 0x00539BBF;
	__asm        test   reinterpret_cast<uint8_t>(toConnections), 2;
	__asm        je     near ptr 0x00539BBF;
// LINE 561:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 562:
	__asm        test   reinterpret_cast<uint8_t>(TestDir), 2;
	__asm        je     near ptr 0x00539BE7;
	__asm        test   reinterpret_cast<uint8_t>(fromConnections), 2;
	__asm        je     near ptr 0x00539BE7;
	__asm        test   reinterpret_cast<uint8_t>(toConnections), 8;
	__asm        je     near ptr 0x00539BE7;
// LINE 563:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 565:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00539BEE;
// LINE 566:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 2:00004338-0000442f Module: 157, 8 byte alignment, initialized_data, read, 
// LOCAL: COPTER_D 0x00593338
// OT
// LOCAL: COPTER_D 0x00593378
// RRT
// LOCAL: COPTER_D 0x005933b8
// LRT


// Contribution: 3:0002104c-00021075 Module: 157, 4 byte alignment, initialized_data, read, write, 


// Contribution: 3:00094a00-0009e1cf Module: 157, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x0062ba00
// DiagMatrix
// GLOBAL: COPTER_D 0x0062bb00
// DiagVector
// GLOBAL: COPTER_D 0x0062bb30
// DTT
// GLOBAL: COPTER_D 0x0062bd10
// DVT
// GLOBAL: COPTER_D 0x0062d390
// OTT
// GLOBAL: COPTER_D 0x0062d910
// RMT
// GLOBAL: COPTER_D 0x00635110
// DiagOffset
