// Module: S3road.obj
// Source: C:\Copter\Source\Game\S3road.cpp
// autogenerated by simcopter_tool from PDB file

// Type: int32_t;

// Type: /*packed*/ struct _dPoint2d (forward reference);
struct _dPoint2d{ // packed(0x10 bytes) TI: 0x2766
	/*+0x0*/   double x; // 0x8 bytes
	/*+0x8*/   double z; // 0x8 bytes
};

// Type: /*packed*/ struct _fPoint2d (forward reference);
struct _fPoint2d{ // packed(0x8 bytes) TI: 0x3008
	/*+0x0*/   int32_t x;
	/*+0x4*/   int32_t z;
};

// Type: /*packed*/ struct Point3d (forward reference);
struct Point3d{ // packed(0xc bytes) TI: 0x18b0
	/*+0x0*/   int32_t x;
	/*+0x4*/   int32_t y;
	/*+0x8*/   int32_t z;
};

// Type: double;

// Type: void;

// Type: long;

// Type: unsigned short;

// Type: enum DirectionTypes;
enum DirectionTypes {
	NO_DIRECTION = 0,
	NORTH = 1,
	EAST = 2,
	SOUTH = 4,
	WEST = 8,
	RISING = 16,
	RISING_NORTH = 17,
	RISING_SOUTH = 20,
	RISING_EAST = 18,
	RISING_WEST = 24,
	NORTH_EAST = 3,
	SOUTH_EAST = 6,
	SOUTH_WEST = 12,
	NORTH_WEST = 9,
};



// Contribution: 1:00137470-00138bf2 Module: 157, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00538470
void S3RoadDataInit() {
	/*bp-0x8*/   double DiagLongDist; // 0x8 bytes
	/*bp-0x10*/  double DiagShortDist; // 0x8 bytes
	/*bp-0x18*/  double turnAngle; // 0x8 bytes
	/*bp-0x1c*/  int32_t leg;
	/*bp-0x20*/  int32_t incline;
	/*bp-0x28*/  double turnRadius; // 0x8 bytes
	/*bp-0x30*/  double straightLegSize; // 0x8 bytes
	/*bp-0x34*/  int32_t dir;

// LINE 53:
	__asm        mov    reinterpret_cast<uint32_t>(straightLegSize), 0x9999999A;
	__asm        mov    *reinterpret_cast<uint32_t*>(reinterpret_cast<char*>(&straightLegSize) + 4), 0x40199999;
// LINE 54:
	__asm        mov    leg, 0;
	__asm        jmp    _T29;
_T26:
	leg++;
_T29:
	__asm        cmp    leg, 0xB;
	__asm        jge    _T7a;
// LINE 56:
	__asm        fld    OT[0].x;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[0][0][0].x[ecx*8], eax;
// LINE 57:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x3C], eax;
	__asm        fild   dword ptr [ebp-0x3C];
	__asm        fmul   straightLegSize;
	__asm        fadd   OT[0].z;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[0][0][0].z[ecx*8], eax;
// LINE 58:
	__asm        jmp    _T26;
// LINE 59:
_T7a:
	__asm        mov    leg, 0;
	__asm        jmp    _T89;
_T86:
	leg++;
_T89:
	__asm        cmp    leg, 0xB;
	__asm        jge    _Tda;
// LINE 61:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x40], eax;
	__asm        fild   dword ptr [ebp-0x40];
	__asm        fmul   straightLegSize;
	__asm        fadd   OT[1].x;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[0][1][0].x[ecx*8], eax;
// LINE 62:
	__asm        fld    OT[1].z;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[0][1][0].z[ecx*8], eax;
// LINE 63:
	__asm        jmp    _T86;
// LINE 64:
_Tda:
	__asm        mov    leg, 0;
	__asm        jmp    _Te9;
_Te6:
	leg++;
_Te9:
	__asm        cmp    leg, 0xB;
	__asm        jge    _T13a;
// LINE 66:
	__asm        fld    OT[2].x;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[0][2][0].x[ecx*8], eax;
// LINE 67:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x44], eax;
	__asm        fild   dword ptr [ebp-0x44];
	__asm        fmul   straightLegSize;
	__asm        fsubr  OT[2].z;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[0][2][0].z[ecx*8], eax;
// LINE 68:
	__asm        jmp    _Te6;
// LINE 69:
_T13a:
	__asm        mov    leg, 0;
	__asm        jmp    _T149;
_T146:
	leg++;
_T149:
	__asm        cmp    leg, 0xB;
	__asm        jge    _T19a;
// LINE 71:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x48], eax;
	__asm        fild   dword ptr [ebp-0x48];
	__asm        fmul   straightLegSize;
	__asm        fsubr  OT[3].x;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[0][3][0].x[ecx*8], eax;
// LINE 72:
	__asm        fld    OT[3].z;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[0][3][0].z[ecx*8], eax;
// LINE 73:
	__asm        jmp    _T146;
// LINE 85:
_T19a:
	DiagVector[0].x = 0x1;
// LINE 86:
	DiagVector[0].z = 0xffffffff;
// LINE 87:
	DiagVector[0].y = 0x0;
// LINE 88:
	__asm        push   0x62BB00;
	__asm        call   MTNormalize;
	__asm        add    esp, 4;
// LINE 89:
	__asm        push   0x62BB00;
	__asm        push   0x62BA00;
	__asm        call   MTCreateDOF4x4;
	__asm        add    esp, 8;
// LINE 91:
	DiagVector[1].x = 0xffffffff;
// LINE 92:
	DiagVector[1].z = 0xffffffff;
// LINE 93:
	DiagVector[1].y = 0x0;
// LINE 94:
	__asm        mov    eax, 0x62BB00;
	__asm        add    eax, 0xC;
	__asm        push   eax;
	__asm        call   MTNormalize;
	__asm        add    esp, 4;
// LINE 95:
	__asm        mov    eax, 0x62BB00;
	__asm        add    eax, 0xC;
	__asm        push   eax;
	__asm        mov    eax, 0x62BA00;
	__asm        add    eax, 0x40;
	__asm        push   eax;
	__asm        call   MTCreateDOF4x4;
	__asm        add    esp, 8;
// LINE 97:
	DiagVector[2].x = 0xffffffff;
// LINE 98:
	DiagVector[2].z = 0x1;
// LINE 99:
	DiagVector[2].y = 0x0;
// LINE 100:
	__asm        mov    eax, 0x62BB00;
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        call   MTNormalize;
	__asm        add    esp, 4;
// LINE 101:
	__asm        mov    eax, 0x62BB00;
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, 0x62BA00;
	__asm        add    eax, 0x80;
	__asm        push   eax;
	__asm        call   MTCreateDOF4x4;
	__asm        add    esp, 8;
// LINE 103:
	DiagVector[3].x = 0x1;
// LINE 104:
	DiagVector[3].z = 0x1;
// LINE 105:
	DiagVector[3].y = 0x0;
// LINE 106:
	__asm        mov    eax, 0x62BB00;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        call   MTNormalize;
	__asm        add    esp, 4;
// LINE 107:
	__asm        mov    eax, 0x62BB00;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    eax, 0x62BA00;
	__asm        add    eax, 0xC0;
	__asm        push   eax;
	__asm        call   MTCreateDOF4x4;
	__asm        add    esp, 8;
// LINE 111:
	__asm        fld    qword ptr ds:[0x593408];
	__asm        call   0x0056EC1A;
	__asm        fstp   DiagShortDist;
// LINE 112:
	__asm        fld    qword ptr ds:[0x593410];
	__asm        call   0x0056EC1A;
	__asm        fst    DiagLongDist;
// LINE 117:
	DiagOffset[0][0].x = 0xfff80000;
// LINE 118:
	DiagOffset[0][0].z = 0x200000;
// LINE 119:
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    DiagOffset[0][0].y, eax;
// LINE 121:
	DiagOffset[0][2].x = 0x200000;
// LINE 122:
	DiagOffset[0][2].z = 0x80000;
// LINE 123:
	__asm        fld    DiagShortDist;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    DiagOffset[0][2].y, eax;
// LINE 125:
	DiagOffset[1][1].x = 0x200000;
// LINE 126:
	DiagOffset[1][1].z = 0x80000;
// LINE 127:
	__asm        fld    DiagLongDist;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    DiagOffset[1][1].y, eax;
// LINE 129:
	DiagOffset[1][3].x = 0x80000;
// LINE 130:
	DiagOffset[1][3].z = 0xffe00000;
// LINE 131:
	__asm        fld    DiagShortDist;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    DiagOffset[1][3].y, eax;
// LINE 133:
	DiagOffset[2][0].x = 0xffe00000;
// LINE 134:
	DiagOffset[2][0].z = 0xfff80000;
// LINE 135:
	__asm        fld    DiagShortDist;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    DiagOffset[2][0].y, eax;
// LINE 137:
	DiagOffset[2][2].x = 0x80000;
// LINE 138:
	DiagOffset[2][2].z = 0xffe00000;
// LINE 139:
	__asm        fld    DiagLongDist;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    DiagOffset[2][2].y, eax;
// LINE 141:
	DiagOffset[3][1].x = 0xfff80000;
// LINE 142:
	DiagOffset[3][1].z = 0x200000;
// LINE 143:
	__asm        fld    DiagShortDist;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    DiagOffset[3][1].y, eax;
// LINE 145:
	DiagOffset[3][3].x = 0xffe00000;
// LINE 146:
	DiagOffset[3][3].z = 0xfff80000;
// LINE 147:
	__asm        fld    DiagLongDist;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    DiagOffset[3][3].y, eax;
// LINE 151:
	__asm        fld    RRT[0].x;
	__asm        fsub   OT[0].x;
	__asm        fstp   turnRadius;
// LINE 152:
	__asm        mov    reinterpret_cast<uint32_t>(turnAngle), 0x769A7903;
	__asm        mov    *reinterpret_cast<uint32_t*>(reinterpret_cast<char*>(&turnAngle) + 4), 0x3FC41B2F;
// LINE 153:
	__asm        mov    leg, 0;
	__asm        jmp    _T433;
_T430:
	leg++;
_T433:
	__asm        cmp    leg, 0xB;
	__asm        jge    _T4a0;
// LINE 155:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x4C], eax;
	__asm        fild   dword ptr [ebp-0x4C];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fsubr  RRT[0].x;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[1][0][0].x[ecx*8], eax;
// LINE 156:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x50], eax;
	__asm        fild   dword ptr [ebp-0x50];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fadd   RRT[0].z;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[1][0][0].z[ecx*8], eax;
// LINE 157:
	__asm        jmp    _T430;
// LINE 158:
_T4a0:
	__asm        mov    leg, 0;
	__asm        jmp    _T4af;
_T4ac:
	leg++;
_T4af:
	__asm        cmp    leg, 0xB;
	__asm        jge    _T51c;
// LINE 160:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x54], eax;
	__asm        fild   dword ptr [ebp-0x54];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fadd   RRT[1].x;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[1][1][0].x[ecx*8], eax;
// LINE 161:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x58], eax;
	__asm        fild   dword ptr [ebp-0x58];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fadd   RRT[1].z;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[1][1][0].z[ecx*8], eax;
// LINE 162:
	__asm        jmp    _T4ac;
// LINE 163:
_T51c:
	__asm        mov    leg, 0;
	__asm        jmp    _T52b;
_T528:
	leg++;
_T52b:
	__asm        cmp    leg, 0xB;
	__asm        jge    _T598;
// LINE 165:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x5C], eax;
	__asm        fild   dword ptr [ebp-0x5C];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fadd   RRT[2].x;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[1][2][0].x[ecx*8], eax;
// LINE 166:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x60], eax;
	__asm        fild   dword ptr [ebp-0x60];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fsubr  RRT[2].z;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[1][2][0].z[ecx*8], eax;
// LINE 167:
	__asm        jmp    _T528;
// LINE 168:
_T598:
	__asm        mov    leg, 0;
	__asm        jmp    _T5a7;
_T5a4:
	leg++;
_T5a7:
	__asm        cmp    leg, 0xB;
	__asm        jge    _T614;
// LINE 170:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x64], eax;
	__asm        fild   dword ptr [ebp-0x64];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fsubr  RRT[3].x;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[1][3][0].x[ecx*8], eax;
// LINE 171:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x68], eax;
	__asm        fild   dword ptr [ebp-0x68];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fsubr  RRT[3].z;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[1][3][0].z[ecx*8], eax;
// LINE 172:
	__asm        jmp    _T5a4;
// LINE 176:
_T614:
	__asm        fld    OT[0].x;
	__asm        fsub   LRT[0].x;
	__asm        fstp   turnRadius;
// LINE 177:
	__asm        mov    reinterpret_cast<uint32_t>(turnAngle), 0x769A7903;
	__asm        mov    *reinterpret_cast<uint32_t*>(reinterpret_cast<char*>(&turnAngle) + 4), 0x3FC41B2F;
// LINE 178:
	__asm        mov    leg, 0;
	__asm        jmp    _T640;
_T63d:
	leg++;
_T640:
	__asm        cmp    leg, 0xB;
	__asm        jge    _T6ad;
// LINE 180:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x6C], eax;
	__asm        fild   dword ptr [ebp-0x6C];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fadd   LRT[0].x;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[2][0][0].x[ecx*8], eax;
// LINE 181:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x70], eax;
	__asm        fild   dword ptr [ebp-0x70];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fadd   LRT[0].z;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[2][0][0].z[ecx*8], eax;
// LINE 182:
	__asm        jmp    _T63d;
// LINE 183:
_T6ad:
	__asm        mov    leg, 0;
	__asm        jmp    _T6bc;
_T6b9:
	leg++;
_T6bc:
	__asm        cmp    leg, 0xB;
	__asm        jge    _T729;
// LINE 185:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x74], eax;
	__asm        fild   dword ptr [ebp-0x74];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fadd   LRT[1].x;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[2][1][0].x[ecx*8], eax;
// LINE 186:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x78], eax;
	__asm        fild   dword ptr [ebp-0x78];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fsubr  LRT[1].z;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[2][1][0].z[ecx*8], eax;
// LINE 187:
	__asm        jmp    _T6b9;
// LINE 188:
_T729:
	__asm        mov    leg, 0;
	__asm        jmp    _T738;
_T735:
	leg++;
_T738:
	__asm        cmp    leg, 0xB;
	__asm        jge    _T7a5;
// LINE 190:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x7C], eax;
	__asm        fild   dword ptr [ebp-0x7C];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fsubr  LRT[2].x;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[2][2][0].x[ecx*8], eax;
// LINE 191:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x80], eax;
	__asm        fild   dword ptr [ebp-0x80];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fsubr  LRT[2].z;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[2][2][0].z[ecx*8], eax;
// LINE 192:
	__asm        jmp    _T735;
// LINE 193:
_T7a5:
	__asm        mov    leg, 0;
	__asm        jmp    _T7b4;
_T7b1:
	leg++;
_T7b4:
	__asm        cmp    leg, 0xB;
	__asm        jge    _T82d;
// LINE 195:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x84], eax;
	__asm        fild   dword ptr [ebp-0x84];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fsubr  LRT[3].x;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[2][3][0].x[ecx*8], eax;
// LINE 196:
	__asm        mov    eax, leg;
	__asm        mov    [ebp-0x88], eax;
	__asm        fild   dword ptr [ebp-0x88];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fadd   LRT[3].z;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[2][3][0].z[ecx*8], eax;
// LINE 197:
	__asm        jmp    _T7b1;
// LINE 201:
_T82d:
	__asm        mov    reinterpret_cast<uint32_t>(turnRadius), 0;
	__asm        mov    *reinterpret_cast<uint32_t*>(reinterpret_cast<char*>(&turnRadius) + 4), 0x40200000;
// LINE 202:
	__asm        mov    reinterpret_cast<uint32_t>(turnAngle), 0x54411744;
	__asm        mov    *reinterpret_cast<uint32_t*>(reinterpret_cast<char*>(&turnAngle) + 4), 0x3FD921FB;
// LINE 204:
	__asm        fld    OT[0].x;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    OTT[3][0][0].x, eax;
// LINE 205:
	__asm        fld    OT[0].z;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    OTT[3][0][0].z, eax;
// LINE 206:
	__asm        mov    leg, 1;
	__asm        jmp    _T884;
_T881:
	leg++;
_T884:
	__asm        cmp    leg, 0xA;
	__asm        jge    _T8f3;
// LINE 208:
	__asm        mov    eax, leg;
	__asm        dec    eax;
	__asm        mov    [ebp-0x8C], eax;
	__asm        fild   dword ptr [ebp-0x8C];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[3][0][0].x[ecx*8], eax;
// LINE 209:
	__asm        mov    eax, leg;
	__asm        dec    eax;
	__asm        mov    [ebp-0x90], eax;
	__asm        fild   dword ptr [ebp-0x90];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[3][0][0].z[ecx*8], eax;
// LINE 210:
	__asm        jmp    _T881;
// LINE 211:
_T8f3:
	OTT[3][0][10].x = 0xfff80000;
// LINE 212:
	OTT[3][0][10].z = 0xffe00000;
// LINE 214:
	__asm        fld    OT[1].x;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    OTT[3][1][0].x, eax;
// LINE 215:
	__asm        fld    OT[1].z;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    OTT[3][1][0].z, eax;
// LINE 216:
	__asm        mov    leg, 1;
	__asm        jmp    _T942;
_T93f:
	leg++;
_T942:
	__asm        cmp    leg, 0xA;
	__asm        jge    _T9b3;
// LINE 218:
	__asm        mov    eax, leg;
	__asm        dec    eax;
	__asm        mov    [ebp-0x94], eax;
	__asm        fild   dword ptr [ebp-0x94];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[3][1][0].x[ecx*8], eax;
// LINE 219:
	__asm        mov    eax, leg;
	__asm        dec    eax;
	__asm        mov    [ebp-0x98], eax;
	__asm        fild   dword ptr [ebp-0x98];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fchs;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[3][1][0].z[ecx*8], eax;
// LINE 220:
	__asm        jmp    _T93f;
// LINE 221:
_T9b3:
	OTT[3][1][10].x = 0xffe00000;
// LINE 222:
	OTT[3][1][10].z = 0x80000;
// LINE 224:
	__asm        fld    OT[2].x;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    OTT[3][2][0].x, eax;
// LINE 225:
	__asm        fld    OT[2].z;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    OTT[3][2][0].z, eax;
// LINE 226:
	__asm        mov    leg, 1;
	__asm        jmp    _Ta02;
_T9ff:
	leg++;
_Ta02:
	__asm        cmp    leg, 0xA;
	__asm        jge    _Ta75;
// LINE 228:
	__asm        mov    eax, leg;
	__asm        dec    eax;
	__asm        mov    [ebp-0x9C], eax;
	__asm        fild   dword ptr [ebp-0x9C];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fchs;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[3][2][0].x[ecx*8], eax;
// LINE 229:
	__asm        mov    eax, leg;
	__asm        dec    eax;
	__asm        mov    [ebp-0xA0], eax;
	__asm        fild   dword ptr [ebp-0xA0];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fchs;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[3][2][0].z[ecx*8], eax;
// LINE 230:
	__asm        jmp    _T9ff;
// LINE 231:
_Ta75:
	OTT[3][2][10].x = 0x80000;
// LINE 232:
	OTT[3][2][10].z = 0x200000;
// LINE 234:
	__asm        fld    OT[3].x;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    OTT[3][3][0].x, eax;
// LINE 235:
	__asm        fld    OT[3].z;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    OTT[3][3][0].z, eax;
// LINE 236:
	__asm        mov    leg, 1;
	__asm        jmp    _Tac4;
_Tac1:
	leg++;
_Tac4:
	__asm        cmp    leg, 0xA;
	__asm        jge    _Tb35;
// LINE 238:
	__asm        mov    eax, leg;
	__asm        dec    eax;
	__asm        mov    [ebp-0xA4], eax;
	__asm        fild   dword ptr [ebp-0xA4];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F338;
	__asm        fmul   turnRadius;
	__asm        fchs;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[3][3][0].x[ecx*8], eax;
// LINE 239:
	__asm        mov    eax, leg;
	__asm        dec    eax;
	__asm        mov    [ebp-0xA8], eax;
	__asm        fild   dword ptr [ebp-0xA8];
	__asm        fmul   turnAngle;
	__asm        call   0x0056F342;
	__asm        fmul   turnRadius;
	__asm        fmul   qword ptr ds:[0x593400];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, leg;
	__asm        mov    OTT[3][3][0].z[ecx*8], eax;
// LINE 240:
	__asm        jmp    _Tac1;
// LINE 241:
_Tb35:
	OTT[3][3][10].x = 0x200000;
// LINE 242:
	OTT[3][3][10].z = 0xfff80000;
// LINE 245:
	incline = 0x0;
// LINE 249:
	__asm        mov    incline, 0;
	__asm        jmp    _Tb5f;
_Tb5c:
	incline++;
_Tb5f:
	__asm        cmp    incline, 3;
	__asm        jge    _Tde6;
// LINE 250:
// Block start:
	/*bp-0x38*/  int32_t tType;
	__asm        mov    tType, 0;
	__asm        jmp    _Tb78;
_Tb75:
	tType++;
_Tb78:
	__asm        cmp    tType, 4;
	__asm        jge    _Tde1;
// LINE 252:
	__asm        mov    dir, 0;
	__asm        jmp    _Tb91;
_Tb8e:
	dir++;
_Tb91:
	__asm        cmp    dir, 4;
	__asm        jge    _Tddc;
// LINE 254:
	__asm        mov    leg, 0;
	__asm        jmp    _Tbaa;
_Tba7:
	leg++;
_Tbaa:
	__asm        cmp    leg, 0xA;
	__asm        jge    _Tdd7;
// LINE 258:
	__asm        mov    eax, leg;
	__asm        mov    ecx, dir;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        shl    ecx, 3;
	__asm        lea    eax, [ecx+eax*8+8];
	__asm        mov    ecx, tType;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        shl    ecx, 5;
	__asm        mov    eax, OTT[0][0][0].x[eax+ecx];
	__asm        mov    ecx, dir;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        mov    edx, leg;
	__asm        shl    edx, 3;
	__asm        lea    ecx, [edx+ecx*8];
	__asm        mov    edx, tType;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        shl    edx, 5;
	__asm        sub    eax, OTT[0][0][0].x[ecx+edx];
	__asm        mov    ecx, incline;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    edx, leg;
	__asm        shl    edx, 2;
	__asm        lea    edx, [edx+edx*8];
	__asm        lea    ecx, [edx+ecx*4];
	__asm        mov    edx, tType;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*8];
	__asm        shl    edx, 5;
	__asm        add    ecx, edx;
	__asm        mov    edx, dir;
	__asm        lea    edx, [edx+edx*4];
	__asm        shl    edx, 3;
	__asm        lea    edx, [edx+edx*8];
	__asm        mov    DVT[0][0][0][0].x[ecx+edx], eax;
// LINE 260:
	__asm        mov    eax, leg;
	__asm        mov    ecx, dir;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        shl    ecx, 3;
	__asm        lea    eax, [ecx+eax*8+8];
	__asm        mov    ecx, tType;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        shl    ecx, 5;
	__asm        mov    eax, OTT[0][0][0].z[eax+ecx];
	__asm        mov    ecx, dir;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        mov    edx, leg;
	__asm        shl    edx, 3;
	__asm        lea    ecx, [edx+ecx*8];
	__asm        mov    edx, tType;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        shl    edx, 5;
	__asm        sub    eax, OTT[0][0][0].z[ecx+edx];
	__asm        mov    ecx, incline;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    edx, leg;
	__asm        shl    edx, 2;
	__asm        lea    edx, [edx+edx*8];
	__asm        lea    ecx, [edx+ecx*4];
	__asm        mov    edx, tType;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*8];
	__asm        shl    edx, 5;
	__asm        add    ecx, edx;
	__asm        mov    edx, dir;
	__asm        lea    edx, [edx+edx*4];
	__asm        shl    edx, 3;
	__asm        lea    edx, [edx+edx*8];
	__asm        mov    DVT[0][0][0][0].z[ecx+edx], eax;
// LINE 263:
	__asm        mov    eax, incline;
	__asm        dec    eax;
	__asm        shl    eax, 5;
	__asm        mov    ecx, 0xA;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, incline;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    edx, leg;
	__asm        shl    edx, 2;
	__asm        lea    edx, [edx+edx*8];
	__asm        lea    ecx, [edx+ecx*4];
	__asm        mov    edx, tType;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*8];
	__asm        shl    edx, 5;
	__asm        add    ecx, edx;
	__asm        mov    edx, dir;
	__asm        lea    edx, [edx+edx*4];
	__asm        shl    edx, 3;
	__asm        lea    edx, [edx+edx*8];
	__asm        mov    DVT[0][0][0][0].y[ecx+edx], eax;
// LINE 267:
	__asm        mov    eax, incline;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, leg;
	__asm        shl    ecx, 2;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    eax, [ecx+eax*4];
	__asm        mov    ecx, tType;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        shl    ecx, 5;
	__asm        add    eax, ecx;
	__asm        mov    ecx, dir;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        shl    ecx, 3;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        add    eax, ecx;
	__asm        add    eax, 0x62BD10;
	__asm        push   eax;
	__asm        call   MTNormalize;
	__asm        add    esp, 4;
	__asm        mov    ecx, leg;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    edx, incline;
	__asm        shl    edx, 2;
	__asm        lea    ecx, [edx+ecx*4];
	__asm        mov    edx, tType;
	__asm        shl    edx, 3;
	__asm        lea    edx, [edx+edx*2];
	__asm        lea    edx, [edx+edx*4];
	__asm        mov    DTT[0][0][ecx+edx], eax;
// LINE 270:
	__asm        mov    eax, incline;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, leg;
	__asm        shl    ecx, 2;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    eax, [ecx+eax*4];
	__asm        mov    ecx, tType;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        shl    ecx, 5;
	__asm        add    eax, ecx;
	__asm        mov    ecx, dir;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        shl    ecx, 3;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        add    eax, ecx;
	__asm        add    eax, 0x62BD10;
	__asm        push   eax;
	__asm        mov    eax, tType;
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 9;
	__asm        mov    ecx, incline;
	__asm        shl    ecx, 6;
	__asm        add    eax, ecx;
	__asm        mov    ecx, dir;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        shl    ecx, 7;
	__asm        add    eax, ecx;
	__asm        mov    ecx, leg;
	__asm        shl    ecx, 6;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        add    eax, ecx;
	__asm        add    eax, 0x62D910;
	__asm        push   eax;
	__asm        call   MTCreateDOF4x4;
	__asm        add    esp, 8;
// LINE 271:
	__asm        jmp    _Tba7;
// LINE 272:
_Tdd7:
	__asm        jmp    _Tb8e;
// LINE 273:
_Tddc:
	__asm        jmp    _Tb75;
// Block end:
_Tde1:
	__asm        jmp    _Tb5c;
// LINE 274:
_Tde6:
	__asm        jmp    _Tdeb;
_Tdeb:
}

// FUNCTION: COPTER_D 0x00539260
int32_t IsThisAnIntersection(long x, long y) {
	/*bp-0x4*/   unsigned short t;
	/*bp-0x8*/   unsigned short t2;

// LINE 420:
	__asm        cmp    x, 0;
	__asm        jl     _T37;

	__asm        cmp    y, 0;
	__asm        jl     _T37;

	__asm        cmp    x, 0x80;
	__asm        jge    _T37;

	__asm        cmp    y, 0x80;
	__asm        jl     _T42;
_T37:
	__asm        mov    t, 0;
	__asm        jmp    _T7a;
_T42:
	__asm        mov    eax, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    t, ax;
	__asm        jmp    _T7a;
// LINE 423:
_T7a:
	__asm        mov    eax, reinterpret_cast<uint32_t>(t);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x69;
	__asm        jne    _Tb6;
// LINE 425:
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        test   al, 1;
	__asm        je     _T9e;

	__asm        xor    eax, eax;
	__asm        jmp    _T3e5;
// LINE 426:
_T9e:
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        test   al, 1;
	__asm        je     _Tb1;

	__asm        xor    eax, eax;
	__asm        jmp    _T3e5;
// LINE 430:
_Tb1:
	__asm        jmp    _T3de;
_Tb6:
	__asm        mov    eax, reinterpret_cast<uint32_t>(t);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x27;
	__asm        jl     _Te7;

	__asm        mov    eax, reinterpret_cast<uint32_t>(t);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2B;
	__asm        jg     _Te7;
// LINE 432:
	__asm        mov    eax, 1;
	__asm        jmp    _T3e5;
// LINE 436:
	__asm        jmp    _T3de;
_Te7:
	__asm        mov    eax, reinterpret_cast<uint32_t>(t);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x49;
	__asm        jne    _T267;

	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        test   al, 1;
	__asm        je     _T267;
// LINE 438:
	__asm        cmp    x, 1;
	__asm        jle    _T1b1;
// LINE 440:
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        js     _T13e;

	__asm        cmp    y, 0;
	__asm        jl     _T13e;

	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T13e;

	__asm        cmp    y, 0x80;
	__asm        jl     _T149;
_T13e:
	__asm        mov    t2, 0;
	__asm        jmp    _T181;
_T149:
	__asm        mov    eax, x;
	__asm        mov    eax, [eax*4+0x638F6C];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, NeighborFame[ecx*4];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    t2, ax;
	__asm        jmp    _T181;
// LINE 441:
_T181:
	__asm        mov    eax, reinterpret_cast<uint32_t>(t2);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x805F;
	__asm        je     _T1a7;

	__asm        mov    eax, reinterpret_cast<uint32_t>(t2);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x8060;
	__asm        jne    _T1b1;
// LINE 442:
_T1a7:
	__asm        mov    eax, 1;
	__asm        jmp    _T3e5;
// LINE 445:
_T1b1:
	__asm        cmp    x, 0x7C;
	__asm        jge    _T262;
// LINE 447:
	__asm        mov    eax, x;
	__asm        add    eax, 2;
	__asm        js     _T1ef;

	__asm        cmp    y, 0;
	__asm        jl     _T1ef;

	__asm        mov    eax, x;
	__asm        add    eax, 2;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T1ef;

	__asm        cmp    y, 0x80;
	__asm        jl     _T1fa;
_T1ef:
	__asm        mov    t2, 0;
	__asm        jmp    _T232;
_T1fa:
	__asm        mov    eax, x;
	__asm        mov    eax, BitsMap[2][eax*4];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, BuildMap[2][ecx*4];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    t2, ax;
	__asm        jmp    _T232;
// LINE 448:
_T232:
	__asm        mov    eax, reinterpret_cast<uint32_t>(t2);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x805D;
	__asm        je     _T258;

	__asm        mov    eax, reinterpret_cast<uint32_t>(t2);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x805E;
	__asm        jne    _T262;
// LINE 449:
_T258:
	__asm        mov    eax, 1;
	__asm        jmp    _T3e5;
// LINE 452:
_T262:
	__asm        jmp    _T3de;
_T267:
	__asm        mov    eax, reinterpret_cast<uint32_t>(t);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x4A;
	__asm        jne    _T3de;

	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        test   al, 1;
	__asm        je     _T3de;
// LINE 454:
	__asm        cmp    y, 1;
	__asm        jle    _T32f;
// LINE 456:
	__asm        cmp    x, 0;
	__asm        jl     _T2be;

	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        js     _T2be;

	__asm        cmp    x, 0x80;
	__asm        jge    _T2be;

	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T2c9;
_T2be:
	__asm        mov    t2, 0;
	__asm        jmp    _T303;
_T2c9:
	__asm        mov    eax, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx-1];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx-1];
	__asm        or     eax, ebx;
	__asm        mov    t2, ax;
	__asm        jmp    _T303;
// LINE 457:
_T303:
	__asm        mov    eax, reinterpret_cast<uint32_t>(t2);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x60;
	__asm        je     _T325;

	__asm        mov    eax, reinterpret_cast<uint32_t>(t2);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5F;
	__asm        jne    _T32f;
// LINE 458:
_T325:
	__asm        mov    eax, 1;
	__asm        jmp    _T3e5;
// LINE 461:
_T32f:
	__asm        cmp    y, 0x7C;
	__asm        jge    _T3de;
// LINE 463:
	__asm        cmp    x, 0;
	__asm        jl     _T36d;

	__asm        mov    eax, y;
	__asm        add    eax, 2;
	__asm        js     _T36d;

	__asm        cmp    x, 0x80;
	__asm        jge    _T36d;

	__asm        mov    eax, y;
	__asm        add    eax, 2;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T378;
_T36d:
	__asm        mov    t2, 0;
	__asm        jmp    _T3b2;
_T378:
	__asm        mov    eax, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+2];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx+2];
	__asm        or     eax, ebx;
	__asm        mov    t2, ax;
	__asm        jmp    _T3b2;
// LINE 464:
_T3b2:
	__asm        mov    eax, reinterpret_cast<uint32_t>(t2);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5E;
	__asm        je     _T3d4;

	__asm        mov    eax, reinterpret_cast<uint32_t>(t2);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5D;
	__asm        jne    _T3de;
// LINE 465:
_T3d4:
	__asm        mov    eax, 1;
	__asm        jmp    _T3e5;
// LINE 469:
_T3de:
	__asm        xor    eax, eax;
	__asm        jmp    _T3e5;
// LINE 470:
_T3e5:
}

// FUNCTION: COPTER_D 0x0053964a
int32_t DoRoadTilesConnect(unsigned short fromTile, unsigned short toTile, enum DirectionTypes CurDir, enum DirectionTypes TestDir) {
	/*bp-0x4*/   enum DirectionTypes toConnections;
	/*bp-0x8*/   enum DirectionTypes fromConnections;


	__asm        mov    ax, toTile;
	__asm        mov    [ebp-0x24], ax;
// LINE 498:
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFF;
	__asm        mov    [ebp-0x24], ax;
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1D;
	__asm        jl     _T3f;

	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2B;
	__asm        jle    _Ta5;
_T3f:
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x3F;
	__asm        jl     _T61;

	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x46;
	__asm        jle    _Ta5;
_T61:
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x49;
	__asm        jl     _T83;

	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x59;
	__asm        jle    _Ta5;
_T83:
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5D;
	__asm        jl     _Tb4;

	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x6B;
	__asm        jg     _Tb4;
_Ta5:
	__asm        jmp    _Tca;

	__asm        jmp    _Tc3;

	__asm        jmp    _Tb9;
_Tb4:
	__asm        jmp    _Tc3;
_Tb9:
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    _Tca;
_Tc3:
	__asm        xor    eax, eax;
	__asm        jmp    _T5a4;
// LINE 501:
_Tca:
	__asm        mov    ax, fromTile;
	__asm        mov    [ebp-0xC], ax;
	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0x7FFF;
	__asm        mov    [ebp-0xC], ax;
	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5D;
	__asm        jl     _T10f;

	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x60;
	__asm        jg     _T10f;

	__asm        jmp    _T172;

	__asm        jmp    _T11e;

	__asm        jmp    _T114;
_T10f:
	__asm        jmp    _T11e;
_T114:
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        jne    _T172;
_T11e:
	__asm        mov    ax, toTile;
	__asm        mov    [ebp-0x14], ax;
	__asm        mov    eax, [ebp-0x14];
	__asm        and    eax, 0x7FFF;
	__asm        mov    [ebp-0x14], ax;
	__asm        mov    eax, [ebp-0x14];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5D;
	__asm        jl     _T15e;

	__asm        mov    eax, [ebp-0x14];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x60;
	__asm        jg     _T15e;

	__asm        jmp    _T172;

	__asm        jmp    _T168;
_T15e:
	__asm        jmp    _T342;

	__asm        jmp    _T172;
_T168:
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T342;
// LINE 503:
_T172:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T1df;
// LINE 505:
_T182:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 2;
	__asm        jmp    _T5a4;
// LINE 506:
_T18d:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 8;
	__asm        jmp    _T5a4;
// LINE 507:
_T198:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 1;
	__asm        jmp    _T5a4;
// LINE 508:
_T1a3:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 1;
	__asm        jmp    _T5a4;
// LINE 509:
_T1ae:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 8;
	__asm        jmp    _T5a4;
// LINE 510:
_T1b9:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 2;
	__asm        jmp    _T5a4;
// LINE 511:
_T1c4:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 4;
	__asm        jmp    _T5a4;
// LINE 512:
_T1cf:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 4;
	__asm        jmp    _T5a4;
// LINE 513:
	__asm        jmp    _T246;
_T1df:
	__asm        cmp    dword ptr [ebp-0x2C], 0x805D;
	__asm        jg     _T21a;

	__asm        je     _T18d;

	__asm        sub    dword ptr [ebp-0x2C], 0x5D;
	__asm        cmp    dword ptr [ebp-0x2C], 3;
	__asm        ja     _T246;

	__asm        mov    eax, [ebp-0x2C];
	__asm        jmp    _Switch_20a[0][eax*4];
// Switch pointers:
//   _T182
//   _T198
//   _T1ae
//   _T1c4
_T21a:
	__asm        cmp    dword ptr [ebp-0x2C], 0x805E;
	__asm        je     _T1a3;

	__asm        cmp    dword ptr [ebp-0x2C], 0x805F;
	__asm        je     _T1b9;

	__asm        cmp    dword ptr [ebp-0x2C], 0x8060;
	__asm        je     _T1cf;

	__asm        jmp    _T246;
// LINE 516:
_T246:
	__asm        mov    eax, reinterpret_cast<uint32_t>(toTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T2d4;
// LINE 518:
_T256:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 4;
	__asm        jmp    _T5a4;
// LINE 519:
_T261:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 1;
	__asm        jmp    _T5a4;
// LINE 520:
_T26c:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 2;
	__asm        jmp    _T5a4;
// LINE 521:
_T277:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 2;
	__asm        jmp    _T5a4;
// LINE 522:
_T282:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 1;
	__asm        jmp    _T5a4;
// LINE 523:
_T28d:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 4;
	__asm        jmp    _T5a4;
// LINE 524:
_T298:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 8;
	__asm        jmp    _T5a4;
// LINE 525:
_T2a3:
	__asm        mov    eax, TestDir;
	__asm        and    eax, 8;
	__asm        jmp    _T5a4;
// LINE 526:
_T2ae:
	__asm        push   0x20E;
	__asm        push   0x5B804C;
	__asm        push   0x5B8070;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2cf;

	__asm        jmp    _T2cf;
// LINE 527:
_T2cf:
	__asm        jmp    _T33b;
_T2d4:
	__asm        cmp    dword ptr [ebp-0x30], 0x805D;
	__asm        jg     _T30f;

	__asm        je     _T261;

	__asm        sub    dword ptr [ebp-0x30], 0x5D;
	__asm        cmp    dword ptr [ebp-0x30], 3;
	__asm        ja     _T2ae;

	__asm        mov    eax, [ebp-0x30];
	__asm        jmp    _Switch_2ff[0][eax*4];
// Switch pointers:
//   _T256
//   _T26c
//   _T282
//   _T298
_T30f:
	__asm        cmp    dword ptr [ebp-0x30], 0x805E;
	__asm        je     _T277;

	__asm        cmp    dword ptr [ebp-0x30], 0x805F;
	__asm        je     _T28d;

	__asm        cmp    dword ptr [ebp-0x30], 0x8060;
	__asm        je     _T2a3;

	__asm        jmp    _T2ae;
// LINE 529:
_T33b:
	__asm        xor    eax, eax;
	__asm        jmp    _T5a4;
// LINE 536:
_T342:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x4B;
	__asm        je     _T386;

	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x4C;
	__asm        je     _T386;

	__asm        mov    eax, reinterpret_cast<uint32_t>(toTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x4B;
	__asm        je     _T386;

	__asm        mov    eax, reinterpret_cast<uint32_t>(toTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x4C;
	__asm        jne    _T443;
// LINE 538:
_T386:
	__asm        mov    eax, CurDir;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T401;
// LINE 540:
_T391:
	__asm        test   reinterpret_cast<uint8_t>(TestDir), 1;
	__asm        je     _T3a5;

	__asm        mov    eax, 1;
	__asm        jmp    _T5a4;
_T3a5:
	__asm        jmp    _T43c;
// LINE 541:
_T3aa:
	__asm        test   reinterpret_cast<uint8_t>(TestDir), 2;
	__asm        je     _T3be;

	__asm        mov    eax, 1;
	__asm        jmp    _T5a4;
_T3be:
	__asm        jmp    _T43c;
// LINE 542:
_T3c3:
	__asm        test   reinterpret_cast<uint8_t>(TestDir), 4;
	__asm        je     _T3d7;

	__asm        mov    eax, 1;
	__asm        jmp    _T5a4;
_T3d7:
	__asm        jmp    _T43c;
// LINE 543:
_T3dc:
	__asm        test   reinterpret_cast<uint8_t>(TestDir), 8;
	__asm        je     _T3f0;

	__asm        mov    eax, 1;
	__asm        jmp    _T5a4;
_T3f0:
	__asm        jmp    _T43c;
// LINE 544:
_T3f5:
	__asm        xor    eax, eax;
	__asm        jmp    _T5a4;
// LINE 545:
	__asm        jmp    _T43c;
_T401:
	__asm        dec    dword ptr [ebp-0x34];
	__asm        cmp    dword ptr [ebp-0x34], 7;
	__asm        ja     _T3f5;

	__asm        mov    eax, [ebp-0x34];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, _SwitchTable_434[0][eax];
	__asm        jmp    _Switch_420[0][ecx*4];
// Switch pointers:
//   _T391
//   _T3aa
//   _T3c3
//   _T3dc
//   _T3f5
// Switch table
//  [0, 1, 4, 2, 4, 4, 4, 3]
// LINE 547:
_T43c:
	__asm        xor    eax, eax;
	__asm        jmp    _T5a4;
// LINE 552:
_T443:
	__asm        mov    dword ptr [ebp-0x1C], 0x5B57E8;
_T44a:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    ecx, 0xFFFF;
	__asm        cmp    [eax], ecx;
	__asm        jne    _T46c;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    fromConnections, eax;
	__asm        jmp    _T4a0;
_T46c:
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T48b;

	__asm        mov    eax, 0x5B57E8;
	__asm        add    eax, 0xF40;
	__asm        cmp    eax, [ebp-0x1C];
	__asm        jae    _T497;
_T48b:
	__asm        mov    fromConnections, 0;
	__asm        jmp    _T4a0;
_T497:
	__asm        add    dword ptr [ebp-0x1C], 8;
	__asm        jmp    _T44a;
// LINE 553:
_T4a0:
	__asm        mov    dword ptr [ebp-0x20], 0x5B57E8;
_T4a7:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, reinterpret_cast<uint32_t>(toTile);
	__asm        and    ecx, 0xFFFF;
	__asm        cmp    [eax], ecx;
	__asm        jne    _T4c9;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    toConnections, eax;
	__asm        jmp    _T4fd;
_T4c9:
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T4e8;

	__asm        mov    eax, 0x5B57E8;
	__asm        add    eax, 0xF40;
	__asm        cmp    eax, [ebp-0x20];
	__asm        jae    _T4f4;
_T4e8:
	__asm        mov    toConnections, 0;
	__asm        jmp    _T4fd;
_T4f4:
	__asm        add    dword ptr [ebp-0x20], 8;
	__asm        jmp    _T4a7;
// LINE 556:
_T4fd:
	__asm        test   reinterpret_cast<uint8_t>(TestDir), 1;
	__asm        je     _T525;

	__asm        test   reinterpret_cast<uint8_t>(fromConnections), 1;
	__asm        je     _T525;

	__asm        test   reinterpret_cast<uint8_t>(toConnections), 4;
	__asm        je     _T525;
// LINE 557:
	__asm        mov    eax, 1;
	__asm        jmp    _T5a4;
// LINE 558:
_T525:
	__asm        test   reinterpret_cast<uint8_t>(TestDir), 4;
	__asm        je     _T54d;

	__asm        test   reinterpret_cast<uint8_t>(fromConnections), 4;
	__asm        je     _T54d;

	__asm        test   reinterpret_cast<uint8_t>(toConnections), 1;
	__asm        je     _T54d;
// LINE 559:
	__asm        mov    eax, 1;
	__asm        jmp    _T5a4;
// LINE 560:
_T54d:
	__asm        test   reinterpret_cast<uint8_t>(TestDir), 8;
	__asm        je     _T575;

	__asm        test   reinterpret_cast<uint8_t>(fromConnections), 8;
	__asm        je     _T575;

	__asm        test   reinterpret_cast<uint8_t>(toConnections), 2;
	__asm        je     _T575;
// LINE 561:
	__asm        mov    eax, 1;
	__asm        jmp    _T5a4;
// LINE 562:
_T575:
	__asm        test   reinterpret_cast<uint8_t>(TestDir), 2;
	__asm        je     _T59d;

	__asm        test   reinterpret_cast<uint8_t>(fromConnections), 2;
	__asm        je     _T59d;

	__asm        test   reinterpret_cast<uint8_t>(toConnections), 8;
	__asm        je     _T59d;
// LINE 563:
	__asm        mov    eax, 1;
	__asm        jmp    _T5a4;
// LINE 565:
_T59d:
	__asm        xor    eax, eax;
	__asm        jmp    _T5a4;
// LINE 566:
_T5a4:
}



// Contribution: 2:00004338-0000442f Module: 157, 8 byte alignment, initialized_data, read, 
// GLOBAL: COPTER_D 0x00593338
static const /*packed*/ struct _dPoint2d OT[4] = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00593378
static const /*packed*/ struct _dPoint2d RRT[4] = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005933b8
static const /*packed*/ struct _dPoint2d LRT[4] = { 0 /* todo */ };



// Contribution: 3:0002104c-00021075 Module: 157, 4 byte alignment, initialized_data, read, write, 


// Contribution: 3:00094a00-0009e1cf Module: 157, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x0062ba00
int32_t DiagMatrix[4][4][4];

// GLOBAL: COPTER_D 0x0062bb00
/*packed*/ struct Point3d DiagVector[4];

// GLOBAL: COPTER_D 0x0062bb30
int32_t DTT[4][10][3];

// GLOBAL: COPTER_D 0x0062bd10
/*packed*/ struct Point3d DVT[4][4][10][3];

// GLOBAL: COPTER_D 0x0062d390
/*packed*/ struct _fPoint2d OTT[4][4][11];

// GLOBAL: COPTER_D 0x0062d910
int32_t RMT[4][4][10][3][4][4];

// GLOBAL: COPTER_D 0x00635110
/*packed*/ struct Point3d DiagOffset[4][4];

