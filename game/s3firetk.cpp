// Module: S3firetk.obj
// Source: C:\Copter\source\game\S3firetk.cpp
// autogenerated by simcopter_tool from PDB file

// Type: int32_t;

// Type: class FireEngineClass (forward reference);
class FireEngineClass : public EmergencyVehicleClass
{
private:
	int32_t dousingFire;
	struct _FIRE_DATA* currentFire;
	struct _DYOBJ_INST* currentDyObjFire;
	int32_t distToFire;
	struct Point3d firevec;
	int32_t pathID;
public:
	void FireEngineClass(const class FireEngineClass&);
	void FireEngineClass();
	virtual void ~FireEngineClass();
	// calltype: NearC
	static class FireEngineClass* CreateInstance(int32_t);
	// calltype: NearC
	static int32_t Dispatch(enum EmergencyType, enum EmergencyLevel, long, long);
	// calltype: NearC
	static int32_t IsThisAFireStation(long, long);
	// calltype: NearC
	static int32_t IsThisAFireStation(unsigned short);
	class FireEngineClass operator=(const class FireEngineClass&);
protected:
	virtual void ItterateFSM();
	virtual void SetSaveData(struct _AUTO_LOAD_SAVE*);
	virtual void LoadSaveData(struct _AUTO_LOAD_SAVE*);
private:
	int32_t ScanForFire(struct _GridCoordinates);
	void PointStreamAtFire();
	int32_t AtScene();
};

// Type: void;

// Type: char *;

// Type: struct VRObjInfo;
class VRObjInfo{
public:
	int32_t Faces;
	int32_t Verts;
	int32_t Attribute;
	int32_t Radius;
	struct Point3d* ObjCenter;
	struct Point3d* VertsPtr;
	struct Xform3d* VertsXfm;
	struct Point3d* OrgVerts;
	int32_t[4][4]* Matrix;
};

// Type: enum EmergencyType;

// Type: enum EmergencyLevel;

// Type: long;

// Type: unsigned short;

// Type: struct Point3d;
class Point3d{
public:
	int32_t x;
	int32_t y;
	int32_t z;
};

// Type: struct _GridCoordinates;
class _GridCoordinates{
public:
	unsigned char x;
	unsigned char y;
};

// Type: struct _CELL_INFO (forward reference);

// Type: struct _STOBJ_INST (forward reference);

// Type: struct _DYOBJ_INST (forward reference);

// Type: class SpiralScan;
class SpiralScan{
public:
	void SpiralScan(int32_t);
	void ~SpiralScan();
	int32_t Next(struct _GridCoordinates&);
	int32_t InCityGridLimits(struct _GridCoordinates);
private:
	int32_t currDist;
	int32_t currDir;
	int32_t currDia;
	int32_t maxDia;
};

// Type: struct _AUTO_LOAD_SAVE (forward reference);

// Type: uint32_t;

// Type: class EmergencyVehicleClass;
class EmergencyVehicleClass : public AutomobileClass
{
		enum __unnamed {
			MAXIMUM_DISTANCE_FROM_BASE = 7,
			MAXIMUM_TIME_TO_EMERGENCY = 3932160,
			AMBULANCE_CAPACITY = 2,
		};
public:
	static int32_t fireSirenDist;
	static int32_t policeSirenDist;
	static int32_t ambSirenDist;
	static int32_t fireHoseDist;
protected:
	struct _GridCoordinates baseLocation;
	struct _GridCoordinates emergencyLocation;
	enum EmergencyType emergencyType;
	long timeOfArrival;
	struct _DYOBJ_INST dispatchIcon;
	int32_t timeToEmergency;
	class AutomobileClass* dispatchTarget;
	unsigned char dispatchPath[256];
	unsigned char dispatchPathIndex;
	unsigned char dispatchPathLength;
	enum EmergencyLevel emergencyState;
	int32_t stationID;
	int32_t numberOfSeats;
public:
	void EmergencyVehicleClass(const class EmergencyVehicleClass&);
	void EmergencyVehicleClass();
	virtual void ~EmergencyVehicleClass();
	enum EmergencyLevel GetEmergencyState();
	void InitializePlacedVehicleForDispatch(struct Goal, struct Goal, struct Goal, struct Goal, struct _GridCoordinates, struct Goal, enum EmergencyType);
	void InitializeStationVehicleForDispatch(int32_t, struct Goal, struct Goal, struct _GridCoordinates, struct Goal, struct Goal, struct _GridCoordinates, int32_t, struct Goal, enum EmergencyType);
	// calltype: NearC
	static int32_t AreThereMoreSeats(struct _DYOBJ_INST*);
	// calltype: NearC
	static void FillSeat(struct _DYOBJ_INST*);
	// calltype: NearC
	static void FinishedCarMission(struct _DYOBJ_INST*, int32_t);
protected:
	// vtable: 24
	intro void Reset();
	virtual void AdjustSpeed();
	virtual enum TurnIndex PickTurnDir(struct Goal*);
	void ArriveOnScene();
	void UnLinkIconFromCell(const struct _GridCoordinates);
	void LinkIconToCell(const struct _GridCoordinates);
	void PositionIcon();
	void GoBackToStation();
	void BuildPath(struct _RGIndex, struct _RGIndex);
	void TurnOnStrobe();
	void TurnOffStrobe();
	virtual void BeamToWithinCameraRange();
public:
	class EmergencyVehicleClass operator=(const class EmergencyVehicleClass&);
};

// Type: class AutomobileClass;
class AutomobileClass{
		enum __unnamed {
			CAR_TYPES = 7,
			PERCENTAGE_OF_AUTO1 = 10,
			PERCENTAGE_OF_AUTO2 = 20,
			PERCENTAGE_OF_AUTO3 = 20,
			PERCENTAGE_OF_AUTO4 = 10,
			PERCENTAGE_OF_AUTO5 = 10,
			PERCENTAGE_OF_AUTO6 = 20,
			PERCENTAGE_OF_AUTO7 = 20,
			TOTAL_PERCENTAGE = 110,
		};
		enum __unnamed {
			NO_X_POSITION = -1,
			STARTING_X = 3,
			ENDING_X = 125,
			NO_Y_POSITION = -1,
			STARTING_Y = 3,
			ENDING_Y = 125,
		};
		enum IntersectionTypes {
			DEAD_END = 0,
			STRAIGHT_AHEAD = 1,
			LEFT_ONLY = 2,
			RIGHT_ONLY = 4,
			LEFT_OR_STRAIGHT = 3,
			LEFT_OR_RIGHT = 6,
			RIGHT_OR_STRAIGHT = 5,
			LEFT_STRAIGHT_OR_RIGHT = 7,
			DEAD_END_HIWAY = 16,
		};
		enum StoppedReasons {
			NO_REASON = 0,
			TRAFFIC = 1,
			STOPPED_TRAFFIC = 2,
			PERSON_IN_WAY = 3,
			AUTO_IN_WAY = 4,
			DEBRIS_IN_WAY = 5,
			UNIDENTIFIED_IN_WAY = 6,
			HELI_IN_WAY = 7,
			END_OF_ROAD = 8,
			END_OF_HIWAY = 9,
			INTERSECTION_FULL = 10,
			BEEN_PULLED_OVER = 11,
		};
		enum RoadTileOffsets {
			RD_CENTOFF = 851968,
			RD_EDGEOFF = 131072,
		};
		enum HiwayOffsets {
			HW_CENTOFF_LANE1 = 851968,
			HW_EDGEOFF_LANE1 = 131072,
			HW_CENTOFF_LANE2 = 851968,
			HW_EDGEOFF_LANE2 = 131072,
			HW_HEIGHT = 2031616,
		};
		enum PersonState {
			PS_IN_VEHICLE = 0,
			PS_OUT_OF_VEHICLE = 1,
			PS_BACK_IN_VEHICLE = 2,
			PS_GOT_AWAY = 3,
			PS_MISSION_OVER = 4,
		};
		enum __unnamed {
			CAR_RADIUS = 327680,
			COLLISION_SPACE = 655360,
			ROAD_SPEED = 2621440,
			ROAD_SLOWDOWN_FACTOR = 131072,
			HIWAY_SPEED = 6225920,
			HIWAY_SLOWDOWN_FACTOR = 327680,
			SPEED_VARIANCE = 262144,
			HIWAY_VARIANCE = 655360,
			MAX_TIME_TO_WAIT_FOR_TRAFFIC = 1310720,
			MAX_TIME_TO_WAIT_PULLED_OVER = 196608,
			MAX_TIME_TO_WAIT_BEFORE_BEAMING = 235,
		};
		enum Flags {
			AUTO_INITIALIZED = 1,
			AUTO_PLACED = 2,
			AUTO_TURNING = 4,
			AUTO_MAKING_UTURN = 8,
			AUTO_PULL_OVER = 16,
			AUTO_PULLING_OVER = 32,
			AUTO_PULLED_OVER = 64,
			AUTO_AT_DEAD_END = 128,
			AUTO_IN_INTERSECTION = 256,
			AUTO_ON_FIRE = 512,
			AUTO_JAMMED = 1024,
			AUTO_PULLING_OUT = 2048,
			AUTO_RIGHT_OF_WAY = 4096,
			AUTO_ON_HIWAY = 8192,
		};
public:
	int32_t flags;
	struct _DYOBJ_INST autoDynomitor;
	struct Goal goal;
private:
	static struct Point2d lastScannedLocation;
	int32_t DeltaFromCenter;
	int32_t stalledTimer;
	struct Point3d directionVector;
	int32_t remainingTime;
	int32_t desiredSpeed;
	int32_t desiredHiwaySpeed;
	int32_t beamDelay;
	int32_t beamTimer;
	int32_t m_cellBaseY;
	int32_t timePulledOver;
	enum DirectionTypes hiwaydir;
	struct _GridCoordinates currentLocation;
	struct _GridCoordinates nextLocation;
	struct _GridCoordinates northCell;
	struct _GridCoordinates southCell;
	struct _GridCoordinates eastCell;
	struct _GridCoordinates westCell;
protected:
	long carModel;
	int32_t speed;
	enum DirIndex2 prevDir;
	enum TurnIndex turnIndex;
	int32_t currDist;
	int32_t legOfTurn;
	struct Point3d* pDirVector;
	int32_t timeToLive;
	int32_t fireTime;
	long fireSeq;
	long missionId;
	struct _CELL_INFO* cptr;
	enum AutomobileClass::PersonState personState;
	int32_t spotlightHitCounter;
	int32_t IsCarPersistant();
	int32_t CanCarBeamToHiwayTile(unsigned short);
public:
	void AutomobileClass(const class AutomobileClass&);
	void AutomobileClass();
	// vtable: 0
	intro void ~AutomobileClass();
	// calltype: NearC
	static class AutomobileClass* CreateInstance(int32_t);
	// calltype: NearC
	static class AutomobileClass* GetAutoPointer(long);
	// calltype: NearC
	static void DestroyInstance(class AutomobileClass*);
	// calltype: NearC
	static void ItterateAll();
	// calltype: NearC
	static void ResetAll();
	// calltype: NearC
	static int32_t MissionStartFire(long, struct Point2d*);
	// calltype: NearC
	static int32_t MissionStartJam(long, struct Point2d*);
	// calltype: NearC
	static void MissionCancel(long);
	// calltype: NearC
	static void SetAllHeadlights(int32_t);
	void HitDispatch(long, struct _DYOBJ_INST*, long, long);
	int32_t AmIABadGuy();
	int32_t Initialize(int32_t);
	void WaterDouse(struct _DYOBJ_INST*);
	void IveBeenMegaphoned(long);
	void StartFire(long);
	void StartJam(long);
	void PullOver();
	void PullOut();
	int32_t CanIPullOut();
protected:
	void Itterate();
	// vtable: 4
	intro void AdjustSpeed();
	void Reset();
	// vtable: 8
	intro enum TurnIndex PickTurnDir(struct Goal*);
	void UnPlaceCar();
	void PullOverCiviliansInWay();
	// vtable: 12
	intro void ItterateFSM();
	int32_t InitializeInstance(int32_t);
	void LinkToCell(const struct _GridCoordinates&);
	int32_t AreCarsHeadOn(struct Point3d*);
	enum AutomobileClass::StoppedReasons CollisionCheck(int32_t, struct _DYOBJ_INST**);
	int32_t IsCarOutOfCameraRange();
	void TurnOffHeadlight();
	void TurnOnHeadlight();
	void SetHiwayDirection(unsigned short);
	int32_t DoHiwayTilesConnect(unsigned short, unsigned short, enum DirectionTypes);
	void AdjustCurrentHiwayPosition();
	void AdjustNextHiwayPosition();
	enum AutomobileClass::IntersectionTypes PickHiwayDir(struct _GridCoordinates&);
	void MakeAHiwayTurn(enum AutomobileClass::IntersectionTypes);
	void GoStraight();
	void TurnLeft();
	void TurnRight();
	void MoveForwardOnHiway();
	void DoDiagonalRoadFixup();
	// vtable: 16
	intro void BeamToWithinCameraRange();
	// vtable: 20
	intro int32_t BeamToLocation(const struct _GridCoordinates&);
	void MoveAuto(int32_t);
private:
	void UnlinkFromCell(const struct _GridCoordinates&);
	void TransitionBetweenGoals();
	void RunFireState();
	void RunJamState();
	void IveBeenSpotlighted(struct _DYOBJ_INST*);
	int32_t IsThisAnEmergencyVehicle();
public:
	class AutomobileClass operator=(const class AutomobileClass&);
};



// Contribution: 1:00135100-00135db2 Module: 159, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00536100
int32_t CreateFireTruckInstance(int32_t instanceID) {
// LINE 77:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        call   0x0053618B;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00536124;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00536126;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0053612B;
// LINE 78:
}

// FUNCTION: COPTER_D 0x00536130
void FireEngineClass::FireEngineClass() {
	__asm        mov    ecx, this;
	__asm        call   0x005415D5;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5932A8;
// LINE 83:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0x11C;
// LINE 84:
	__asm        jmp    near ptr 0x0053615C;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00536164
void FireEngineClass::~FireEngineClass() {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5932A8;
	__asm        jmp    near ptr 0x0053617E;
	__asm        mov    ecx, this;
	__asm        call   0x0054163A;
}

// FUNCTION: COPTER_D 0x0053618b
class FireEngineClass* FireEngineClass::CreateInstance(int32_t instanceID) {
	int32_t object;
	class FireEngineClass* youveWonABrandNewCar;
	char * objectMemory;

// LINE 117:
	__asm        push   0x2C0;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x005361BE;
	__asm        mov    ecx, [ebp-0x34];
	__asm        call   0x00536130;
	__asm        mov    youveWonABrandNewCar, eax;
	__asm        jmp    near ptr 0x005361C5;
	__asm        mov    youveWonABrandNewCar, 0;
// LINE 120:
	__asm        cmp    youveWonABrandNewCar, 0;
	__asm        je     near ptr 0x00536375;
// LINE 123:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        mov    ecx, youveWonABrandNewCar;
	__asm        call   0x00504554;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053634E;
// LINE 127:
// Block start:
	struct VRObjInfo oinfo;
	__asm        push   0x123;
	__asm        call   0x004D8821;
	__asm        add    esp, 4;
	__asm        mov    object, eax;
// LINE 128:
	__asm        mov    eax, object;
	__asm        push   eax;
	__asm        call   0x004D8520;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5B5E78];
	__asm        push   eax;
	__asm        call   0x004CB4AC;
	__asm        add    esp, 8;
	__asm        mov    objectMemory, eax;
// LINE 130:
	__asm        cmp    objectMemory, 0;
	__asm        je     near ptr 0x0053629E;
// LINE 135:
	__asm        mov    eax, objectMemory;
	__asm        push   eax;
	__asm        mov    eax, object;
	__asm        push   eax;
	__asm        call   0x004D8570;
	__asm        add    esp, 8;
	__asm        mov    ecx, youveWonABrandNewCar;
	__asm        mov    [ecx+0x12E], eax;
// LINE 137:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        cmp    dword ptr [eax+0x12E], 0;
	__asm        je     near ptr 0x00536261;
// LINE 140:
	__asm        mov    eax, ds:[0x5B4780];
	__asm        push   eax;
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    eax, [eax+0x12E];
	__asm        push   eax;
	__asm        call   0x004D84DB;
	__asm        add    esp, 8;
// LINE 142:
	__asm        jmp    near ptr 0x00536299;
// LINE 145:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        cmp    dword ptr [eax+0x12E], 0;
	__asm        jne    near ptr 0x0053628D;
	__asm        push   0x91;
	__asm        push   0x5B7DCC;
	__asm        push   0x5B7DF0;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00536292;
	__asm        jmp    near ptr 0x00536292;
// LINE 147:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0053637C;
// LINE 150:
	__asm        jmp    near ptr 0x005362D0;
// LINE 153:
	__asm        cmp    objectMemory, 0;
	__asm        jne    near ptr 0x005362C4;
	__asm        push   0x99;
	__asm        push   0x5B7E18;
	__asm        push   0x5B7E3C;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x005362C9;
	__asm        jmp    near ptr 0x005362C9;
// LINE 155:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0053637C;
// LINE 161:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    dword ptr [eax+0x2A0], 0;
// LINE 163:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    word ptr [eax+0x134], 0;
// LINE 164:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    word ptr [eax+0x132], 0x21;
// LINE 165:
	__asm        lea    eax, oinfo.Faces;
	__asm        push   eax;
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    eax, [eax+0x12E];
	__asm        push   eax;
	__asm        call   0x004D8859;
	__asm        add    esp, 8;
// LINE 166:
	__asm        mov    eax, oinfo.Radius;
	__asm        mov    ecx, youveWonABrandNewCar;
	__asm        mov    [ecx+0x136], eax;
// LINE 167:
	__asm        push   0;
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    eax, [eax+0x12E];
	__asm        push   eax;
	__asm        call   0x004D6970;
	__asm        add    esp, 8;
// LINE 169:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    ecx, ds:[0x5B7DC8];
	__asm        mov    [ecx*4+0x62B9D0], eax;
	__asm        inc    dword ptr ds:[0x5B7DC8];
// LINE 171:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        jmp    near ptr 0x0053637C;
// LINE 173:
// Block end:
	__asm        jmp    near ptr 0x00536375;
// LINE 176:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x00536375;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x00536375;
// LINE 183:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0053637C;
// LINE 184:
}

// FUNCTION: COPTER_D 0x00536381
int32_t FireEngineClass::Dispatch(enum EmergencyType responseType, enum EmergencyLevel responseLevel, long mapx, long mapy) {
// LINE 211:
	__asm        push   5;
	__asm        push   0x62B9D0;
	__asm        mov    eax, responseLevel;
	__asm        push   eax;
	__asm        mov    eax, responseType;
	__asm        push   eax;
	__asm        mov    eax, mapy;
	__asm        push   eax;
	__asm        mov    eax, mapx;
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x5C3AA8];
	__asm        call   0x0053AB93;
	__asm        jmp    near ptr 0x005363AE;
// LINE 212:
}

// FUNCTION: COPTER_D 0x005363b3
int32_t FireEngineClass::IsThisAFireStation(unsigned short tileType) {
// LINE 218:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tileType);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0xD3;
	__asm        jne    near ptr 0x005363D6;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x005363D8;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x005363DD;
// LINE 219:
}

// FUNCTION: COPTER_D 0x005363e2
int32_t FireEngineClass::IsThisAFireStation(long mapX, long mapY) {
// LINE 225:
	__asm        cmp    mapX, 0;
	__asm        jl     near ptr 0x00536419;
	__asm        cmp    mapY, 0;
	__asm        jl     near ptr 0x00536419;
	__asm        cmp    mapX, 0x80;
	__asm        jge    near ptr 0x00536419;
	__asm        cmp    mapY, 0x80;
	__asm        jl     near ptr 0x00536423;
	__asm        jmp    near ptr 0x00536482;
	__asm        jmp    near ptr 0x00536478;
	__asm        mov    eax, mapX;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        mov    ecx, mapY;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, mapX;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        mov    edx, mapY;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        movzx  eax, ax;
	__asm        cmp    eax, 0xD3;
	__asm        jne    near ptr 0x00536482;
	__asm        jmp    near ptr 0x00536478;
	__asm        mov    eax, [ebp-4];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0xD3;
	__asm        jne    near ptr 0x00536482;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00536484;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00536489;
// LINE 226:
}

// FUNCTION: COPTER_D 0x0053648e
void FireEngineClass::ItterateFSM() {
	struct Point3d vec;
	int32_t dist;

// LINE 254:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x294];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0053674B;
// LINE 257:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11A];
	__asm        cmp    ecx, edx;
	__asm        jne    near ptr 0x0053650E;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11B];
	__asm        cmp    ecx, edx;
	__asm        jne    near ptr 0x0053650E;
// LINE 260:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x298];
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x5C3AA8];
	__asm        call   0x0053AB2F;
// LINE 261:
	__asm        mov    ecx, this;
	__asm        call   0x00503E6E;
// LINE 264:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        push   eax;
	__asm        call   0x00500FC3;
	__asm        add    esp, 4;
// LINE 268:
	__asm        mov    ecx, this;
	__asm        call   0x005022B0;
// LINE 269:
	__asm        jmp    near ptr 0x0053676E;
// LINE 273:
	__asm        mov    ecx, this;
	__asm        call   0x005422EE;
// LINE 274:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11C];
	__asm        cmp    ecx, edx;
	__asm        jne    near ptr 0x00536640;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11D];
	__asm        cmp    ecx, edx;
	__asm        jne    near ptr 0x00536640;
// LINE 276:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00542461;
// LINE 277:
	__asm        mov    ecx, this;
	__asm        call   0x005429D6;
// LINE 278:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x005368CD;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005365D7;
// LINE 281:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 5;
// LINE 282:
	__asm        mov    ecx, this;
	__asm        call   0x00536AE2;
// LINE 283:
	__asm        push   9;
	__asm        push   0xD;
	__asm        mov    ecx, this;
	__asm        call   0x0050217C;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005365D2;
// LINE 285:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF6], 0;
// LINE 286:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFE], 0x780000;
// LINE 289:
	__asm        jmp    near ptr 0x00536636;
// LINE 291:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x122], 0;
// LINE 292:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11E], 0;
// LINE 296:
	__asm        mov    ecx, this;
	__asm        call   0x00503E6E;
// LINE 297:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        push   eax;
	__asm        call   0x00500FC3;
	__asm        add    esp, 4;
// LINE 298:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x298];
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x5C3AA8];
	__asm        call   0x0053AB2F;
// LINE 302:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 2;
// LINE 303:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 305:
	__asm        jmp    near ptr 0x0053676E;
// LINE 307:
	__asm        jmp    near ptr 0x005366AC;
// LINE 310:
	__asm        mov    ecx, this;
	__asm        call   0x005422EE;
// LINE 313:
	__asm        mov    eax, ds:[0x6C126C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x24];
	__asm        mov    vec.x, eax;
// LINE 314:
	__asm        mov    eax, ds:[0x6C1270];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x28];
	__asm        mov    vec.y, eax;
// LINE 315:
	__asm        mov    eax, ds:[0x6C1274];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x2C];
	__asm        mov    vec.z, eax;
// LINE 316:
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        call   0x004CA1E3;
	__asm        add    esp, 4;
	__asm        mov    dist, eax;
// LINE 317:
	__asm        mov    eax, ds:[0x608F78];
	__asm        cmp    dist, eax;
	__asm        jge    near ptr 0x00536697;
// LINE 318:
	__asm        mov    eax, dist;
	__asm        mov    ds:[0x608F78], eax;
// LINE 320:
	__asm        mov    ecx, this;
	__asm        call   0x0050417D;
// LINE 321:
	__asm        mov    ecx, this;
	__asm        call   0x005022B0;
// LINE 322:
	__asm        jmp    near ptr 0x0053676E;
// LINE 326:
	__asm        mov    ecx, this;
	__asm        call   0x00536778;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0053671B;
// LINE 328:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x122], 0;
// LINE 329:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11E], 0;
// LINE 332:
	__asm        mov    ecx, this;
	__asm        call   0x00503E6E;
// LINE 334:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        push   eax;
	__asm        call   0x00500FC3;
	__asm        add    esp, 4;
// LINE 335:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x298];
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x5C3AA8];
	__asm        call   0x0053AB2F;
// LINE 339:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 2;
// LINE 340:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 342:
	__asm        jmp    near ptr 0x0053676E;
// LINE 345:
	__asm        push   0x159;
	__asm        push   0x5B7E4C;
	__asm        push   0x5B7E70;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00536741;
	__asm        jmp    near ptr 0x00536741;
// LINE 346:
	__asm        jmp    near ptr 0x0053676E;
// LINE 347:
	__asm        jmp    near ptr 0x0053676E;
	__asm        cmp    dword ptr [ebp-0x18], 2;
	__asm        je     near ptr 0x005364AB;
	__asm        cmp    dword ptr [ebp-0x18], 4;
	__asm        je     near ptr 0x0053651B;
	__asm        cmp    dword ptr [ebp-0x18], 5;
	__asm        je     near ptr 0x005366AC;
	__asm        jmp    near ptr 0x00536720;
// LINE 348:
	__asm        jmp    near ptr 0x00536773;
}

// FUNCTION: COPTER_D 0x00536778
int32_t FireEngineClass::AtScene() {
	struct Point3d vec;
	int32_t dist;

// LINE 358:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2A4], 0;
	__asm        je     near ptr 0x005367FC;
// LINE 360:
	__asm        mov    eax, this;
	__asm        add    eax, 0x2B0;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xC;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2AC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2A4];
	__asm        push   eax;
	__asm        call   0x00526292;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005367F7;
// LINE 363:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x005368CD;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005367F0;
// LINE 365:
	__asm        mov    ecx, this;
	__asm        call   0x00536AE2;
// LINE 367:
	__asm        jmp    near ptr 0x005367F7;
// LINE 370:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x005368C8;
// LINE 374:
	__asm        jmp    near ptr 0x0053686F;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2A8], 0;
	__asm        je     near ptr 0x0053686F;
// LINE 376:
	__asm        mov    eax, this;
	__asm        add    eax, 0x2B0;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xC;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2AC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2A8];
	__asm        push   eax;
	__asm        call   0x005263EC;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053686F;
// LINE 379:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x005368CD;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00536868;
// LINE 381:
	__asm        mov    ecx, this;
	__asm        call   0x00536AE2;
// LINE 383:
	__asm        jmp    near ptr 0x0053686F;
// LINE 386:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x005368C8;
// LINE 392:
	__asm        mov    eax, ds:[0x6C126C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x24];
	__asm        mov    vec.x, eax;
// LINE 393:
	__asm        mov    eax, ds:[0x6C1270];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x28];
	__asm        mov    vec.y, eax;
// LINE 394:
	__asm        mov    eax, ds:[0x6C1274];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x2C];
	__asm        mov    vec.z, eax;
// LINE 395:
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        call   0x004CA1E3;
	__asm        add    esp, 4;
	__asm        mov    dist, eax;
// LINE 396:
	__asm        mov    eax, ds:[0x608F6C];
	__asm        cmp    dist, eax;
	__asm        jge    near ptr 0x005368BE;
// LINE 397:
	__asm        mov    eax, dist;
	__asm        mov    ds:[0x608F6C], eax;
// LINE 399:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x005368C8;
// LINE 400:
}

// FUNCTION: COPTER_D 0x005368cd
int32_t FireEngineClass::ScanForFire(struct _GridCoordinates fireloc) {
	struct _CELL_INFO* cptr;
	int32_t fires_found;
	struct _GridCoordinates dyfireloc;
	struct _STOBJ_INST* stobj;
	struct _DYOBJ_INST* dyobj;
	class SpiralScan spiral;

// LINE 424:
	__asm        push   5;
	__asm        lea    ecx, spiral.currDist;
	__asm        call   0x00542DC0;
// LINE 425:
	__asm        mov    fires_found, 0;
// LINE 426:
	__asm        mov    ax, reinterpret_cast<uint16_t>(fireloc.x);
	__asm        mov    reinterpret_cast<uint16_t>(dyfireloc.x), ax;
// LINE 429:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2A4], 0;
// LINE 430:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2A8], 0;
// LINE 431:
	__asm        lea    eax, fireloc.x;
	__asm        push   eax;
	__asm        lea    ecx, spiral.currDist;
	__asm        call   0x00542E03;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00536AA3;
// LINE 432:
	__asm        xor    eax, eax;
	__asm        mov    al, fireloc.y;
	__asm        mov    [ebp-0x3C], eax;
	__asm        xor    eax, eax;
	__asm        mov    al, fireloc.x;
	__asm        mov    [ebp-0x40], eax;
// LINE 434:
	__asm        mov    eax, [ebp-0x3C];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, [ebp-0x40];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        jne    near ptr 0x00536974;
	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00536979;
	__asm        jmp    near ptr 0x00536979;
	__asm        jmp    near ptr 0x0053697E;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    cptr, eax;
// LINE 435:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        test   al, 0x20;
	__asm        je     near ptr 0x00536A20;
// LINE 441:
	__asm        mov    fires_found, 0;
// LINE 442:
	__asm        mov    eax, cptr;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    stobj, eax;
// LINE 443:
	__asm        cmp    stobj, 0;
	__asm        je     near ptr 0x00536A20;
// LINE 445:
	__asm        mov    eax, stobj;
	__asm        test   byte ptr [eax+8], 1;
	__asm        jne    near ptr 0x005369C6;
// LINE 448:
	__asm        mov    eax, stobj;
	__asm        mov    eax, [eax];
	__asm        mov    stobj, eax;
// LINE 449:
	__asm        jmp    near ptr 0x005369A2;
// LINE 452:
	__asm        inc    fires_found;
// LINE 458:
	__asm        mov    eax, stobj;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2A4], eax;
// LINE 461:
	__asm        call   0x0056EC50;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x2A4];
	__asm        mov    ecx, [ecx+0x98];
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+4];
	__asm        mov    eax, edx;
	__asm        sub    eax, fires_found;
	__asm        inc    eax;
	__asm        jne    near ptr 0x00536A13;
// LINE 464:
	__asm        mov    dword ptr [ebp-0x28], 1;
	__asm        jmp    near ptr 0x00536A0B;
	__asm        mov    eax, [ebp-0x28];
	__asm        jmp    near ptr 0x00536ADB;
// LINE 468:
	__asm        mov    eax, stobj;
	__asm        mov    eax, [eax];
	__asm        mov    stobj, eax;
// LINE 469:
	__asm        jmp    near ptr 0x005369A2;
// LINE 472:
	__asm        mov    eax, cptr;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    dyobj, eax;
// LINE 473:
	__asm        cmp    dyobj, 0;
	__asm        je     near ptr 0x00536A9E;
// LINE 476:
	__asm        mov    eax, dyobj;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   ah, 0x10;
	__asm        je     near ptr 0x00536A63;
// LINE 478:
	__asm        mov    eax, dyobj;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2A8], eax;
// LINE 479:
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        jmp    near ptr 0x00536A5B;
	__asm        mov    eax, [ebp-0x2C];
	__asm        jmp    near ptr 0x00536ADB;
// LINE 483:
	__asm        mov    eax, dyobj;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 4;
	__asm        je     near ptr 0x00536A91;
// LINE 485:
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    dyobj, eax;
// LINE 487:
	__asm        jmp    near ptr 0x00536A99;
// LINE 488:
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax];
	__asm        mov    dyobj, eax;
// LINE 489:
	__asm        jmp    near ptr 0x00536A29;
// LINE 490:
	__asm        jmp    near ptr 0x0053690C;
// LINE 494:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2A4], 0;
	__asm        je     near ptr 0x00536AC7;
// LINE 495:
	__asm        mov    dword ptr [ebp-0x30], 1;
	__asm        jmp    near ptr 0x00536ABF;
	__asm        mov    eax, [ebp-0x30];
	__asm        jmp    near ptr 0x00536ADB;
// LINE 497:
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x00536AD3;
	__asm        mov    eax, [ebp-0x34];
	__asm        jmp    near ptr 0x00536ADB;
// LINE 498:
}

// FUNCTION: COPTER_D 0x00536ae2
void FireEngineClass::PointStreamAtFire() {
// LINE 521:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2A4], 0;
	__asm        je     near ptr 0x00536B8A;
// LINE 523:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2A4];
	__asm        mov    eax, [eax+0x98];
	__asm        mov    eax, [eax];
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x2A4];
	__asm        add    eax, [ecx+0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2B0], eax;
// LINE 524:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2A4];
	__asm        mov    eax, [eax+0x98];
	__asm        mov    eax, [eax];
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x2A4];
	__asm        add    eax, [ecx+0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2B4], eax;
// LINE 525:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2A4];
	__asm        mov    eax, [eax+0x98];
	__asm        mov    eax, [eax];
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x2A4];
	__asm        add    eax, [ecx+0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2B8], eax;
// LINE 527:
	__asm        jmp    near ptr 0x00536BE0;
// LINE 530:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2A8], 0;
	__asm        jne    near ptr 0x00536BB6;
	__asm        push   0x212;
	__asm        push   0x5B7E78;
	__asm        push   0x5B7E9C;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00536BBB;
	__asm        jmp    near ptr 0x00536BBB;
// LINE 531:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2A8];
	__asm        add    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2B0;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 535:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x24];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x2B0], eax;
// LINE 536:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x28];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x2B4], eax;
// LINE 537:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x2C];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x2B8], eax;
// LINE 540:
	__asm        mov    eax, this;
	__asm        add    eax, 0x2B0;
	__asm        push   eax;
	__asm        call   0x004CA1E3;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2AC], eax;
// LINE 542:
	__asm        jmp    near ptr 0x00536C38;
}

// FUNCTION: COPTER_D 0x00536c3d
void FireEngineClass::SetSaveData(struct _AUTO_LOAD_SAVE* sd) {
// LINE 554:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2A0];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0x2A4], eax;
// LINE 555:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2AC];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0x2A8], eax;
// LINE 556:
	__asm        mov    eax, this;
	__asm        add    eax, 0x2B0;
	__asm        mov    ecx, sd;
	__asm        add    ecx, 0x2AC;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 557:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2BC];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0x2B8], eax;
// LINE 560:
	__asm        mov    eax, sd;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00542A75;
// LINE 561:
	__asm        jmp    near ptr 0x00536CB1;
}

// FUNCTION: COPTER_D 0x00536cb8
void FireEngineClass::LoadSaveData(struct _AUTO_LOAD_SAVE* sd) {
// LINE 575:
	__asm        mov    eax, sd;
	__asm        test   byte ptr [eax], 2;
	__asm        jne    near ptr 0x00536CD5;
// LINE 577:
	__asm        jmp    near ptr 0x00536DAC;
// LINE 581:
	__asm        mov    eax, sd;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00542B90;
// LINE 583:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x294];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00536D14;
// LINE 589:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00542570;
// LINE 590:
	__asm        jmp    near ptr 0x00536D2D;
// LINE 593:
	__asm        jmp    near ptr 0x00536D2D;
// LINE 594:
	__asm        jmp    near ptr 0x00536D2D;
	__asm        cmp    dword ptr [ebp-8], 1;
	__asm        jl     near ptr 0x00536D2D;
	__asm        cmp    dword ptr [ebp-8], 4;
	__asm        jle    near ptr 0x00536CF2;
	__asm        jmp    near ptr 0x00536D2D;
// LINE 596:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0x2A4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2A0], eax;
// LINE 597:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0x2A8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2AC], eax;
// LINE 598:
	__asm        mov    eax, sd;
	__asm        add    eax, 0x2AC;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2B0;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 599:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0x2B8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2BC], eax;
// LINE 601:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x005368CD;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00536DA7;
// LINE 603:
	__asm        mov    ecx, this;
	__asm        call   0x00536AE2;
// LINE 606:
	__asm        jmp    near ptr 0x00536DAC;
}



// Contribution: 1:00135dc0-00135df8 Module: 159, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00536dc0
// FireEngineClass::`scalar deleting destructor'



// Contribution: 2:000042a8-000042cf Module: 159, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005932a8
// ??_7FireEngineClass@@6B@


// Contribution: 3:00020dc8-00020eac Module: 159, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005b7dc8
// curFireTrucks


// Contribution: 3:000949d0-000949e3 Module: 159, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x0062b9d0
// fireTrucks
