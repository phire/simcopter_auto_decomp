// Module: S3amblnc.obj
// Source: C:\Copter\source\game\S3amblnc.cpp
// autogenerated by simcopter_tool from PDB file

// Type: int32_t;

// Type: /*packed*/ class AmbulanceClass (forward reference);
// VTABLE: COPTER_D 0x00593280
class AmbulanceClass : public EmergencyVehicleClass
{ // packed(0x2a0 bytes) TI: 0x47e2
public:
	void AmbulanceClass(const /*packed*/ class AmbulanceClass&);
	void AmbulanceClass();
	virtual void ~AmbulanceClass() /* override */;
	// calltype: NearC
	static /*packed*/ class AmbulanceClass* CreateInstance(int32_t);
	// calltype: NearC
	static void DestroyInstance(/*packed*/ class AmbulanceClass*);
	// calltype: NearC
	static unsigned char Dispatch(enum EmergencyType, enum EmergencyLevel, long, long);
	// calltype: NearC
	static int32_t IsThisAHospital(long, long);
	// calltype: NearC
	static int32_t IsThisAHospital(unsigned short);
	/*packed*/ class AmbulanceClass operator=(const /*packed*/ class AmbulanceClass&);
protected:
	virtual void ItterateFSM() /* override */;
	virtual void SetSaveData(/*packed*/ struct _AUTO_LOAD_SAVE*) /* override */;
	virtual void LoadSaveData(/*packed*/ struct _AUTO_LOAD_SAVE*) /* override */;
private:
	int32_t AtScene();
};

// Type: void;

// Type: char *;

// Type: /*packed*/ struct VRObjInfo;
struct VRObjInfo{ // packed(0x24 bytes) TI: 0x2ea8
	/*+0x0*/   int32_t Faces;
	/*+0x4*/   int32_t Verts;
	/*+0x8*/   int32_t Attribute;
	/*+0xc*/   int32_t Radius;
	/*+0x10*/  /*packed*/ struct Point3d *ObjCenter;
	/*+0x14*/  /*packed*/ struct Point3d *VertsPtr;
	/*+0x18*/  /*packed*/ struct Xform3d *VertsXfm;
	/*+0x1c*/  /*packed*/ struct Point3d *OrgVerts;
	/*+0x20*/  int32_t *Matrix[4][4];
};

// Type: enum EmergencyType;
enum EmergencyType {
	NO_EMERGENCY = 0,
	FIRE_TRUCK = 1,
	AMBULANCE_CAR = 2,
	POLICE_CHASING_CAR = 3,
	POLICE_ON_PATROL = 4,
};

// Type: enum EmergencyLevel;
enum EmergencyLevel {
	ES_UNDEFINED = 0,
	ES_STAKEOUT = 1,
	ES_RETURN = 2,
	ES_PURSUIT = 3,
	ES_DISPATCHED = 4,
	ES_AT_SCENE = 5,
	ES_COP_CHASE = 6,
};

// Type: long;

// Type: unsigned char;

// Type: unsigned short;

// Type: /*packed*/ struct Point3d;
struct Point3d{ // packed(0xc bytes) TI: 0x18b0
	/*+0x0*/   int32_t x;
	/*+0x4*/   int32_t y;
	/*+0x8*/   int32_t z;
};

// Type: /*packed*/ struct _AUTO_LOAD_SAVE (forward reference);
struct _AUTO_LOAD_SAVE{ // packed(0x344 bytes) TI: 0x42d7
	/*+0x0*/   int32_t flags;
	/*+0x4*/   /*packed*/ struct _DYOBJ_INST autoDynomitor; // 0x64 bytes
	/*+0x68*/  /*packed*/ struct Goal goal; // 0x2a bytes
	/*+0x92*/  /*packed*/ struct _GridCoordinates goalpRGVFixup; // 0x2 bytes
	/*+0x94*/  int32_t DeltaFromCenter;
	/*+0x98*/  int32_t stalledTimer;
	/*+0x9c*/  /*packed*/ struct Point3d directionVector; // 0xc bytes
	/*+0xa8*/  int32_t remainingTime;
	/*+0xac*/  int32_t desiredSpeed;
	/*+0xb0*/  int32_t desiredHiwaySpeed;
	/*+0xb4*/  int32_t beamDelay;
	/*+0xb8*/  int32_t beamTimer;
	/*+0xbc*/  int32_t m_cellBaseY;
	/*+0xc0*/  int32_t timePulledOver;
	/*+0xc4*/  enum DirectionTypes hiwaydir;
	/*+0xc8*/  /*packed*/ struct _GridCoordinates currentLocation; // 0x2 bytes
	/*+0xca*/  /*packed*/ struct _GridCoordinates nextLocation; // 0x2 bytes
	/*+0xcc*/  /*packed*/ struct _GridCoordinates northCell; // 0x2 bytes
	/*+0xce*/  /*packed*/ struct _GridCoordinates southCell; // 0x2 bytes
	/*+0xd0*/  /*packed*/ struct _GridCoordinates eastCell; // 0x2 bytes
	/*+0xd2*/  /*packed*/ struct _GridCoordinates westCell; // 0x2 bytes
	/*+0xd4*/  int32_t speed;
	/*+0xd8*/  long prevDir;
	/*+0xdc*/  long turnIndex;
	/*+0xe0*/  int32_t currDist;
	/*+0xe4*/  int32_t legOfTurn;
	/*+0xe8*/  /*packed*/ struct Point3d *pDirVector;
	/*+0xec*/  int32_t personDone;
	/*+0xf0*/  int32_t personState;
	/*+0xf4*/  int32_t personTimer;
	/*+0xf8*/  int32_t timeToLive;
	/*+0xfc*/  int32_t fireTime;
	/*+0x100*/ long fireSeq;
	/*+0x104*/ long missionId;
	/*+0x108*/ /*packed*/ struct _GridCoordinates cptrfixup; // 0x2 bytes
	/*+0x10a*/ int32_t spotlightHitCounter;
	struct _AUTO_LOAD_SAVE::_CRIMINAL{ // packed(0x10 bytes) TI: 0x42df
		/*+0x0*/   long missionState;
		/*+0x4*/   long criminalType;
		/*+0x8*/   int32_t timeToLeaveCar;
		/*+0xc*/   int32_t timeToBeOnTheRun;
	};
public:
	/*+0x10e*/ /*packed*/ struct _AUTO_LOAD_SAVE::_CRIMINAL c; // 0x10 bytes
	struct _AUTO_LOAD_SAVE::_EMERGENCY{ // packed(0x186 bytes) TI: 0x42dd
		/*+0x0*/   /*packed*/ struct _GridCoordinates baseLocation; // 0x2 bytes
		/*+0x2*/   /*packed*/ struct _GridCoordinates emergencyLocation; // 0x2 bytes
		/*+0x4*/   long emergencyType;
		/*+0x8*/   long timeOfArrival;
		/*+0xc*/   /*packed*/ struct _DYOBJ_INST dispatchIcon; // 0x64 bytes
		/*+0x70*/  int32_t timeToEmergency;
		/*+0x74*/  long targetfixup;
		/*+0x78*/  unsigned char dispatchPath[256]; // 0x100 bytes
		/*+0x178*/ unsigned char dispatchPathIndex; // 0x1 bytes
		/*+0x179*/ unsigned char dispatchPathLength; // 0x1 bytes
		/*+0x17a*/ long emergencyState;
		/*+0x17e*/ int32_t stationID;
		/*+0x182*/ int32_t numberOfSeats;
	};
public:
	/*+0x11e*/ /*packed*/ struct _AUTO_LOAD_SAVE::_EMERGENCY e; // 0x186 bytes
	struct _AUTO_LOAD_SAVE::_FIRE{ // packed(0x18 bytes) TI: 0x42db
		/*+0x0*/   int32_t dousingFire;
		/*+0x4*/   int32_t distToFire;
		/*+0x8*/   /*packed*/ struct Point3d firevec; // 0xc bytes
		/*+0x14*/  int32_t pathID;
	};
public:
	/*+0x2a4*/ /*packed*/ struct _AUTO_LOAD_SAVE::_FIRE f; // 0x18 bytes
	struct _AUTO_LOAD_SAVE::_POLICE{ // packed(0x88 bytes) TI: 0x42d9
		/*+0x0*/   /*packed*/ struct Goal currDestGoal; // 0x2a bytes
		/*+0x2a*/  /*packed*/ struct _GridCoordinates currpRGVFixup; // 0x2 bytes
		/*+0x2c*/  /*packed*/ struct Goal destGoal1; // 0x2a bytes
		/*+0x56*/  /*packed*/ struct _GridCoordinates dest1pRGVFixup; // 0x2 bytes
		/*+0x58*/  /*packed*/ struct Goal destGoal2; // 0x2a bytes
		/*+0x82*/  /*packed*/ struct _GridCoordinates dest2pRGVFixup; // 0x2 bytes
		/*+0x84*/  int32_t foundRoad;
	};
public:
	/*+0x2bc*/ /*packed*/ struct _AUTO_LOAD_SAVE::_POLICE p; // 0x88 bytes
};

// Type: /*packed*/ class EmergencyVehicleClass (forward reference);
// VTABLE: COPTER_D 0x005934c0
class EmergencyVehicleClass : public AutomobileClass
{ // packed(0x2a0 bytes) TI: 0x47d8
	enum /* __unnamed */ {
		MAXIMUM_DISTANCE_FROM_BASE = 7,
		MAXIMUM_TIME_TO_EMERGENCY = 3932160,
		AMBULANCE_CAPACITY = 2,
	};
protected:
	/*+0x11a*/ /*packed*/ struct _GridCoordinates baseLocation; // 0x2 bytes
	/*+0x11c*/ /*packed*/ struct _GridCoordinates emergencyLocation; // 0x2 bytes
	/*+0x11e*/ enum EmergencyType emergencyType;
	/*+0x122*/ long timeOfArrival;
	/*+0x126*/ /*packed*/ struct _DYOBJ_INST dispatchIcon; // 0x64 bytes
	/*+0x18a*/ int32_t timeToEmergency;
	/*+0x18e*/ /*packed*/ class AutomobileClass *dispatchTarget;
	/*+0x192*/ unsigned char dispatchPath[256]; // 0x100 bytes
	/*+0x292*/ unsigned char dispatchPathIndex; // 0x1 bytes
	/*+0x293*/ unsigned char dispatchPathLength; // 0x1 bytes
	/*+0x294*/ enum EmergencyLevel emergencyState;
	/*+0x298*/ int32_t stationID;
	/*+0x29c*/ int32_t numberOfSeats;
public:
	void EmergencyVehicleClass(const /*packed*/ class EmergencyVehicleClass&);
	void EmergencyVehicleClass();
	virtual void ~EmergencyVehicleClass() /* override */;
	enum EmergencyLevel GetEmergencyState();
	void InitializePlacedVehicleForDispatch(/*packed*/ struct Goal, /*packed*/ struct Goal, /*packed*/ struct Goal, /*packed*/ struct Goal, /*packed*/ struct _GridCoordinates, /*packed*/ struct Goal, enum EmergencyType, enum EmergencyLevel);
	void InitializeStationVehicleForDispatch(int32_t, /*packed*/ struct Goal, /*packed*/ struct Goal, /*packed*/ struct _GridCoordinates, /*packed*/ struct Goal, /*packed*/ struct Goal, /*packed*/ struct _GridCoordinates, int32_t, /*packed*/ struct Goal, enum EmergencyType, enum EmergencyLevel);
	// calltype: NearC
	static int32_t AreThereMoreSeats(/*packed*/ struct _DYOBJ_INST*);
	// calltype: NearC
	static void FillSeat(/*packed*/ struct _DYOBJ_INST*);
	// calltype: NearC
	static int32_t S3UpdateCar(int32_t, int32_t);
	// calltype: NearC
	static /*packed*/ struct _DYOBJ_INST* S3GetCar(int32_t);
	void CancelEmergencyDispatch();
protected:
	virtual void Reset(); // vtable+0x24
	virtual void AdjustSpeed() /* override */;
	virtual enum TurnIndex PickTurnDir(/*packed*/ struct Goal*) /* override */;
	virtual void SetSaveData(/*packed*/ struct _AUTO_LOAD_SAVE*) /* override */;
	virtual void LoadSaveData(/*packed*/ struct _AUTO_LOAD_SAVE*) /* override */;
	void ArriveOnScene();
	void UnLinkIconFromCell(const /*packed*/ struct _GridCoordinates);
	void LinkIconToCell(const /*packed*/ struct _GridCoordinates);
	void PositionIcon();
	void GoBackToStation();
	void BuildPath(/*packed*/ struct _RGIndex, /*packed*/ struct _RGIndex);
	void TurnOnStrobe();
	void TurnOffStrobe();
	int32_t UpdateCar(int32_t);
	virtual void BeamToWithinCameraRange() /* override */;
public:
	/*packed*/ class EmergencyVehicleClass operator=(const /*packed*/ class EmergencyVehicleClass&);
};

// Type: uint32_t;

// Type: /*packed*/ class AutomobileClass;
// VTABLE: COPTER_D 0x00592d98
class AutomobileClass{ // packed(0x11a bytes) TI: 0x4880
	enum CarType {
		kCarAmbulance = 0,
		kCarCop = 1,
		kCarFiretruck = 2,
		kCarCriminal = 3,
	};
	enum AutoMessageID {
		AM_NO_MESSAGE = 0,
		AM_CANCEL_AUTO_MISSION = 1,
	};
	enum /* __unnamed */ {
		CAR_TYPES = 7,
		PERCENTAGE_OF_AUTO1 = 10,
		PERCENTAGE_OF_AUTO2 = 20,
		PERCENTAGE_OF_AUTO3 = 20,
		PERCENTAGE_OF_AUTO4 = 10,
		PERCENTAGE_OF_AUTO5 = 10,
		PERCENTAGE_OF_AUTO6 = 20,
		PERCENTAGE_OF_AUTO7 = 20,
		TOTAL_PERCENTAGE = 110,
	};
	enum /* __unnamed */ {
		NO_X_POSITION = -1,
		STARTING_X = 3,
		ENDING_X = 125,
		NO_Y_POSITION = -1,
		STARTING_Y = 3,
		ENDING_Y = 125,
	};
	enum IntersectionTypes {
		DEAD_END = 0,
		STRAIGHT_AHEAD = 1,
		LEFT_ONLY = 2,
		RIGHT_ONLY = 4,
		LEFT_OR_STRAIGHT = 3,
		LEFT_OR_RIGHT = 6,
		RIGHT_OR_STRAIGHT = 5,
		LEFT_STRAIGHT_OR_RIGHT = 7,
		DEAD_END_HIWAY = 16,
	};
	enum StoppedReasons {
		NO_REASON = 0,
		TRAFFIC = 1,
		STOPPED_TRAFFIC = 2,
		PERSON_IN_WAY = 3,
		AUTO_IN_WAY = 4,
		DEBRIS_IN_WAY = 5,
		UNIDENTIFIED_IN_WAY = 6,
		HELI_IN_WAY = 7,
		END_OF_ROAD = 8,
		END_OF_HIWAY = 9,
		INTERSECTION_FULL = 10,
		BEEN_PULLED_OVER = 11,
	};
	enum RoadTileOffsets {
		RD_CENTOFF = 851968,
		RD_EDGEOFF = 131072,
	};
	enum HiwayOffsets {
		HW_CENTOFF_LANE1 = 851968,
		HW_EDGEOFF_LANE1 = 131072,
		HW_CENTOFF_LANE2 = 851968,
		HW_EDGEOFF_LANE2 = 131072,
		HW_HEIGHT = 2031616,
	};
public:
	static int32_t fireSirenDist;
	static int32_t policeSirenDist;
	static int32_t ambSirenDist;
	static int32_t fireHoseDist;
	enum /* __unnamed */ {
		CAR_RADIUS = 327680,
		COLLISION_SPACE = 655360,
		ROAD_SPEED = 2621440,
		ROAD_SLOWDOWN_FACTOR = 131072,
		HIWAY_SPEED = 6225920,
		HIWAY_SLOWDOWN_FACTOR = 327680,
		SPEED_VARIANCE = 262144,
		HIWAY_VARIANCE = 655360,
		MAX_TIME_TO_WAIT_FOR_TRAFFIC = 1310720,
		MAX_TIME_TO_WAIT_PULLED_OVER = 196608,
		MAX_TIME_TO_WAIT_BEFORE_BEAMING = 235,
	};
	enum Flags {
		AUTO_INITIALIZED = 1,
		AUTO_PLACED = 2,
		AUTO_NEEDS_TO_PULL_OVER = 4,
		AUTO_PULL_OVER = 8,
		AUTO_PULLING_OVER = 16,
		AUTO_PULLED_OVER = 32,
		AUTO_PULLING_OUT = 64,
		AUTO_IN_INTERSECTION = 128,
		AUTO_ON_FIRE = 256,
		AUTO_JAMMED = 512,
		AUTO_RIGHT_OF_WAY = 1024,
		AUTO_ON_HIWAY = 2048,
		AUTO_SPEEDER = 4096,
		AUTO_SPEEDER_DONE = 8192,
		AUTO_UTURN = 16384,
	};
public:
	/*+0x4*/   long carModel;
	/*+0x8*/   int32_t flags;
	/*+0xc*/   /*packed*/ struct _DYOBJ_INST autoDynomitor; // 0x64 bytes
	/*+0x70*/  /*packed*/ struct Goal goal; // 0x2a bytes
private:
	static /*packed*/ struct Point2d lastScannedLocation;
	/*+0x9a*/  int32_t DeltaFromCenter;
	/*+0x9e*/  int32_t stalledTimer;
	/*+0xa2*/  /*packed*/ struct Point3d directionVector; // 0xc bytes
	/*+0xae*/  int32_t remainingTime;
	/*+0xb2*/  int32_t desiredSpeed;
	/*+0xb6*/  int32_t desiredHiwaySpeed;
	/*+0xba*/  int32_t beamDelay;
	/*+0xbe*/  int32_t beamTimer;
	/*+0xc2*/  int32_t m_cellBaseY;
	/*+0xc6*/  int32_t timePulledOver;
	/*+0xca*/  int32_t hornSoundId;
	/*+0xce*/  enum DirectionTypes hiwaydir;
	/*+0xd2*/  /*packed*/ struct _GridCoordinates currentLocation; // 0x2 bytes
	/*+0xd4*/  /*packed*/ struct _GridCoordinates nextLocation; // 0x2 bytes
	/*+0xd6*/  /*packed*/ struct _GridCoordinates northCell; // 0x2 bytes
	/*+0xd8*/  /*packed*/ struct _GridCoordinates southCell; // 0x2 bytes
	/*+0xda*/  /*packed*/ struct _GridCoordinates eastCell; // 0x2 bytes
	/*+0xdc*/  /*packed*/ struct _GridCoordinates westCell; // 0x2 bytes
protected:
	/*+0xde*/  int32_t speed;
	/*+0xe2*/  enum DirIndex2 prevDir;
	/*+0xe6*/  enum TurnIndex turnIndex;
	/*+0xea*/  int32_t currDist;
	/*+0xee*/  int32_t legOfTurn;
	/*+0xf2*/  /*packed*/ struct Point3d *pDirVector;
	/*+0xf6*/  int32_t personDone;
	/*+0xfa*/  int32_t personState;
	/*+0xfe*/  int32_t personTimer;
	/*+0x102*/ int32_t timeToLive;
	/*+0x106*/ int32_t fireTime;
	/*+0x10a*/ long fireSeq;
	/*+0x10e*/ long missionId;
	/*+0x112*/ /*packed*/ struct _CELL_INFO *cptr;
	/*+0x116*/ int32_t spotlightHitCounter;
	int32_t IsCarPersistant();
	int32_t CanCarBeamToHiwayTile(unsigned short);
public:
	void AutomobileClass(const /*packed*/ class AutomobileClass&);
	void AutomobileClass();
	virtual void ~AutomobileClass(); // vtable+0x0
	// calltype: NearC
	static /*packed*/ class AutomobileClass* CreateInstance(int32_t);
	// calltype: NearC
	static /*packed*/ class AutomobileClass* GetAutoPointer(long);
	// calltype: NearC
	static void DestroyInstance(/*packed*/ class AutomobileClass*);
	// calltype: NearC
	static void ItterateAll();
	// calltype: NearC
	static void ResetAll();
	// calltype: NearC
	static int32_t MissionStartFire(long, /*packed*/ struct Point2d*);
	// calltype: NearC
	static int32_t MissionStartJam(long, /*packed*/ struct Point2d*);
	// calltype: NearC
	static void MissionCancel(long);
	// calltype: NearC
	static void SetAllHeadlights(int32_t);
	// calltype: NearC
	static int32_t S3AutoMessage(short, short);
	// calltype: NearC
	static int32_t MIFFLoad(void * __ptr32);
	// calltype: NearC
	static int32_t MIFFSave(void * __ptr32);
	void HitDispatch(long, /*packed*/ struct _DYOBJ_INST*, long, long);
	int32_t AmIABadGuy();
	int32_t Initialize(int32_t);
	void WaterDouse(/*packed*/ struct _DYOBJ_INST*);
	void IveBeenMegaphoned(long);
	void StartFire(long);
	void StartJam(long);
	virtual void PullOver(short); // vtable+0x4
	void PullOut();
	int32_t CanIPullOut();
	int32_t CanIPullOver();
	void DoAUTurn();
	long GetCarModel();
	// calltype: NearC
	static /*packed*/ struct _DYOBJ_INST* GetClosestCar(int32_t, int32_t, int32_t);
protected:
	void Itterate();
	virtual void AdjustSpeed(); // vtable+0x8
	void Reset();
	virtual enum TurnIndex PickTurnDir(/*packed*/ struct Goal*); // vtable+0xc
	void UnPlaceCar();
	void PullOverCiviliansInWay();
	virtual void ItterateFSM(); // vtable+0x10
	int32_t InitializeInstance(int32_t);
	void LinkToCell(const /*packed*/ struct _GridCoordinates&);
	int32_t AreCarsHeadOn(/*packed*/ struct Point3d*);
	enum AutomobileClass::StoppedReasons CollisionCheck(int32_t, /*packed*/ struct _DYOBJ_INST**);
	int32_t IsCarOutOfCameraRange();
	void TurnOffHeadlight();
	void TurnOnHeadlight();
	int32_t AutoMessage(short);
	int32_t PlacePerson(int32_t, int32_t);
	virtual void SetSaveData(/*packed*/ struct _AUTO_LOAD_SAVE*); // vtable+0x14
	virtual void LoadSaveData(/*packed*/ struct _AUTO_LOAD_SAVE*); // vtable+0x18
	void HonkHorn();
	void SetHiwayDirection(unsigned short);
	int32_t DoHiwayTilesConnect(unsigned short, unsigned short, enum DirectionTypes);
	void AdjustCurrentHiwayPosition();
	void AdjustNextHiwayPosition();
	enum AutomobileClass::IntersectionTypes PickHiwayDir(/*packed*/ struct _GridCoordinates&);
	void MakeAHiwayTurn(enum AutomobileClass::IntersectionTypes);
	void GoStraight();
	void TurnLeft();
	void TurnRight();
	void MoveForwardOnHiway();
	void DoDiagonalRoadFixup();
	virtual void BeamToWithinCameraRange(); // vtable+0x1c
	virtual int32_t BeamToLocation(const /*packed*/ struct _GridCoordinates&); // vtable+0x20
	void MoveAuto(int32_t);
	void ChangeAutoColor();
private:
	void UnlinkFromCell(const /*packed*/ struct _GridCoordinates&);
	void TransitionBetweenGoals();
	void RunFireState();
	void RunJamState();
	void IveBeenSpotlighted(/*packed*/ struct _DYOBJ_INST*);
	int32_t IsThisAnEmergencyVehicle();
	void DoPullOverStuff(int32_t);
	int32_t CanIDoAUTurn();
public:
	/*packed*/ class AutomobileClass operator=(const /*packed*/ class AutomobileClass&);
};

// Type: /*packed*/ class EmergencyVehicleClass;
// VTABLE: COPTER_D 0x005934c0
class EmergencyVehicleClass : public AutomobileClass
{ // packed(0x2a0 bytes) TI: 0x47d8
	enum /* __unnamed */ {
		MAXIMUM_DISTANCE_FROM_BASE = 7,
		MAXIMUM_TIME_TO_EMERGENCY = 3932160,
		AMBULANCE_CAPACITY = 2,
	};
protected:
	/*+0x11a*/ /*packed*/ struct _GridCoordinates baseLocation; // 0x2 bytes
	/*+0x11c*/ /*packed*/ struct _GridCoordinates emergencyLocation; // 0x2 bytes
	/*+0x11e*/ enum EmergencyType emergencyType;
	/*+0x122*/ long timeOfArrival;
	/*+0x126*/ /*packed*/ struct _DYOBJ_INST dispatchIcon; // 0x64 bytes
	/*+0x18a*/ int32_t timeToEmergency;
	/*+0x18e*/ /*packed*/ class AutomobileClass *dispatchTarget;
	/*+0x192*/ unsigned char dispatchPath[256]; // 0x100 bytes
	/*+0x292*/ unsigned char dispatchPathIndex; // 0x1 bytes
	/*+0x293*/ unsigned char dispatchPathLength; // 0x1 bytes
	/*+0x294*/ enum EmergencyLevel emergencyState;
	/*+0x298*/ int32_t stationID;
	/*+0x29c*/ int32_t numberOfSeats;
public:
	void EmergencyVehicleClass(const /*packed*/ class EmergencyVehicleClass&);
	void EmergencyVehicleClass();
	virtual void ~EmergencyVehicleClass() /* override */;
	enum EmergencyLevel GetEmergencyState();
	void InitializePlacedVehicleForDispatch(/*packed*/ struct Goal, /*packed*/ struct Goal, /*packed*/ struct Goal, /*packed*/ struct Goal, /*packed*/ struct _GridCoordinates, /*packed*/ struct Goal, enum EmergencyType, enum EmergencyLevel);
	void InitializeStationVehicleForDispatch(int32_t, /*packed*/ struct Goal, /*packed*/ struct Goal, /*packed*/ struct _GridCoordinates, /*packed*/ struct Goal, /*packed*/ struct Goal, /*packed*/ struct _GridCoordinates, int32_t, /*packed*/ struct Goal, enum EmergencyType, enum EmergencyLevel);
	// calltype: NearC
	static int32_t AreThereMoreSeats(/*packed*/ struct _DYOBJ_INST*);
	// calltype: NearC
	static void FillSeat(/*packed*/ struct _DYOBJ_INST*);
	// calltype: NearC
	static int32_t S3UpdateCar(int32_t, int32_t);
	// calltype: NearC
	static /*packed*/ struct _DYOBJ_INST* S3GetCar(int32_t);
	void CancelEmergencyDispatch();
protected:
	virtual void Reset(); // vtable+0x24
	virtual void AdjustSpeed() /* override */;
	virtual enum TurnIndex PickTurnDir(/*packed*/ struct Goal*) /* override */;
	virtual void SetSaveData(/*packed*/ struct _AUTO_LOAD_SAVE*) /* override */;
	virtual void LoadSaveData(/*packed*/ struct _AUTO_LOAD_SAVE*) /* override */;
	void ArriveOnScene();
	void UnLinkIconFromCell(const /*packed*/ struct _GridCoordinates);
	void LinkIconToCell(const /*packed*/ struct _GridCoordinates);
	void PositionIcon();
	void GoBackToStation();
	void BuildPath(/*packed*/ struct _RGIndex, /*packed*/ struct _RGIndex);
	void TurnOnStrobe();
	void TurnOffStrobe();
	int32_t UpdateCar(int32_t);
	virtual void BeamToWithinCameraRange() /* override */;
public:
	/*packed*/ class EmergencyVehicleClass operator=(const /*packed*/ class EmergencyVehicleClass&);
};



// Contribution: 1:001348a0-0013509d Module: 160, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x005358a0
int32_t CreateAmbulanceInstance(int32_t instanceID) {
// LINE 77:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        call   AmbulanceClass::CreateInstance;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T24;

	__asm        mov    eax, 1;
	__asm        jmp    _T26;
_T24:
	__asm        xor    eax, eax;
_T26:
	__asm        jmp    _T2b;
// LINE 78:
_T2b:
}

// FUNCTION: COPTER_D 0x005358d0
void AmbulanceClass::AmbulanceClass() {

	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::EmergencyVehicleClass;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593280;
// LINE 84:
	this->carModel = 0x11f;
// LINE 85:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00535904
void AmbulanceClass::~AmbulanceClass() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593280;
	__asm        jmp    _T1a;
_T1a:
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::~EmergencyVehicleClass;
}

// FUNCTION: COPTER_D 0x0053592b
/*packed*/ class AmbulanceClass* AmbulanceClass::CreateInstance(int32_t instanceID) {
	/*bp-0x4*/   char * objectMemory;
	/*bp-0x8*/   /*packed*/ class AmbulanceClass *youveWonABrandNewCar;
	/*bp-0xc*/   int32_t object;

// LINE 113:
	__asm        push   0x2A0;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T33;

	__asm        mov    ecx, [ebp-0x34];
	__asm        call   AmbulanceClass::AmbulanceClass;
	__asm        mov    youveWonABrandNewCar, eax;
	__asm        jmp    _T3a;
_T33:
	youveWonABrandNewCar = 0x0;
// LINE 116:
_T3a:
	__asm        cmp    youveWonABrandNewCar, 0;
	__asm        je     _T1dd;
// LINE 119:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        mov    ecx, youveWonABrandNewCar;
	__asm        call   AutomobileClass::InitializeInstance;
	__asm        test   eax, eax;
	__asm        je     _T1b6;
// LINE 123:
// Block start:
	/*bp-0x30*/  /*packed*/ struct VRObjInfo oinfo; // 0x24 bytes
	__asm        push   0x121;
	__asm        call   0x004D8821;
	__asm        add    esp, 4;
	__asm        mov    object, eax;
// LINE 124:
	__asm        mov    eax, object;
	__asm        push   eax;
	__asm        call   0x004D8520;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, G_dyobjmempool;
	__asm        push   eax;
	__asm        call   S2Alloc;
	__asm        add    esp, 8;
	__asm        mov    objectMemory, eax;
// LINE 126:
	__asm        cmp    objectMemory, 0;
	__asm        je     _T113;
// LINE 131:
	__asm        mov    eax, objectMemory;
	__asm        push   eax;
	__asm        mov    eax, object;
	__asm        push   eax;
	__asm        call   0x004D8570;
	__asm        add    esp, 8;
	__asm        mov    ecx, youveWonABrandNewCar;
	__asm        mov    [ecx+0x12E], eax;
// LINE 133:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        cmp    dword ptr [eax+0x12E], 0;
	__asm        je     _Td6;
// LINE 136:
	__asm        mov    eax, G_main_mp;
	__asm        push   eax;
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    eax, [eax+0x12E];
	__asm        push   eax;
	__asm        call   0x004D84DB;
	__asm        add    esp, 8;
// LINE 138:
	__asm        jmp    _T10e;
// LINE 141:
_Td6:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        cmp    dword ptr [eax+0x12E], 0;
	__asm        jne    _T102;

	__asm        push   0x8D;
	__asm        push   0x5B7D1C;
	__asm        push   0x5B7D40;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T107;
_T102:
	__asm        jmp    _T107;
// LINE 143:
_T107:
	return 0x0;
// LINE 146:
_T10e:
	__asm        jmp    _T145;
// LINE 149:
_T113:
	__asm        cmp    objectMemory, 0;
	__asm        jne    _T139;

	__asm        push   0x95;
	__asm        push   0x5B7D68;
	__asm        push   0x5B7D8C;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T13e;
_T139:
	__asm        jmp    _T13e;
// LINE 151:
_T13e:
	return 0x0;
// LINE 157:
_T145:
	youveWonABrandNewCar->dispatchIcon.user1 = 0x0;
// LINE 158:
	youveWonABrandNewCar->dispatchIcon.flags = 0x21;
// LINE 159:
	__asm        lea    eax, oinfo.Faces;
	__asm        push   eax;
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    eax, [eax+0x12E];
	__asm        push   eax;
	__asm        call   0x004D8859;
	__asm        add    esp, 8;
// LINE 160:
	youveWonABrandNewCar->dispatchIcon.radius = oinfo.Radius;
// LINE 161:
	__asm        push   0;
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    eax, [eax+0x12E];
	__asm        push   eax;
	__asm        call   0x004D6970;
	__asm        add    esp, 8;
// LINE 163:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    ecx, curAmbulances;
	__asm        mov    ambulances[0][ecx*4], eax;
	__asm        inc    curAmbulances;
// LINE 165:
	return youveWonABrandNewCar;
// LINE 167:
// Block end:
	__asm        jmp    _T1dd;
// LINE 170:
_T1b6:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T1dd;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T1dd;
// LINE 176:
_T1dd:
	return 0x0;
// LINE 177:
}

// FUNCTION: COPTER_D 0x00535b14
unsigned char AmbulanceClass::Dispatch(enum EmergencyType responseType, enum EmergencyLevel responseLevel, long mapx, long mapy) {
// LINE 251:
	__asm        push   5;
	__asm        push   0x62B9B8;
	__asm        mov    eax, responseLevel;
	__asm        push   eax;
	__asm        mov    eax, responseType;
	__asm        push   eax;
	__asm        mov    eax, mapy;
	__asm        push   eax;
	__asm        mov    eax, mapx;
	__asm        push   eax;
	__asm        mov    ecx, gHospitals;
	__asm        call   Station::DispatchNearestAvailableVehicle;
	__asm        jmp    _T2d;
// LINE 252:
_T2d:
}

// FUNCTION: COPTER_D 0x00535b46
int32_t AmbulanceClass::IsThisAHospital(unsigned short tileType) {
// LINE 258:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tileType);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0xD1;
	__asm        jne    _T23;

	__asm        mov    eax, 1;
	__asm        jmp    _T25;
_T23:
	__asm        xor    eax, eax;
_T25:
	__asm        jmp    _T2a;
// LINE 259:
_T2a:
}

// FUNCTION: COPTER_D 0x00535b75
int32_t AmbulanceClass::IsThisAHospital(long mapX, long mapY) {
// LINE 265:
	__asm        cmp    mapX, 0;
	__asm        jl     _T37;

	__asm        cmp    mapY, 0;
	__asm        jl     _T37;

	__asm        cmp    mapX, 0x80;
	__asm        jge    _T37;

	__asm        cmp    mapY, 0x80;
	__asm        jl     _T41;
_T37:
	__asm        jmp    _Ta0;

	__asm        jmp    _T96;
_T41:
	__asm        mov    eax, mapX;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, mapY;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, mapX;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, mapY;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        movzx  eax, ax;
	__asm        cmp    eax, 0xD1;
	__asm        jne    _Ta0;

	__asm        jmp    _T96;

	__asm        mov    eax, [ebp-4];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0xD1;
	__asm        jne    _Ta0;
_T96:
	__asm        mov    eax, 1;
	__asm        jmp    _Ta2;
_Ta0:
	__asm        xor    eax, eax;
_Ta2:
	__asm        jmp    _Ta7;
// LINE 266:
_Ta7:
}

// FUNCTION: COPTER_D 0x00535c21
void AmbulanceClass::ItterateFSM() {
	/*bp-0x4*/   int32_t dist;
	/*bp-0x10*/  /*packed*/ struct Point3d vec; // 0xc bytes

// LINE 292:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x294];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T384;
// LINE 296:
_T1d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jle    _T40;
// LINE 297:
	__asm        xor    eax, eax;
	__asm        sub    eax, LoopTime;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0xFE], eax;
// LINE 299:
_T40:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jg     _Tad;

	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::CanIPullOut;
	__asm        test   eax, eax;
	__asm        je     _Tad;
// LINE 301:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PullOut;
// LINE 305:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::UnPlaceCar;
// LINE 306:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        push   eax;
	__asm        call   S3MapRemoveCarInfo;
	__asm        add    esp, 4;
// LINE 307:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x298];
	__asm        push   eax;
	__asm        mov    ecx, gHospitals;
	__asm        call   Station::DecrementQuantityOfVehicleDispatched;
// LINE 311:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 312:
	this->emergencyState = 0x2;
// LINE 314:
_Tad:
	__asm        jmp    _T3af;
// LINE 317:
_Tb2:
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::PositionIcon;
// LINE 319:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11A];
	__asm        cmp    ecx, edx;
	__asm        jne    _T122;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11B];
	__asm        cmp    ecx, edx;
	__asm        jne    _T122;
// LINE 322:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x298];
	__asm        push   eax;
	__asm        mov    ecx, gHospitals;
	__asm        call   Station::DecrementQuantityOfVehicleDispatched;
// LINE 323:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::UnPlaceCar;
// LINE 324:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        push   eax;
	__asm        call   S3MapRemoveCarInfo;
	__asm        add    esp, 4;
// LINE 325:
	return;
// LINE 328:
_T122:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::ItterateFSM;
// LINE 329:
	__asm        jmp    _T3af;
// LINE 333:
_T12f:
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::PositionIcon;
// LINE 334:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11C];
	__asm        cmp    ecx, edx;
	__asm        jne    _T204;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11D];
	__asm        cmp    ecx, edx;
	__asm        jne    _T204;

	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::CanIPullOver;
	__asm        test   eax, eax;
	__asm        je     _T204;
// LINE 336:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 337:
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::TurnOffStrobe;
// LINE 338:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::UnLinkIconFromCell;
// LINE 339:
	__asm        push   5;
	__asm        push   0xC;
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PlacePerson;
	__asm        test   eax, eax;
	__asm        je     _T1e5;
// LINE 341:
	this->personDone = 0x0;
// LINE 342:
	this->personTimer = 0xf00000;
// LINE 343:
	this->emergencyState = 0x5;
// LINE 345:
	__asm        jmp    _T1ff;
// LINE 348:
_T1e5:
	this->personTimer = 0x0;
// LINE 349:
	this->emergencyState = 0x1;
// LINE 352:
_T1ff:
	__asm        jmp    _T263;
// LINE 355:
_T204:
	__asm        mov    eax, ViewState.world_pos.x;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x24];
	__asm        mov    vec.x, eax;
// LINE 356:
	__asm        mov    eax, ViewState.world_pos.y;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x28];
	__asm        mov    vec.y, eax;
// LINE 357:
	__asm        mov    eax, ViewState.world_pos.z;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x2C];
	__asm        mov    vec.z, eax;
// LINE 358:
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        call   MTNormalize;
	__asm        add    esp, 4;
	__asm        mov    dist, eax;
// LINE 359:
	__asm        mov    eax, AutomobileClass::ambSirenDist;
	__asm        cmp    dist, eax;
	__asm        jge    _T253;
// LINE 360:
	AutomobileClass::ambSirenDist = dist;
// LINE 362:
_T253:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PullOverCiviliansInWay;
// LINE 363:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::ItterateFSM;
// LINE 365:
_T263:
	__asm        jmp    _T3af;
// LINE 368:
_T268:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        jne    _T282;
// LINE 371:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::ItterateFSM;
// LINE 372:
	__asm        jmp    _T3af;
// LINE 375:
_T282:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jle    _T2a5;
// LINE 376:
	__asm        xor    eax, eax;
	__asm        sub    eax, LoopTime;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0xFE], eax;
// LINE 379:
_T2a5:
	__asm        mov    ecx, this;
	__asm        call   AmbulanceClass::AtScene;
	__asm        test   eax, eax;
	__asm        jne    _T2c5;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFA], 0;
	__asm        jne    _T2d5;
_T2c5:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jg     _T337;
_T2d5:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::CanIPullOut;
	__asm        test   eax, eax;
	__asm        je     _T337;
// LINE 381:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PullOut;
// LINE 385:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::UnPlaceCar;
// LINE 386:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        push   eax;
	__asm        call   S3MapRemoveCarInfo;
	__asm        add    esp, 4;
// LINE 387:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x298];
	__asm        push   eax;
	__asm        mov    ecx, gHospitals;
	__asm        call   Station::DecrementQuantityOfVehicleDispatched;
// LINE 391:
	this->emergencyState = 0x2;
// LINE 392:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 394:
	__asm        jmp    _T354;
_T337:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFA], 0;
	__asm        jne    _T354;
// LINE 396:
	this->emergencyState = 0x1;
// LINE 398:
_T354:
	__asm        jmp    _T3af;
// LINE 401:
_T359:
	__asm        push   0x191;
	__asm        push   0x5B7D9C;
	__asm        push   0x5B7DC0;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T37a;

	__asm        jmp    _T37a;
// LINE 402:
_T37a:
	__asm        jmp    _T3af;
// LINE 403:
	__asm        jmp    _T3af;
_T384:
	__asm        dec    dword ptr [ebp-0x18];
	__asm        cmp    dword ptr [ebp-0x18], 4;
	__asm        ja     _T359;

	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    _Switch_39b[0][eax*4];
// Switch pointers:
//   _T1d
//   _Tb2
//   _T359
//   _T12f
//   _T268
// LINE 404:
_T3af:
	return;
}

// FUNCTION: COPTER_D 0x00535fda
int32_t AmbulanceClass::AtScene() {
// LINE 410:
	return this->personDone;
// LINE 411:
}

// FUNCTION: COPTER_D 0x00535ff9
void AmbulanceClass::SetSaveData(/*packed*/ struct _AUTO_LOAD_SAVE *sd) {
// LINE 424:
	__asm        mov    eax, sd;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::SetSaveData;
// LINE 425:
	return;
}

// FUNCTION: COPTER_D 0x0053601d
void AmbulanceClass::LoadSaveData(/*packed*/ struct _AUTO_LOAD_SAVE *sd) {
// LINE 439:
	__asm        mov    eax, sd;
	__asm        test   byte ptr [eax], 2;
	__asm        jne    _T1d;
// LINE 441:
	return;
// LINE 445:
_T1d:
	__asm        mov    eax, sd;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::LoadSaveData;
// LINE 447:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x294];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T5c;
// LINE 453:
_T3a:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::LinkIconToCell;
// LINE 454:
	__asm        jmp    _T75;
// LINE 457:
	__asm        jmp    _T75;
// LINE 458:
	__asm        jmp    _T75;
_T5c:
	__asm        cmp    dword ptr [ebp-8], 1;
	__asm        jl     _T75;

	__asm        cmp    dword ptr [ebp-8], 4;
	__asm        jle    _T3a;

	__asm        jmp    _T75;
// LINE 460:
_T75:
	return;
}



// Contribution: 1:001350a0-001350b5 Module: 160, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001350c0-001350f8 Module: 160, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x005360c0
// AmbulanceClass::`scalar deleting destructor'



// Contribution: 2:00004280-000042a7 Module: 160, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for AmbulanceClass @ 0x00593280
//   00: AmbulanceClass::`scalar deleting destructor' @ 0x005360c0
//   01: AutomobileClass::PullOver @ 0x005048cd
//   02: EmergencyVehicleClass::AdjustSpeed @ 0x0054222e
//   03: EmergencyVehicleClass::PickTurnDir @ 0x00542373
//   04: AmbulanceClass::ItterateFSM @ 0x00535c21
//   05: AmbulanceClass::SetSaveData @ 0x00535ff9
//   06: AmbulanceClass::LoadSaveData @ 0x0053601d
//   07: EmergencyVehicleClass::BeamToWithinCameraRange @ 0x005360a0
//   08: AutomobileClass::BeamToLocation @ 0x005030aa
//   09: EmergencyVehicleClass::Reset @ 0x00542631
//   10 entries



// Contribution: 3:00020d18-00020dc5 Module: 160, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005b7d18
int32_t curAmbulances = 0;



// Contribution: 3:000949b8-000949cb Module: 160, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x0062b9b8
/*packed*/ class AmbulanceClass *ambulances[5];

