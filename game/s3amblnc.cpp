// Module: S3amblnc.obj
// Source: C:\Copter\source\game\S3amblnc.cpp
// autogenerated by simcopter_tool from PDB file

// Type: int32_t;

// Type: class AmbulanceClass (forward reference);
class AmbulanceClass : public EmergencyVehicleClass
{
public:
	void AmbulanceClass(const class AmbulanceClass&);
	void AmbulanceClass();
	virtual void ~AmbulanceClass();
	// calltype: NearC
	static class AmbulanceClass* CreateInstance(int32_t);
	// calltype: NearC
	static void DestroyInstance(class AmbulanceClass*);
	// calltype: NearC
	static unsigned char Dispatch(enum EmergencyType, enum EmergencyLevel, long, long);
	// calltype: NearC
	static int32_t IsThisAHospital(long, long);
	// calltype: NearC
	static int32_t IsThisAHospital(unsigned short);
	class AmbulanceClass operator=(const class AmbulanceClass&);
protected:
	virtual void ItterateFSM();
	virtual void SetSaveData(struct _AUTO_LOAD_SAVE*);
	virtual void LoadSaveData(struct _AUTO_LOAD_SAVE*);
private:
	int32_t AtScene();
};

// Type: void;

// Type: char *;

// Type: struct VRObjInfo;
struct VRObjInfo{
	int32_t Faces;
	int32_t Verts;
	int32_t Attribute;
	int32_t Radius;
	struct Point3d* ObjCenter;
	struct Point3d* VertsPtr;
	struct Xform3d* VertsXfm;
	struct Point3d* OrgVerts;
	int32_t[4][4]* Matrix;
};

// Type: enum EmergencyType;

// Type: enum EmergencyLevel;

// Type: long;

// Type: unsigned char;

// Type: unsigned short;

// Type: struct Point3d;
struct Point3d{
	int32_t x;
	int32_t y;
	int32_t z;
};

// Type: struct _AUTO_LOAD_SAVE (forward reference);

// Type: class EmergencyVehicleClass (forward reference);
class EmergencyVehicleClass : public AutomobileClass
{
		enum __unnamed {
			MAXIMUM_DISTANCE_FROM_BASE = 7,
			MAXIMUM_TIME_TO_EMERGENCY = 3932160,
			AMBULANCE_CAPACITY = 2,
		};
protected:
	struct _GridCoordinates baseLocation;
	struct _GridCoordinates emergencyLocation;
	enum EmergencyType emergencyType;
	long timeOfArrival;
	struct _DYOBJ_INST dispatchIcon;
	int32_t timeToEmergency;
	class AutomobileClass* dispatchTarget;
	unsigned char dispatchPath[256];
	unsigned char dispatchPathIndex;
	unsigned char dispatchPathLength;
	enum EmergencyLevel emergencyState;
	int32_t stationID;
	int32_t numberOfSeats;
public:
	void EmergencyVehicleClass(const class EmergencyVehicleClass&);
	void EmergencyVehicleClass();
	virtual void ~EmergencyVehicleClass();
	enum EmergencyLevel GetEmergencyState();
	void InitializePlacedVehicleForDispatch(struct Goal, struct Goal, struct Goal, struct Goal, struct _GridCoordinates, struct Goal, enum EmergencyType, enum EmergencyLevel);
	void InitializeStationVehicleForDispatch(int32_t, struct Goal, struct Goal, struct _GridCoordinates, struct Goal, struct Goal, struct _GridCoordinates, int32_t, struct Goal, enum EmergencyType, enum EmergencyLevel);
	// calltype: NearC
	static int32_t AreThereMoreSeats(struct _DYOBJ_INST*);
	// calltype: NearC
	static void FillSeat(struct _DYOBJ_INST*);
	// calltype: NearC
	static int32_t S3UpdateCar(int32_t, int32_t);
	// calltype: NearC
	static struct _DYOBJ_INST* S3GetCar(int32_t);
	void CancelEmergencyDispatch();
protected:
	// vtable: 36
	intro void Reset();
	virtual void AdjustSpeed();
	virtual enum TurnIndex PickTurnDir(struct Goal*);
	virtual void SetSaveData(struct _AUTO_LOAD_SAVE*);
	virtual void LoadSaveData(struct _AUTO_LOAD_SAVE*);
	void ArriveOnScene();
	void UnLinkIconFromCell(const struct _GridCoordinates);
	void LinkIconToCell(const struct _GridCoordinates);
	void PositionIcon();
	void GoBackToStation();
	void BuildPath(struct _RGIndex, struct _RGIndex);
	void TurnOnStrobe();
	void TurnOffStrobe();
	int32_t UpdateCar(int32_t);
	virtual void BeamToWithinCameraRange();
public:
	class EmergencyVehicleClass operator=(const class EmergencyVehicleClass&);
};

// Type: uint32_t;

// Type: class AutomobileClass;
class AutomobileClass{
		enum __unnamed {
			CAR_TYPES = 7,
			PERCENTAGE_OF_AUTO1 = 10,
			PERCENTAGE_OF_AUTO2 = 20,
			PERCENTAGE_OF_AUTO3 = 20,
			PERCENTAGE_OF_AUTO4 = 10,
			PERCENTAGE_OF_AUTO5 = 10,
			PERCENTAGE_OF_AUTO6 = 20,
			PERCENTAGE_OF_AUTO7 = 20,
			TOTAL_PERCENTAGE = 110,
		};
		enum __unnamed {
			NO_X_POSITION = -1,
			STARTING_X = 3,
			ENDING_X = 125,
			NO_Y_POSITION = -1,
			STARTING_Y = 3,
			ENDING_Y = 125,
		};
		enum IntersectionTypes {
			DEAD_END = 0,
			STRAIGHT_AHEAD = 1,
			LEFT_ONLY = 2,
			RIGHT_ONLY = 4,
			LEFT_OR_STRAIGHT = 3,
			LEFT_OR_RIGHT = 6,
			RIGHT_OR_STRAIGHT = 5,
			LEFT_STRAIGHT_OR_RIGHT = 7,
			DEAD_END_HIWAY = 16,
		};
		enum StoppedReasons {
			NO_REASON = 0,
			TRAFFIC = 1,
			STOPPED_TRAFFIC = 2,
			PERSON_IN_WAY = 3,
			AUTO_IN_WAY = 4,
			DEBRIS_IN_WAY = 5,
			UNIDENTIFIED_IN_WAY = 6,
			HELI_IN_WAY = 7,
			END_OF_ROAD = 8,
			END_OF_HIWAY = 9,
			INTERSECTION_FULL = 10,
			BEEN_PULLED_OVER = 11,
		};
		enum RoadTileOffsets {
			RD_CENTOFF = 851968,
			RD_EDGEOFF = 131072,
		};
		enum HiwayOffsets {
			HW_CENTOFF_LANE1 = 851968,
			HW_EDGEOFF_LANE1 = 131072,
			HW_CENTOFF_LANE2 = 851968,
			HW_EDGEOFF_LANE2 = 131072,
			HW_HEIGHT = 2031616,
		};
		enum PersonState {
			PS_IN_VEHICLE = 0,
			PS_OUT_OF_VEHICLE = 1,
			PS_BACK_IN_VEHICLE = 2,
			PS_GOT_AWAY = 3,
			PS_MISSION_OVER = 4,
		};
		enum __unnamed {
			CAR_RADIUS = 327680,
			COLLISION_SPACE = 655360,
			ROAD_SPEED = 2621440,
			ROAD_SLOWDOWN_FACTOR = 131072,
			HIWAY_SPEED = 6225920,
			HIWAY_SLOWDOWN_FACTOR = 327680,
			SPEED_VARIANCE = 262144,
			HIWAY_VARIANCE = 655360,
			MAX_TIME_TO_WAIT_FOR_TRAFFIC = 1310720,
			MAX_TIME_TO_WAIT_PULLED_OVER = 196608,
			MAX_TIME_TO_WAIT_BEFORE_BEAMING = 235,
		};
		enum Flags {
			AUTO_INITIALIZED = 1,
			AUTO_PLACED = 2,
			AUTO_TURNING = 4,
			AUTO_MAKING_UTURN = 8,
			AUTO_PULL_OVER = 16,
			AUTO_PULLING_OVER = 32,
			AUTO_PULLED_OVER = 64,
			AUTO_AT_DEAD_END = 128,
			AUTO_IN_INTERSECTION = 256,
			AUTO_ON_FIRE = 512,
			AUTO_JAMMED = 1024,
			AUTO_PULLING_OUT = 2048,
			AUTO_RIGHT_OF_WAY = 4096,
			AUTO_ON_HIWAY = 8192,
		};
public:
	int32_t flags;
	struct _DYOBJ_INST autoDynomitor;
	struct Goal goal;
private:
	static struct Point2d lastScannedLocation;
	int32_t DeltaFromCenter;
	int32_t stalledTimer;
	struct Point3d directionVector;
	int32_t remainingTime;
	int32_t desiredSpeed;
	int32_t desiredHiwaySpeed;
	int32_t beamDelay;
	int32_t beamTimer;
	int32_t m_cellBaseY;
	int32_t timePulledOver;
	enum DirectionTypes hiwaydir;
	struct _GridCoordinates currentLocation;
	struct _GridCoordinates nextLocation;
	struct _GridCoordinates northCell;
	struct _GridCoordinates southCell;
	struct _GridCoordinates eastCell;
	struct _GridCoordinates westCell;
protected:
	long carModel;
	int32_t speed;
	enum DirIndex2 prevDir;
	enum TurnIndex turnIndex;
	int32_t currDist;
	int32_t legOfTurn;
	struct Point3d* pDirVector;
	int32_t timeToLive;
	int32_t fireTime;
	long fireSeq;
	long missionId;
	struct _CELL_INFO* cptr;
	enum AutomobileClass::PersonState personState;
	int32_t spotlightHitCounter;
	int32_t IsCarPersistant();
	int32_t CanCarBeamToHiwayTile(unsigned short);
public:
	void AutomobileClass(const class AutomobileClass&);
	void AutomobileClass();
	// vtable: 0
	intro void ~AutomobileClass();
	// calltype: NearC
	static class AutomobileClass* CreateInstance(int32_t);
	// calltype: NearC
	static class AutomobileClass* GetAutoPointer(long);
	// calltype: NearC
	static void DestroyInstance(class AutomobileClass*);
	// calltype: NearC
	static void ItterateAll();
	// calltype: NearC
	static void ResetAll();
	// calltype: NearC
	static int32_t MissionStartFire(long, struct Point2d*);
	// calltype: NearC
	static int32_t MissionStartJam(long, struct Point2d*);
	// calltype: NearC
	static void MissionCancel(long);
	// calltype: NearC
	static void SetAllHeadlights(int32_t);
	void HitDispatch(long, struct _DYOBJ_INST*, long, long);
	int32_t AmIABadGuy();
	int32_t Initialize(int32_t);
	void WaterDouse(struct _DYOBJ_INST*);
	void IveBeenMegaphoned(long);
	void StartFire(long);
	void StartJam(long);
	void PullOver();
	void PullOut();
	int32_t CanIPullOut();
protected:
	void Itterate();
	// vtable: 4
	intro void AdjustSpeed();
	void Reset();
	// vtable: 8
	intro enum TurnIndex PickTurnDir(struct Goal*);
	void UnPlaceCar();
	void PullOverCiviliansInWay();
	// vtable: 12
	intro void ItterateFSM();
	int32_t InitializeInstance(int32_t);
	void LinkToCell(const struct _GridCoordinates&);
	int32_t AreCarsHeadOn(struct Point3d*);
	enum AutomobileClass::StoppedReasons CollisionCheck(int32_t, struct _DYOBJ_INST**);
	int32_t IsCarOutOfCameraRange();
	void TurnOffHeadlight();
	void TurnOnHeadlight();
	void SetHiwayDirection(unsigned short);
	int32_t DoHiwayTilesConnect(unsigned short, unsigned short, enum DirectionTypes);
	void AdjustCurrentHiwayPosition();
	void AdjustNextHiwayPosition();
	enum AutomobileClass::IntersectionTypes PickHiwayDir(struct _GridCoordinates&);
	void MakeAHiwayTurn(enum AutomobileClass::IntersectionTypes);
	void GoStraight();
	void TurnLeft();
	void TurnRight();
	void MoveForwardOnHiway();
	void DoDiagonalRoadFixup();
	// vtable: 16
	intro void BeamToWithinCameraRange();
	// vtable: 20
	intro int32_t BeamToLocation(const struct _GridCoordinates&);
	void MoveAuto(int32_t);
private:
	void UnlinkFromCell(const struct _GridCoordinates&);
	void TransitionBetweenGoals();
	void RunFireState();
	void RunJamState();
	void IveBeenSpotlighted(struct _DYOBJ_INST*);
	int32_t IsThisAnEmergencyVehicle();
public:
	class AutomobileClass operator=(const class AutomobileClass&);
};

// Type: class EmergencyVehicleClass;
class EmergencyVehicleClass : public AutomobileClass
{
		enum __unnamed {
			MAXIMUM_DISTANCE_FROM_BASE = 7,
			MAXIMUM_TIME_TO_EMERGENCY = 3932160,
			AMBULANCE_CAPACITY = 2,
		};
public:
	static int32_t fireSirenDist;
	static int32_t policeSirenDist;
	static int32_t ambSirenDist;
	static int32_t fireHoseDist;
protected:
	struct _GridCoordinates baseLocation;
	struct _GridCoordinates emergencyLocation;
	enum EmergencyType emergencyType;
	long timeOfArrival;
	struct _DYOBJ_INST dispatchIcon;
	int32_t timeToEmergency;
	class AutomobileClass* dispatchTarget;
	unsigned char dispatchPath[256];
	unsigned char dispatchPathIndex;
	unsigned char dispatchPathLength;
	enum EmergencyLevel emergencyState;
	int32_t stationID;
	int32_t numberOfSeats;
public:
	void EmergencyVehicleClass(const class EmergencyVehicleClass&);
	void EmergencyVehicleClass();
	virtual void ~EmergencyVehicleClass();
	enum EmergencyLevel GetEmergencyState();
	void InitializePlacedVehicleForDispatch(struct Goal, struct Goal, struct Goal, struct Goal, struct _GridCoordinates, struct Goal, enum EmergencyType);
	void InitializeStationVehicleForDispatch(int32_t, struct Goal, struct Goal, struct _GridCoordinates, struct Goal, struct Goal, struct _GridCoordinates, int32_t, struct Goal, enum EmergencyType);
	// calltype: NearC
	static int32_t AreThereMoreSeats(struct _DYOBJ_INST*);
	// calltype: NearC
	static void FillSeat(struct _DYOBJ_INST*);
	// calltype: NearC
	static void FinishedCarMission(struct _DYOBJ_INST*, int32_t);
protected:
	// vtable: 24
	intro void Reset();
	virtual void AdjustSpeed();
	virtual enum TurnIndex PickTurnDir(struct Goal*);
	void ArriveOnScene();
	void UnLinkIconFromCell(const struct _GridCoordinates);
	void LinkIconToCell(const struct _GridCoordinates);
	void PositionIcon();
	void GoBackToStation();
	void BuildPath(struct _RGIndex, struct _RGIndex);
	void TurnOnStrobe();
	void TurnOffStrobe();
	virtual void BeamToWithinCameraRange();
public:
	class EmergencyVehicleClass operator=(const class EmergencyVehicleClass&);
};



// Contribution: 1:001348a0-0013509d Module: 160, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x005358a0
int32_t CreateAmbulanceInstance(int32_t instanceID) {
// LINE 77:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        call   AmbulanceClass::CreateInstance;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T24;

	__asm        mov    eax, 1;
	__asm        jmp    _T26;
_T24:
	__asm        xor    eax, eax;
_T26:
	__asm        jmp    near ptr 0x005358CB;
// LINE 78:
}

// FUNCTION: COPTER_D 0x005358d0
void AmbulanceClass::AmbulanceClass() {

	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::EmergencyVehicleClass;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593280;
// LINE 84:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0x11F;
// LINE 85:
	__asm        jmp    near ptr 0x005358FC;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00535904
void AmbulanceClass::~AmbulanceClass() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593280;
	__asm        jmp    near ptr 0x0053591E;

	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::~EmergencyVehicleClass;
}

// FUNCTION: COPTER_D 0x0053592b
class AmbulanceClass* AmbulanceClass::CreateInstance(int32_t instanceID) {
	int32_t object;
	class AmbulanceClass* youveWonABrandNewCar;
	char * objectMemory;

// LINE 113:
	__asm        push   0x2A0;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T33;

	__asm        mov    ecx, [ebp-0x34];
	__asm        call   AmbulanceClass::AmbulanceClass;
	__asm        mov    youveWonABrandNewCar, eax;
	__asm        jmp    _T3a;
_T33:
	__asm        mov    youveWonABrandNewCar, 0;
// LINE 116:
_T3a:
	__asm        cmp    youveWonABrandNewCar, 0;
	__asm        je     _T1dd;
// LINE 119:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        mov    ecx, youveWonABrandNewCar;
	__asm        call   AutomobileClass::InitializeInstance;
	__asm        test   eax, eax;
	__asm        je     _T1b6;
// LINE 123:
// Block start:
	struct VRObjInfo oinfo;
	__asm        push   0x121;
	__asm        call   0x004D8821;
	__asm        add    esp, 4;
	__asm        mov    object, eax;
// LINE 124:
	__asm        mov    eax, object;
	__asm        push   eax;
	__asm        call   0x004D8520;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, G_dyobjmempool;
	__asm        push   eax;
	__asm        call   S2Alloc;
	__asm        add    esp, 8;
	__asm        mov    objectMemory, eax;
// LINE 126:
	__asm        cmp    objectMemory, 0;
	__asm        je     _T113;
// LINE 131:
	__asm        mov    eax, objectMemory;
	__asm        push   eax;
	__asm        mov    eax, object;
	__asm        push   eax;
	__asm        call   0x004D8570;
	__asm        add    esp, 8;
	__asm        mov    ecx, youveWonABrandNewCar;
	__asm        mov    [ecx+0x12E], eax;
// LINE 133:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        cmp    dword ptr [eax+0x12E], 0;
	__asm        je     _Td6;
// LINE 136:
	__asm        mov    eax, G_main_mp;
	__asm        push   eax;
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    eax, [eax+0x12E];
	__asm        push   eax;
	__asm        call   0x004D84DB;
	__asm        add    esp, 8;
// LINE 138:
	__asm        jmp    _T10e;
// LINE 141:
_Td6:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        cmp    dword ptr [eax+0x12E], 0;
	__asm        jne    _T102;

	__asm        push   0x8D;
	__asm        push   0x5B7D1C;
	__asm        push   0x5B7D40;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T107;
_T102:
	__asm        jmp    _T107;
// LINE 143:
_T107:
	__asm        xor    eax, eax;
	__asm        jmp    _T1e4;
// LINE 146:
_T10e:
	__asm        jmp    _T145;
// LINE 149:
_T113:
	__asm        cmp    objectMemory, 0;
	__asm        jne    _T139;

	__asm        push   0x95;
	__asm        push   0x5B7D68;
	__asm        push   0x5B7D8C;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T13e;
_T139:
	__asm        jmp    _T13e;
// LINE 151:
_T13e:
	__asm        xor    eax, eax;
	__asm        jmp    _T1e4;
// LINE 157:
_T145:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    word ptr [eax+0x134], 0;
// LINE 158:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    word ptr [eax+0x132], 0x21;
// LINE 159:
	__asm        lea    eax, oinfo.Faces;
	__asm        push   eax;
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    eax, [eax+0x12E];
	__asm        push   eax;
	__asm        call   0x004D8859;
	__asm        add    esp, 8;
// LINE 160:
	__asm        mov    eax, oinfo.Radius;
	__asm        mov    ecx, youveWonABrandNewCar;
	__asm        mov    [ecx+0x136], eax;
// LINE 161:
	__asm        push   0;
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    eax, [eax+0x12E];
	__asm        push   eax;
	__asm        call   0x004D6970;
	__asm        add    esp, 8;
// LINE 163:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    ecx, curAmbulances;
	__asm        mov    ambulances[0][ecx*4], eax;
	__asm        inc    curAmbulances;
// LINE 165:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        jmp    _T1e4;
// LINE 167:
// Block end:
	__asm        jmp    _T1dd;
// LINE 170:
_T1b6:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T1dd;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T1dd;
// LINE 176:
_T1dd:
	__asm        xor    eax, eax;
	__asm        jmp    _T1e4;
// LINE 177:
_T1e4:
}

// FUNCTION: COPTER_D 0x00535b14
unsigned char AmbulanceClass::Dispatch(enum EmergencyType responseType, enum EmergencyLevel responseLevel, long mapx, long mapy) {
// LINE 251:
	__asm        push   5;
	__asm        push   0x62B9B8;
	__asm        mov    eax, responseLevel;
	__asm        push   eax;
	__asm        mov    eax, responseType;
	__asm        push   eax;
	__asm        mov    eax, mapy;
	__asm        push   eax;
	__asm        mov    eax, mapx;
	__asm        push   eax;
	__asm        mov    ecx, gHospitals;
	__asm        call   Station::DispatchNearestAvailableVehicle;
	__asm        jmp    near ptr 0x00535B41;
// LINE 252:
}

// FUNCTION: COPTER_D 0x00535b46
int32_t AmbulanceClass::IsThisAHospital(unsigned short tileType) {
// LINE 258:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tileType);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0xD1;
	__asm        jne    _T23;

	__asm        mov    eax, 1;
	__asm        jmp    _T25;
_T23:
	__asm        xor    eax, eax;
_T25:
	__asm        jmp    near ptr 0x00535B70;
// LINE 259:
}

// FUNCTION: COPTER_D 0x00535b75
int32_t AmbulanceClass::IsThisAHospital(long mapX, long mapY) {
// LINE 265:
	__asm        cmp    mapX, 0;
	__asm        jl     _T37;

	__asm        cmp    mapY, 0;
	__asm        jl     _T37;

	__asm        cmp    mapX, 0x80;
	__asm        jge    _T37;

	__asm        cmp    mapY, 0x80;
	__asm        jl     _T41;
_T37:
	__asm        jmp    _Ta0;

	__asm        jmp    _T96;
_T41:
	__asm        mov    eax, mapX;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, mapY;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, mapX;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, mapY;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        movzx  eax, ax;
	__asm        cmp    eax, 0xD1;
	__asm        jne    _Ta0;

	__asm        jmp    _T96;

	__asm        mov    eax, [ebp-4];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0xD1;
	__asm        jne    _Ta0;
_T96:
	__asm        mov    eax, 1;
	__asm        jmp    _Ta2;
_Ta0:
	__asm        xor    eax, eax;
_Ta2:
	__asm        jmp    near ptr 0x00535C1C;
// LINE 266:
}

// FUNCTION: COPTER_D 0x00535c21
void AmbulanceClass::ItterateFSM() {
	struct Point3d vec;
	int32_t dist;

// LINE 292:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x294];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T384;
// LINE 296:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jle    _T40;
// LINE 297:
	__asm        xor    eax, eax;
	__asm        sub    eax, LoopTime;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0xFE], eax;
// LINE 299:
_T40:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jg     _Tad;

	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::CanIPullOut;
	__asm        test   eax, eax;
	__asm        je     _Tad;
// LINE 301:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PullOut;
// LINE 305:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::UnPlaceCar;
// LINE 306:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        push   eax;
	__asm        call   S3MapRemoveCarInfo;
	__asm        add    esp, 4;
// LINE 307:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x298];
	__asm        push   eax;
	__asm        mov    ecx, gHospitals;
	__asm        call   Station::DecrementQuantityOfVehicleDispatched;
// LINE 311:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 312:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 2;
// LINE 314:
_Tad:
	__asm        jmp    _T3af;
// LINE 317:
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::PositionIcon;
// LINE 319:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11A];
	__asm        cmp    ecx, edx;
	__asm        jne    _T122;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11B];
	__asm        cmp    ecx, edx;
	__asm        jne    _T122;
// LINE 322:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x298];
	__asm        push   eax;
	__asm        mov    ecx, gHospitals;
	__asm        call   Station::DecrementQuantityOfVehicleDispatched;
// LINE 323:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::UnPlaceCar;
// LINE 324:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        push   eax;
	__asm        call   S3MapRemoveCarInfo;
	__asm        add    esp, 4;
// LINE 325:
	__asm        jmp    _T3b4;
// LINE 328:
_T122:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::ItterateFSM;
// LINE 329:
	__asm        jmp    _T3af;
// LINE 333:
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::PositionIcon;
// LINE 334:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11C];
	__asm        cmp    ecx, edx;
	__asm        jne    _T204;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11D];
	__asm        cmp    ecx, edx;
	__asm        jne    _T204;

	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::CanIPullOver;
	__asm        test   eax, eax;
	__asm        je     _T204;
// LINE 336:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 337:
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::TurnOffStrobe;
// LINE 338:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::UnLinkIconFromCell;
// LINE 339:
	__asm        push   5;
	__asm        push   0xC;
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PlacePerson;
	__asm        test   eax, eax;
	__asm        je     _T1e5;
// LINE 341:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF6], 0;
// LINE 342:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFE], 0xF00000;
// LINE 343:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 5;
// LINE 345:
	__asm        jmp    _T1ff;
// LINE 348:
_T1e5:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFE], 0;
// LINE 349:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 1;
// LINE 352:
_T1ff:
	__asm        jmp    _T263;
// LINE 355:
_T204:
	__asm        mov    eax, ViewState.world_pos.x;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x24];
	__asm        mov    vec.x, eax;
// LINE 356:
	__asm        mov    eax, ViewState.world_pos.y;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x28];
	__asm        mov    vec.y, eax;
// LINE 357:
	__asm        mov    eax, ViewState.world_pos.z;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x2C];
	__asm        mov    vec.z, eax;
// LINE 358:
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        call   MTNormalize;
	__asm        add    esp, 4;
	__asm        mov    dist, eax;
// LINE 359:
	__asm        mov    eax, AutomobileClass::ambSirenDist;
	__asm        cmp    dist, eax;
	__asm        jge    _T253;
// LINE 360:
	__asm        mov    eax, dist;
	__asm        mov    AutomobileClass::ambSirenDist, eax;
// LINE 362:
_T253:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PullOverCiviliansInWay;
// LINE 363:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::ItterateFSM;
// LINE 365:
_T263:
	__asm        jmp    _T3af;
// LINE 368:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        jne    _T282;
// LINE 371:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::ItterateFSM;
// LINE 372:
	__asm        jmp    _T3af;
// LINE 375:
_T282:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jle    _T2a5;
// LINE 376:
	__asm        xor    eax, eax;
	__asm        sub    eax, LoopTime;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0xFE], eax;
// LINE 379:
_T2a5:
	__asm        mov    ecx, this;
	__asm        call   AmbulanceClass::AtScene;
	__asm        test   eax, eax;
	__asm        jne    _T2c5;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFA], 0;
	__asm        jne    _T2d5;
_T2c5:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jg     _T337;
_T2d5:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::CanIPullOut;
	__asm        test   eax, eax;
	__asm        je     _T337;
// LINE 381:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PullOut;
// LINE 385:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::UnPlaceCar;
// LINE 386:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        push   eax;
	__asm        call   S3MapRemoveCarInfo;
	__asm        add    esp, 4;
// LINE 387:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x298];
	__asm        push   eax;
	__asm        mov    ecx, gHospitals;
	__asm        call   Station::DecrementQuantityOfVehicleDispatched;
// LINE 391:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 2;
// LINE 392:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 394:
	__asm        jmp    _T354;
_T337:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFA], 0;
	__asm        jne    _T354;
// LINE 396:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 1;
// LINE 398:
_T354:
	__asm        jmp    _T3af;
// LINE 401:
_T359:
	__asm        push   0x191;
	__asm        push   0x5B7D9C;
	__asm        push   0x5B7DC0;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T37a;

	__asm        jmp    _T37a;
// LINE 402:
_T37a:
	__asm        jmp    _T3af;
// LINE 403:
	__asm        jmp    _T3af;
_T384:
	__asm        dec    dword ptr [ebp-0x18];
	__asm        cmp    dword ptr [ebp-0x18], 4;
	__asm        ja     _T359;

	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    SwitchPointers5463996[0][eax*4];
// Switch pointers
// LINE 404:
_T3af:
	__asm        jmp    _T3b4;
_T3b4:
}

// FUNCTION: COPTER_D 0x00535fda
int32_t AmbulanceClass::AtScene() {
// LINE 410:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF6];
	__asm        jmp    near ptr 0x00535FF4;
// LINE 411:
}

// FUNCTION: COPTER_D 0x00535ff9
void AmbulanceClass::SetSaveData(struct _AUTO_LOAD_SAVE* sd) {
// LINE 424:
	__asm        mov    eax, sd;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::SetSaveData;
// LINE 425:
	__asm        jmp    near ptr 0x00536016;
}

// FUNCTION: COPTER_D 0x0053601d
void AmbulanceClass::LoadSaveData(struct _AUTO_LOAD_SAVE* sd) {
// LINE 439:
	__asm        mov    eax, sd;
	__asm        test   byte ptr [eax], 2;
	__asm        jne    _T1d;
// LINE 441:
	__asm        jmp    _T7a;
// LINE 445:
_T1d:
	__asm        mov    eax, sd;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::LoadSaveData;
// LINE 447:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x294];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T5c;
// LINE 453:
_T3a:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::LinkIconToCell;
// LINE 454:
	__asm        jmp    _T75;
// LINE 457:
	__asm        jmp    _T75;
// LINE 458:
	__asm        jmp    _T75;
_T5c:
	__asm        cmp    dword ptr [ebp-8], 1;
	__asm        jl     _T75;

	__asm        cmp    dword ptr [ebp-8], 4;
	__asm        jle    _T3a;

	__asm        jmp    _T75;
// LINE 460:
_T75:
	__asm        jmp    _T7a;
_T7a:
}



// Contribution: 1:001350a0-001350b5 Module: 160, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001350c0-001350f8 Module: 160, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x005360c0
// AmbulanceClass::`scalar deleting destructor'



// Contribution: 2:00004280-000042a7 Module: 160, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593280
// ??_7AmbulanceClass@@6B@


// Contribution: 3:00020d18-00020dc5 Module: 160, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005b7d18
// curAmbulances


// Contribution: 3:000949b8-000949cb Module: 160, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x0062b9b8
// ambulances
