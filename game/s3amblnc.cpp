// Module: S3amblnc.obj
// Source: C:\Copter\source\game\S3amblnc.cpp
// autogenerated by simcopter_tool from PDB file

// Type: int32_t;
// Type: class AmbulanceClass (forward reference);
class AmbulanceClass : public AutomobileClass, public EmergencyVehicleClass
{
public:
	int32_t flags;
	struct _DYOBJ_INST autoDynomitor;
	struct Goal goal;
private:
	static struct Point2d lastScannedLocation;
	int32_t DeltaFromCenter;
	int32_t stalledTimer;
	struct Point3d directionVector;
	int32_t remainingTime;
	int32_t desiredSpeed;
	int32_t desiredHiwaySpeed;
	int32_t beamDelay;
	int32_t beamTimer;
	int32_t m_cellBaseY;
	int32_t timePulledOver;
	enum DirectionTypes hiwaydir;
	struct _GridCoordinates currentLocation;
	struct _GridCoordinates nextLocation;
	struct _GridCoordinates northCell;
	struct _GridCoordinates southCell;
	struct _GridCoordinates eastCell;
	struct _GridCoordinates westCell;
protected:
	long carModel;
	int32_t speed;
	enum DirIndex2 prevDir;
	enum TurnIndex turnIndex;
	int32_t currDist;
	int32_t legOfTurn;
	struct Point3d* pDirVector;
	int32_t timeToLive;
	int32_t fireTime;
	long fireSeq;
	long missionId;
	struct _CELL_INFO* cptr;
	enum AutomobileClass::PersonState personState;
	int32_t spotlightHitCounter;
	int32_t IsCarPersistant();
	int32_t CanCarBeamToHiwayTile(unsigned short);
public:
	void AmbulanceClass(const class AutomobileClass&);
	void AmbulanceClass();
	// vtable: 0
	intro void ~AutomobileClass();
	// calltype: NearC
	static class AutomobileClass* CreateInstance(int32_t);
	// calltype: NearC
	static class AutomobileClass* GetAutoPointer(long);
	// calltype: NearC
	static void DestroyInstance(class AutomobileClass*);
	// calltype: NearC
	static void ItterateAll();
	// calltype: NearC
	static void ResetAll();
	// calltype: NearC
	static int32_t MissionStartFire(long, struct Point2d*);
	// calltype: NearC
	static int32_t MissionStartJam(long, struct Point2d*);
	// calltype: NearC
	static void MissionCancel(long);
	// calltype: NearC
	static void SetAllHeadlights(int32_t);
	void HitDispatch(long, struct _DYOBJ_INST*, long, long);
	int32_t AmIABadGuy();
	int32_t Initialize(int32_t);
	void WaterDouse(struct _DYOBJ_INST*);
	void IveBeenMegaphoned(long);
	void StartFire(long);
	void StartJam(long);
	void PullOver();
	void PullOut();
	int32_t CanIPullOut();
protected:
	void Itterate();
	// vtable: 4
	intro void AdjustSpeed();
	void Reset();
	// vtable: 8
	intro enum TurnIndex PickTurnDir(struct Goal*);
	void UnPlaceCar();
	void PullOverCiviliansInWay();
	// vtable: 12
	intro void ItterateFSM();
	int32_t InitializeInstance(int32_t);
	void LinkToCell(const struct _GridCoordinates&);
	int32_t AreCarsHeadOn(struct Point3d*);
	enum AutomobileClass::StoppedReasons CollisionCheck(int32_t, struct _DYOBJ_INST**);
	int32_t IsCarOutOfCameraRange();
	void TurnOffHeadlight();
	void TurnOnHeadlight();
	void SetHiwayDirection(unsigned short);
	int32_t DoHiwayTilesConnect(unsigned short, unsigned short, enum DirectionTypes);
	void AdjustCurrentHiwayPosition();
	void AdjustNextHiwayPosition();
	enum AutomobileClass::IntersectionTypes PickHiwayDir(struct _GridCoordinates&);
	void MakeAHiwayTurn(enum AutomobileClass::IntersectionTypes);
	void GoStraight();
	void TurnLeft();
	void TurnRight();
	void MoveForwardOnHiway();
	void DoDiagonalRoadFixup();
	// vtable: 16
	intro void BeamToWithinCameraRange();
	// vtable: 20
	intro int32_t BeamToLocation(const struct _GridCoordinates&);
	void MoveAuto(int32_t);
private:
	void UnlinkFromCell(const struct _GridCoordinates&);
	void TransitionBetweenGoals();
	void RunFireState();
	void RunJamState();
	void IveBeenSpotlighted(struct _DYOBJ_INST*);
	int32_t IsThisAnEmergencyVehicle();
public:
	class AutomobileClass operator=(const class AutomobileClass&);
	static int32_t fireSirenDist;
	static int32_t policeSirenDist;
	static int32_t ambSirenDist;
	static int32_t fireHoseDist;
protected:
	struct _GridCoordinates baseLocation;
	struct _GridCoordinates emergencyLocation;
	enum EmergencyType emergencyType;
	long timeOfArrival;
	struct _DYOBJ_INST dispatchIcon;
	int32_t timeToEmergency;
	class AutomobileClass* dispatchTarget;
	unsigned char[256] dispatchPath;
	unsigned char dispatchPathIndex;
	unsigned char dispatchPathLength;
	enum EmergencyLevel emergencyState;
	int32_t stationID;
	int32_t numberOfSeats;
public:
	void AmbulanceClass(const class EmergencyVehicleClass&);
	void AmbulanceClass();
	virtual void ~EmergencyVehicleClass();
	enum EmergencyLevel GetEmergencyState();
	void InitializePlacedVehicleForDispatch(struct Goal, struct Goal, struct Goal, struct Goal, struct _GridCoordinates, struct Goal, enum EmergencyType);
	void InitializeStationVehicleForDispatch(int32_t, struct Goal, struct Goal, struct _GridCoordinates, struct Goal, struct Goal, struct _GridCoordinates, int32_t, struct Goal, enum EmergencyType);
	// calltype: NearC
	static int32_t AreThereMoreSeats(struct _DYOBJ_INST*);
	// calltype: NearC
	static void FillSeat(struct _DYOBJ_INST*);
	// calltype: NearC
	static void FinishedCarMission(struct _DYOBJ_INST*, int32_t);
protected:
	// vtable: 24
	intro void Reset();
	virtual void AdjustSpeed();
	virtual enum TurnIndex PickTurnDir(struct Goal*);
	void ArriveOnScene();
	void UnLinkIconFromCell(const struct _GridCoordinates);
	void LinkIconToCell(const struct _GridCoordinates);
	void PositionIcon();
	void GoBackToStation();
	void BuildPath(struct _RGIndex, struct _RGIndex);
	void TurnOnStrobe();
	void TurnOffStrobe();
	virtual void BeamToWithinCameraRange();
public:
	class EmergencyVehicleClass operator=(const class EmergencyVehicleClass&);
	void AmbulanceClass(const class AmbulanceClass&);
	void AmbulanceClass();
	virtual void ~AmbulanceClass();
	// calltype: NearC
	static class AmbulanceClass* CreateInstance(int32_t);
	// calltype: NearC
	static void DestroyInstance(class AmbulanceClass*);
	// calltype: NearC
	static unsigned char Dispatch(enum EmergencyType, enum EmergencyLevel, long, long);
	// calltype: NearC
	static int32_t AmbulanceClass(long, long);
	// calltype: NearC
	static int32_t AmbulanceClass(unsigned short);
	class AmbulanceClass operator=(const class AmbulanceClass&);
protected:
	virtual void ItterateFSM();
	virtual void SetSaveData(struct _AUTO_LOAD_SAVE*);
	virtual void LoadSaveData(struct _AUTO_LOAD_SAVE*);
private:
	int32_t AtScene();
};

// Type: void;
// Type: char *;
// Type: struct VRObjInfo;
class VRObjInfo{
public:
	int32_t Faces;
	int32_t Verts;
	int32_t Attribute;
	int32_t Radius;
	struct Point3d* ObjCenter;
	struct Point3d* VertsPtr;
	struct Xform3d* VertsXfm;
	struct Point3d* OrgVerts;
	int32_t[4][4]* Matrix;
};

// Type: enum EmergencyType;
// Type: enum EmergencyLevel;
// Type: long;
// Type: unsigned char;
// Type: unsigned short;
// Type: struct Point3d;
class Point3d{
public:
	int32_t x;
	int32_t y;
	int32_t z;
};

// Type: struct _AUTO_LOAD_SAVE (forward reference);
// Type: class EmergencyVehicleClass (forward reference);
public EmergencyVehicleClass
// Type: uint32_t;


// Contribution: 1:001348a0-0013509d Module: 160, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x005358a0
int32_t CreateAmbulanceInstance(int32_t instanceID) {
// LINE 76:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 77:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        call   0x0053592B;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005358C4;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x005358C6;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x005358CB;
// LINE 78:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x005358d0
void AmbulanceClass::AmbulanceClass() {
// LINE 83:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x005415D5;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593280;
// LINE 84:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0x11F;
// LINE 85:
	__asm        jmp    near ptr 0x005358FC;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00535904
void AmbulanceClass::~AmbulanceClass() {
// LINE 89:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593280;
	__asm        jmp    near ptr 0x0053591E;
	__asm        mov    ecx, this;
	__asm        call   0x0054163A;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0053592b
class AmbulanceClass* AmbulanceClass::CreateInstance(int32_t instanceID) {
	int32_t object;
	class AmbulanceClass* youveWonABrandNewCar;
	char * objectMemory;

// LINE 106:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x3C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 113:
	__asm        push   0x2A0;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x0053595E;
	__asm        mov    ecx, [ebp-0x34];
	__asm        call   0x005358D0;
	__asm        mov    youveWonABrandNewCar, eax;
	__asm        jmp    near ptr 0x00535965;
	__asm        mov    youveWonABrandNewCar, 0;
// LINE 116:
	__asm        cmp    youveWonABrandNewCar, 0;
	__asm        je     near ptr 0x00535B08;
// LINE 119:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        mov    ecx, youveWonABrandNewCar;
	__asm        call   0x00504337;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00535AE1;
// LINE 123:
// Block start:
	struct VRObjInfo oinfo;
	__asm        push   0x121;
	__asm        call   0x004D8821;
	__asm        add    esp, 4;
	__asm        mov    object, eax;
// LINE 124:
	__asm        mov    eax, object;
	__asm        push   eax;
	__asm        call   0x004D8520;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5B5E78];
	__asm        push   eax;
	__asm        call   0x004CB4AC;
	__asm        add    esp, 8;
	__asm        mov    objectMemory, eax;
// LINE 126:
	__asm        cmp    objectMemory, 0;
	__asm        je     near ptr 0x00535A3E;
// LINE 131:
	__asm        mov    eax, objectMemory;
	__asm        push   eax;
	__asm        mov    eax, object;
	__asm        push   eax;
	__asm        call   0x004D8570;
	__asm        add    esp, 8;
	__asm        mov    ecx, youveWonABrandNewCar;
	__asm        mov    [ecx+0x12E], eax;
// LINE 133:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        cmp    dword ptr [eax+0x12E], 0;
	__asm        je     near ptr 0x00535A01;
// LINE 136:
	__asm        mov    eax, ds:[0x5B4780];
	__asm        push   eax;
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    eax, [eax+0x12E];
	__asm        push   eax;
	__asm        call   0x004D84DB;
	__asm        add    esp, 8;
// LINE 138:
	__asm        jmp    near ptr 0x00535A39;
// LINE 141:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        cmp    dword ptr [eax+0x12E], 0;
	__asm        jne    near ptr 0x00535A2D;
	__asm        push   0x8D;
	__asm        push   0x5B7D1C;
	__asm        push   0x5B7D40;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00535A32;
	__asm        jmp    near ptr 0x00535A32;
// LINE 143:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00535B0F;
// LINE 146:
	__asm        jmp    near ptr 0x00535A70;
// LINE 149:
	__asm        cmp    objectMemory, 0;
	__asm        jne    near ptr 0x00535A64;
	__asm        push   0x95;
	__asm        push   0x5B7D68;
	__asm        push   0x5B7D8C;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00535A69;
	__asm        jmp    near ptr 0x00535A69;
// LINE 151:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00535B0F;
// LINE 157:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    word ptr [eax+0x134], 0;
// LINE 158:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    word ptr [eax+0x132], 0x21;
// LINE 159:
	__asm        lea    eax, oinfo.Faces;
	__asm        push   eax;
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    eax, [eax+0x12E];
	__asm        push   eax;
	__asm        call   0x004D8859;
	__asm        add    esp, 8;
// LINE 160:
	__asm        mov    eax, oinfo.Radius;
	__asm        mov    ecx, youveWonABrandNewCar;
	__asm        mov    [ecx+0x136], eax;
// LINE 161:
	__asm        push   0;
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    eax, [eax+0x12E];
	__asm        push   eax;
	__asm        call   0x004D6970;
	__asm        add    esp, 8;
// LINE 163:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    ecx, ds:[0x5B7D18];
	__asm        mov    [ecx*4+0x62B9B8], eax;
	__asm        inc    dword ptr ds:[0x5B7D18];
// LINE 165:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        jmp    near ptr 0x00535B0F;
// LINE 167:
// Block end:
	__asm        jmp    near ptr 0x00535B08;
// LINE 170:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x00535B08;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x00535B08;
// LINE 176:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00535B0F;
// LINE 177:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00535b14
unsigned char AmbulanceClass::Dispatch(enum EmergencyType responseType, enum EmergencyLevel responseLevel, long mapx, long mapy) {
// LINE 243:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 251:
	__asm        push   5;
	__asm        push   0x62B9B8;
	__asm        mov    eax, responseLevel;
	__asm        push   eax;
	__asm        mov    eax, responseType;
	__asm        push   eax;
	__asm        mov    eax, mapy;
	__asm        push   eax;
	__asm        mov    eax, mapx;
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x5C3820];
	__asm        call   0x0053AB93;
	__asm        jmp    near ptr 0x00535B41;
// LINE 252:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00535b46
int32_t AmbulanceClass::IsThisAHospital(unsigned short tileType) {
// LINE 257:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 258:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tileType);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0xD1;
	__asm        jne    near ptr 0x00535B69;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00535B6B;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00535B70;
// LINE 259:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00535b75
int32_t AmbulanceClass::IsThisAHospital(long mapX, long mapY) {
// LINE 264:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 265:
	__asm        cmp    mapX, 0;
	__asm        jl     near ptr 0x00535BAC;
	__asm        cmp    mapY, 0;
	__asm        jl     near ptr 0x00535BAC;
	__asm        cmp    mapX, 0x80;
	__asm        jge    near ptr 0x00535BAC;
	__asm        cmp    mapY, 0x80;
	__asm        jl     near ptr 0x00535BB6;
	__asm        jmp    near ptr 0x00535C15;
	__asm        jmp    near ptr 0x00535C0B;
	__asm        mov    eax, mapX;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        mov    ecx, mapY;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, mapX;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        mov    edx, mapY;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        movzx  eax, ax;
	__asm        cmp    eax, 0xD1;
	__asm        jne    near ptr 0x00535C15;
	__asm        jmp    near ptr 0x00535C0B;
	__asm        mov    eax, [ebp-4];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0xD1;
	__asm        jne    near ptr 0x00535C15;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00535C17;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00535C1C;
// LINE 266:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00535c21
void AmbulanceClass::ItterateFSM() {
	struct Point3d vec;
	int32_t dist;

// LINE 288:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 292:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x294];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00535FA5;
// LINE 296:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jle    near ptr 0x00535C61;
// LINE 297:
	__asm        xor    eax, eax;
	__asm        sub    eax, ds:[0x5B4760];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0xFE], eax;
// LINE 299:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jg     near ptr 0x00535CCE;
	__asm        mov    ecx, this;
	__asm        call   0x005049FE;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00535CCE;
// LINE 301:
	__asm        mov    ecx, this;
	__asm        call   0x00504B0A;
// LINE 305:
	__asm        mov    ecx, this;
	__asm        call   0x00503E6E;
// LINE 306:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        push   eax;
	__asm        call   0x00500FC3;
	__asm        add    esp, 4;
// LINE 307:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x298];
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x5C3820];
	__asm        call   0x0053AB2F;
// LINE 311:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 312:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 2;
// LINE 314:
	__asm        jmp    near ptr 0x00535FD0;
// LINE 317:
	__asm        mov    ecx, this;
	__asm        call   0x005422EE;
// LINE 319:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11A];
	__asm        cmp    ecx, edx;
	__asm        jne    near ptr 0x00535D43;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11B];
	__asm        cmp    ecx, edx;
	__asm        jne    near ptr 0x00535D43;
// LINE 322:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x298];
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x5C3820];
	__asm        call   0x0053AB2F;
// LINE 323:
	__asm        mov    ecx, this;
	__asm        call   0x00503E6E;
// LINE 324:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        push   eax;
	__asm        call   0x00500FC3;
	__asm        add    esp, 4;
// LINE 325:
	__asm        jmp    near ptr 0x00535FD5;
// LINE 328:
	__asm        mov    ecx, this;
	__asm        call   0x005022B0;
// LINE 329:
	__asm        jmp    near ptr 0x00535FD0;
// LINE 333:
	__asm        mov    ecx, this;
	__asm        call   0x005422EE;
// LINE 334:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11C];
	__asm        cmp    ecx, edx;
	__asm        jne    near ptr 0x00535E25;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11D];
	__asm        cmp    ecx, edx;
	__asm        jne    near ptr 0x00535E25;
	__asm        mov    ecx, this;
	__asm        call   0x005045B6;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00535E25;
// LINE 336:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 337:
	__asm        mov    ecx, this;
	__asm        call   0x005429D6;
// LINE 338:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00542461;
// LINE 339:
	__asm        push   5;
	__asm        push   0xC;
	__asm        mov    ecx, this;
	__asm        call   0x0050217C;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00535E06;
// LINE 341:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF6], 0;
// LINE 342:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFE], 0xF00000;
// LINE 343:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 5;
// LINE 345:
	__asm        jmp    near ptr 0x00535E20;
// LINE 348:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFE], 0;
// LINE 349:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 1;
// LINE 352:
	__asm        jmp    near ptr 0x00535E84;
// LINE 355:
	__asm        mov    eax, ds:[0x6C126C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x24];
	__asm        mov    vec.x, eax;
// LINE 356:
	__asm        mov    eax, ds:[0x6C1270];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x28];
	__asm        mov    vec.y, eax;
// LINE 357:
	__asm        mov    eax, ds:[0x6C1274];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x2C];
	__asm        mov    vec.z, eax;
// LINE 358:
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        call   0x004CA1E3;
	__asm        add    esp, 4;
	__asm        mov    dist, eax;
// LINE 359:
	__asm        mov    eax, ds:[0x608F70];
	__asm        cmp    dist, eax;
	__asm        jge    near ptr 0x00535E74;
// LINE 360:
	__asm        mov    eax, dist;
	__asm        mov    ds:[0x608F70], eax;
// LINE 362:
	__asm        mov    ecx, this;
	__asm        call   0x0050417D;
// LINE 363:
	__asm        mov    ecx, this;
	__asm        call   0x005022B0;
// LINE 365:
	__asm        jmp    near ptr 0x00535FD0;
// LINE 368:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        jne    near ptr 0x00535EA3;
// LINE 371:
	__asm        mov    ecx, this;
	__asm        call   0x005022B0;
// LINE 372:
	__asm        jmp    near ptr 0x00535FD0;
// LINE 375:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jle    near ptr 0x00535EC6;
// LINE 376:
	__asm        xor    eax, eax;
	__asm        sub    eax, ds:[0x5B4760];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0xFE], eax;
// LINE 379:
	__asm        mov    ecx, this;
	__asm        call   0x00535FDA;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00535EE6;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFA], 0;
	__asm        jne    near ptr 0x00535EF6;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jg     near ptr 0x00535F58;
	__asm        mov    ecx, this;
	__asm        call   0x005049FE;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00535F58;
// LINE 381:
	__asm        mov    ecx, this;
	__asm        call   0x00504B0A;
// LINE 385:
	__asm        mov    ecx, this;
	__asm        call   0x00503E6E;
// LINE 386:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        push   eax;
	__asm        call   0x00500FC3;
	__asm        add    esp, 4;
// LINE 387:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x298];
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x5C3820];
	__asm        call   0x0053AB2F;
// LINE 391:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 2;
// LINE 392:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 394:
	__asm        jmp    near ptr 0x00535F75;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFA], 0;
	__asm        jne    near ptr 0x00535F75;
// LINE 396:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 1;
// LINE 398:
	__asm        jmp    near ptr 0x00535FD0;
// LINE 401:
	__asm        push   0x191;
	__asm        push   0x5B7D9C;
	__asm        push   0x5B7DC0;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00535F9B;
	__asm        jmp    near ptr 0x00535F9B;
// LINE 402:
	__asm        jmp    near ptr 0x00535FD0;
// LINE 403:
	__asm        jmp    near ptr 0x00535FD0;
	__asm        dec    dword ptr [ebp-0x18];
	__asm        cmp    dword ptr [ebp-0x18], 4;
	__asm        ja     near ptr 0x00535F7A;
	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    dword ptr [eax*4+0x535FBC];
	__asm        pop    esp;
	__asm        push   ebx;
	__asm        add    bl, dl;
	__asm        pop    esp;
	__asm        push   ebx;
	__asm        add    [edx+0x5F], bh;
	__asm        push   ebx;
	__asm        add    [eax+0x5D], dl;
	__asm        push   ebx;
	__asm        (bad);
// LINE 404:
	__asm        jmp    near ptr 0x00535FD5;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00535fda
int32_t AmbulanceClass::AtScene() {
// LINE 409:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 410:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF6];
	__asm        jmp    near ptr 0x00535FF4;
// LINE 411:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00535ff9
void AmbulanceClass::SetSaveData(struct _AUTO_LOAD_SAVE* sd) {
// LINE 422:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 424:
	__asm        mov    eax, sd;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00542A75;
// LINE 425:
	__asm        jmp    near ptr 0x00536016;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0053601d
void AmbulanceClass::LoadSaveData(struct _AUTO_LOAD_SAVE* sd) {
// LINE 436:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 439:
	__asm        mov    eax, sd;
	__asm        test   byte ptr [eax], 2;
	__asm        jne    near ptr 0x0053603A;
// LINE 441:
	__asm        jmp    near ptr 0x00536097;
// LINE 445:
	__asm        mov    eax, sd;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00542B90;
// LINE 447:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x294];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00536079;
// LINE 453:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00542570;
// LINE 454:
	__asm        jmp    near ptr 0x00536092;
// LINE 457:
	__asm        jmp    near ptr 0x00536092;
// LINE 458:
	__asm        jmp    near ptr 0x00536092;
	__asm        cmp    dword ptr [ebp-8], 1;
	__asm        jl     near ptr 0x00536092;
	__asm        cmp    dword ptr [ebp-8], 4;
	__asm        jle    near ptr 0x00536057;
	__asm        jmp    near ptr 0x00536092;
// LINE 460:
	__asm        jmp    near ptr 0x00536097;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}



// Contribution: 1:001350a0-001350b5 Module: 160, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001350c0-001350f8 Module: 160, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x005360c0
// AmbulanceClass::`scalar deleting destructor'



// Contribution: 2:00004280-000042a7 Module: 160, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593280
// ??_7AmbulanceClass@@6B@


// Contribution: 3:00020d18-00020dc5 Module: 160, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005b7d18
// curAmbulances


// Contribution: 3:000949b8-000949cb Module: 160, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x0062b9b8
// ambulances
