// Module: S3rdgrph.obj
// Source: C:\Copter\Source\Game\S3rdgrph.cpp
// autogenerated by simcopter_tool from PDB file

// Type: void;

// Type: class RoadGraph (forward reference);
class RoadGraph{
public:
	Ptr to: struct RGVertex[128] RGArray;
	unsigned char[128] RGLength;
	void RoadGraph();
	void Init();
	void ~RoadGraph();
	void Destroy();
	int32_t GetRoadLength(const struct Goal*);
	void GetNextGoal(struct Goal*);
	void PickPlaceOnRoad(struct Goal*, int32_t, int32_t);
	struct Goal FindIntersections(struct _GridCoordinates, struct _GridCoordinates, struct Goal&, struct Goal&);
	unsigned char FindYIndexToVertex(int32_t, int32_t);
	void DumpBuildMap();
	void FindPlaceOnRoad(struct Goal&, struct _GridCoordinates);
	void SamePlaceOtherDirection(struct Goal*);
private:
	void FindEdges(int32_t, int32_t, struct RGVertex*);
	void FindNumRoadElements(struct RGVertex*, struct Edge*, enum DirIndex2, unsigned char, unsigned char, int32_t);
	void FindRoads(int32_t, int32_t, struct RGVertex*);
	void MakeRoad(struct RGVertex*, unsigned char, unsigned char, enum DirIndex2);
	void FindDeadEnds();
	int32_t IsThisADeadEnd(enum DirIndex2, unsigned char, unsigned char);
	enum DirIndex2 WhatDirAmIConnectedTo(enum DirIndex2, enum DirIndex2*, unsigned char, unsigned char);
	int32_t FindIntersection(struct Goal&, unsigned char, unsigned char, struct _GridCoordinates, struct _GridCoordinates, enum DirectionTypes);
	void ConnectHiwayRamp(int32_t, int32_t, unsigned short);
	int32_t SetElevation(unsigned short);
};

// Type: unsigned char;

// Type: int32_t;

// Type: struct RGVertex (forward reference);

// Type: struct Goal (forward reference);

// Type: struct Edge (forward reference);

// Type: enum SlopeIndex;

// Type: struct Road (forward reference);

// Type: enum DirectionTypes;

// Type: struct _GridCoordinates;
class _GridCoordinates{
public:
	unsigned char x;
	unsigned char y;
};

// Type: unsigned short;

// Type: struct Goal;
class Goal{
public:
	struct RGVertex* pRGV;
	int32_t elementIndex;
	int32_t gridIndex;
	struct _GridCoordinates gridLoc;
	enum DirIndex2 edgeIndex;
	enum DirIndex2 direction;
	int32_t distance;
	int32_t turnFlags;
	int32_t deadEndFlags;
	int32_t fElevated;
	enum SlopeIndex slope;
};

// Type: enum DirIndex2;

// Type: short;



// Contribution: 1:0013ad40-0014035d Module: 155, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0053bd40
void S3RoadGraphInit() {
// LINE 67:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 69:
	__asm        mov    ecx, 0x5C3828;
	__asm        call   0x0053BD6A;
// LINE 70:
	__asm        jmp    near ptr 0x0053BD55;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0053bd5a
void S3RoadGraphDestroy() {
// LINE 74:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 76:
	__asm        jmp    near ptr 0x0053BD65;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0053bd6a
void RoadGraph::Init() {
	unsigned char yindex;
	int32_t y;
	int32_t x;

// LINE 85:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x38;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 91:
	__asm        mov    x, 0;
	__asm        jmp    near ptr 0x0053BD85;
	__asm        inc    x;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x0053BDA5;
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [eax+ecx+0x200], 0;
	__asm        jmp    near ptr 0x0053BD82;
// LINE 96:
	__asm        mov    x, 0;
	__asm        jmp    near ptr 0x0053BDB4;
	__asm        inc    x;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x0053BF05;
// LINE 98:
// Block start:
	int32_t y;
	__asm        mov    y, 0;
	__asm        jmp    near ptr 0x0053BDD0;
	__asm        inc    y;
	__asm        cmp    y, 0x80;
	__asm        jge    near ptr 0x0053BF00;
// LINE 99:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053BEFB;
// LINE 101:
	__asm        cmp    x, 0;
	__asm        jl     near ptr 0x0053BE23;
	__asm        cmp    y, 0;
	__asm        jl     near ptr 0x0053BE23;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x0053BE23;
	__asm        cmp    y, 0x80;
	__asm        jl     near ptr 0x0053BE2E;
	__asm        mov    word ptr [ebp-0x28], 0;
	__asm        jmp    near ptr 0x0053BE66;
	__asm        mov    eax, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x28], ax;
	__asm        jmp    near ptr 0x0053BE66;
	__asm        mov    eax, [ebp-0x28];
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0053BE8A;
	__asm        jmp    near ptr 0x0053BECC;
	__asm        jmp    near ptr 0x0053BEEE;
	__asm        jmp    near ptr 0x0053BECC;
	__asm        jmp    near ptr 0x0053BEC2;
	__asm        cmp    dword ptr [ebp-0x34], 0x806B;
	__asm        jg     near ptr 0x0053BEEE;
	__asm        cmp    dword ptr [ebp-0x34], 0x806A;
	__asm        jge    near ptr 0x0053BECC;
	__asm        cmp    dword ptr [ebp-0x34], 0x61;
	__asm        jl     near ptr 0x0053BEEE;
	__asm        cmp    dword ptr [ebp-0x34], 0x6B;
	__asm        jle    near ptr 0x0053BECC;
	__asm        jmp    near ptr 0x0053BEEE;
	__asm        jmp    near ptr 0x0053BEEE;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x0053BEEE;
// LINE 103:
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        test   al, 1;
	__asm        je     near ptr 0x0053BEDD;
	__asm        jmp    near ptr 0x0053BDCD;
// LINE 104:
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        test   al, 1;
	__asm        je     near ptr 0x0053BEEE;
	__asm        jmp    near ptr 0x0053BDCD;
// LINE 107:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        inc    byte ptr [eax+ecx+0x200];
// LINE 109:
	__asm        jmp    near ptr 0x0053BDCD;
// Block end:
	__asm        jmp    near ptr 0x0053BDB1;
// LINE 113:
	__asm        mov    x, 0;
	__asm        jmp    near ptr 0x0053BF14;
	__asm        inc    x;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x0053BF58;
// LINE 114:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x200];
	__asm        mov    eax, edx;
	__asm        lea    ecx, [edx+edx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    eax, [eax+ecx*2];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x647200];
	__asm        push   eax;
	__asm        call   0x004CB4AC;
	__asm        add    esp, 8;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*4], eax;
	__asm        jmp    near ptr 0x0053BF11;
// LINE 118:
	__asm        mov    x, 0;
	__asm        jmp    near ptr 0x0053BF67;
	__asm        inc    x;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x0053C1E7;
// LINE 120:
	__asm        mov    y, 0;
	__asm        mov    yindex, 0;
	__asm        jmp    near ptr 0x0053BF87;
	__asm        inc    y;
	__asm        cmp    y, 0x80;
	__asm        jge    near ptr 0x0053C1E2;
// LINE 122:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053C1DD;
// LINE 126:
// Block start:
	int32_t i;
	__asm        cmp    x, 0;
	__asm        jl     near ptr 0x0053BFDA;
	__asm        cmp    y, 0;
	__asm        jl     near ptr 0x0053BFDA;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x0053BFDA;
	__asm        cmp    y, 0x80;
	__asm        jl     near ptr 0x0053BFE5;
	__asm        mov    word ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x0053C01D;
	__asm        mov    eax, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x20], ax;
	__asm        jmp    near ptr 0x0053C01D;
	__asm        mov    eax, [ebp-0x20];
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x0053C041;
	__asm        jmp    near ptr 0x0053C083;
	__asm        jmp    near ptr 0x0053C0A5;
	__asm        jmp    near ptr 0x0053C083;
	__asm        jmp    near ptr 0x0053C079;
	__asm        cmp    dword ptr [ebp-0x38], 0x806B;
	__asm        jg     near ptr 0x0053C0A5;
	__asm        cmp    dword ptr [ebp-0x38], 0x806A;
	__asm        jge    near ptr 0x0053C083;
	__asm        cmp    dword ptr [ebp-0x38], 0x61;
	__asm        jl     near ptr 0x0053C0A5;
	__asm        cmp    dword ptr [ebp-0x38], 0x6B;
	__asm        jle    near ptr 0x0053C083;
	__asm        jmp    near ptr 0x0053C0A5;
	__asm        jmp    near ptr 0x0053C0A5;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x0053C0A5;
// LINE 128:
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        test   al, 1;
	__asm        je     near ptr 0x0053C094;
	__asm        jmp    near ptr 0x0053BF84;
// LINE 129:
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        test   al, 1;
	__asm        je     near ptr 0x0053C0A5;
	__asm        jmp    near ptr 0x0053BF84;
// LINE 132:
	__asm        mov    al, reinterpret_cast<uint8_t>(x);
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx], al;
// LINE 133:
	__asm        mov    al, reinterpret_cast<uint8_t>(y);
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+1], al;
// LINE 134:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        and    byte ptr [eax+ecx+2], 0xF0;
// LINE 135:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        and    byte ptr [eax+ecx+2], 0xF;
// LINE 137:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0053C12F;
	__asm        inc    i;
	__asm        cmp    i, 4;
	__asm        jge    near ptr 0x0053C1DA;
// LINE 139:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    ecx, i;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        mov    word ptr [eax+ecx*2+8], 0;
// LINE 140:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    ecx, i;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        mov    word ptr [eax+ecx*2+6], 0;
// LINE 141:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    ecx, i;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        mov    byte ptr [eax+ecx*2+4], 0xFF;
// LINE 142:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    ecx, i;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        mov    byte ptr [eax+ecx*2+5], 0xFF;
// LINE 143:
	__asm        jmp    near ptr 0x0053C12C;
// LINE 145:
	__asm        inc    yindex;
// LINE 147:
// Block end:
	__asm        jmp    near ptr 0x0053BF84;
// LINE 148:
	__asm        jmp    near ptr 0x0053BF64;
// LINE 150:
	__asm        mov    ecx, this;
	__asm        call   0x0053D400;
// LINE 156:
	__asm        mov    x, 0;
	__asm        jmp    near ptr 0x0053C1FE;
	__asm        inc    x;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x0053C28B;
// LINE 158:
	__asm        mov    yindex, 0;
	__asm        jmp    near ptr 0x0053C217;
	__asm        inc    yindex;
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x200];
	__asm        xor    eax, eax;
	__asm        mov    al, yindex;
	__asm        cmp    edx, eax;
	__asm        jle    near ptr 0x0053C286;
// LINE 160:
// Block start:
	struct RGVertex* pRGV;
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    pRGV, eax;
// LINE 161:
	__asm        mov    eax, pRGV;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+1];
	__asm        push   edx;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D9D2;
// LINE 162:
// Block end:
	__asm        jmp    near ptr 0x0053C214;
// LINE 163:
	__asm        jmp    near ptr 0x0053C1FB;
// LINE 167:
	__asm        mov    x, 0;
	__asm        jmp    near ptr 0x0053C29A;
	__asm        inc    x;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x0053C327;
// LINE 169:
	__asm        mov    yindex, 0;
	__asm        jmp    near ptr 0x0053C2B3;
	__asm        inc    yindex;
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x200];
	__asm        xor    eax, eax;
	__asm        mov    al, yindex;
	__asm        cmp    edx, eax;
	__asm        jle    near ptr 0x0053C322;
// LINE 171:
// Block start:
	struct RGVertex* pRGV;
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    pRGV, eax;
// LINE 172:
	__asm        mov    eax, pRGV;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+1];
	__asm        push   edx;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054048D;
// LINE 173:
// Block end:
	__asm        jmp    near ptr 0x0053C2B0;
// LINE 174:
	__asm        jmp    near ptr 0x0053C297;
// LINE 191:
	__asm        jmp    near ptr 0x0053C32C;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0053c331
void RoadGraph::GetNextGoal(struct Goal* pGoal) {
	struct Edge* pEdge;
	enum SlopeIndex slope;
	struct RGVertex* pRGV;
	struct Road* pRoad;

// LINE 197:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 199:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax];
	__asm        mov    pRGV, eax;
// LINE 200:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0xE];
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, eax;
	__asm        add    eax, pRGV;
	__asm        add    eax, 4;
	__asm        mov    pEdge, eax;
// LINE 205:
	__asm        mov    eax, pEdge;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+4];
	__asm        test   ecx, ecx;
	__asm        jne    near ptr 0x0053C374;
// LINE 207:
	__asm        jmp    near ptr 0x0053C692;
	__asm        jmp    near ptr 0x0053C449;
// LINE 210:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, eax;
	__asm        mov    ecx, pEdge;
	__asm        add    eax, [ecx+6];
	__asm        mov    pRoad, eax;
// LINE 213:
	__asm        mov    eax, pRoad;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        mov    eax, pGoal;
	__asm        cmp    ecx, [eax+8];
	__asm        jle    near ptr 0x0053C3DC;
// LINE 217:
	__asm        mov    eax, pGoal;
	__asm        inc    dword ptr [eax+8];
// LINE 240:
	__asm        mov    eax, pGoal;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x0053C3D7;
// LINE 242:
	__asm        mov    eax, pEdge;
	__asm        mov    eax, [eax+6];
	__asm        mov    al, [eax];
	__asm        and    al, 3;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x12], ecx;
// LINE 244:
	__asm        mov    eax, pEdge;
	__asm        mov    eax, [eax+6];
	__asm        mov    al, [eax];
	__asm        shr    al, 2;
	__asm        and    al, 3;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x26], ecx;
// LINE 247:
	__asm        jmp    near ptr 0x0053C565;
// LINE 250:
	__asm        mov    eax, pRoad;
	__asm        mov    al, [eax];
	__asm        shr    al, 4;
	__asm        and    al, 1;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x22], ecx;
// LINE 251:
	__asm        mov    eax, pRoad;
	__asm        mov    al, [eax];
	__asm        shr    al, 2;
	__asm        and    al, 3;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x26], ecx;
// LINE 252:
	__asm        mov    eax, pGoal;
	__asm        inc    dword ptr [eax+4];
// LINE 255:
	__asm        mov    eax, pEdge;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+4];
	__asm        mov    eax, pGoal;
	__asm        cmp    ecx, [eax+4];
	__asm        jle    near ptr 0x0053C449;
// LINE 257:
	__asm        mov    eax, pGoal;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 258:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, pEdge;
	__asm        mov    ecx, [ecx+6];
	__asm        mov    al, [ecx+eax*2];
	__asm        and    al, 3;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x12], ecx;
// LINE 260:
	__asm        jmp    near ptr 0x0053C565;
// LINE 266:
IntersectionKludge:
// Block start:
	unsigned char yindex;
	unsigned char x;
	struct RGVertex* pRGV;
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax];
	__asm        mov    pRGV, eax;
// LINE 269:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0xE];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, pRGV;
	__asm        mov    al, [ecx+eax*2+4];
	__asm        mov    yindex, al;
// LINE 270:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0xE];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, pRGV;
	__asm        mov    al, [ecx+eax*2+5];
	__asm        mov    x, al;
// LINE 273:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    ecx, pGoal;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax];
	__asm        mov    pRGV, eax;
// LINE 274:
	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+3];
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x22], ecx;
// LINE 275:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x1A], ecx;
// LINE 276:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x1E], ecx;
// LINE 284:
	__asm        mov    eax, pGoal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xC];
	__asm        mov    eax, pRGV;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax];
	__asm        cmp    ecx, edx;
	__asm        je     near ptr 0x0053C509;
	__asm        push   0x11C;
	__asm        push   0x5B80F0;
	__asm        push   0x5B8114;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0053C50E;
	__asm        jmp    near ptr 0x0053C50E;
// LINE 285:
	__asm        mov    eax, pGoal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD];
	__asm        mov    eax, pRGV;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+1];
	__asm        cmp    ecx, edx;
	__asm        je     near ptr 0x0053C542;
	__asm        push   0x11D;
	__asm        push   0x5B8130;
	__asm        push   0x5B8154;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0053C547;
	__asm        jmp    near ptr 0x0053C547;
// LINE 293:
	__asm        mov    eax, pGoal;
	__asm        mov    dword ptr [eax+0xE], 0xFFFFFFFE;
// LINE 294:
	__asm        mov    eax, pGoal;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 299:
	__asm        mov    eax, pGoal;
	__asm        mov    dword ptr [eax+8], 0xFFFFFFFF;
// LINE 310:
// Block end:
	__asm        mov    eax, pGoal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xC];
	__asm        cmp    ecx, 0x80;
	__asm        jge    near ptr 0x0053C67D;
	__asm        mov    eax, pGoal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD];
	__asm        cmp    ecx, 0x80;
	__asm        jge    near ptr 0x0053C67D;
// LINE 312:
	__asm        mov    eax, pGoal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xC];
	__asm        mov    eax, [ecx*4+0x63A270];
	__asm        mov    ecx, pGoal;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+edx];
	__asm        mov    [ebp-0x24], ecx;
	__asm        jmp    near ptr 0x0053C651;
// LINE 314:
	__asm        mov    eax, pGoal;
	__asm        cmp    dword ptr [eax+0x12], 3;
	__asm        jne    near ptr 0x0053C5CA;
	__asm        mov    slope, 2;
	__asm        jmp    near ptr 0x0053C5D1;
	__asm        mov    slope, 0;
	__asm        jmp    near ptr 0x0053C678;
// LINE 315:
	__asm        mov    eax, pGoal;
	__asm        cmp    dword ptr [eax+0x12], 0;
	__asm        jne    near ptr 0x0053C5EF;
	__asm        mov    slope, 2;
	__asm        jmp    near ptr 0x0053C5F6;
	__asm        mov    slope, 0;
	__asm        jmp    near ptr 0x0053C678;
// LINE 316:
	__asm        mov    eax, pGoal;
	__asm        cmp    dword ptr [eax+0x12], 1;
	__asm        jne    near ptr 0x0053C614;
	__asm        mov    slope, 2;
	__asm        jmp    near ptr 0x0053C61B;
	__asm        mov    slope, 0;
	__asm        jmp    near ptr 0x0053C678;
// LINE 317:
	__asm        mov    eax, pGoal;
	__asm        cmp    dword ptr [eax+0x12], 2;
	__asm        jne    near ptr 0x0053C639;
	__asm        mov    slope, 2;
	__asm        jmp    near ptr 0x0053C640;
	__asm        mov    slope, 0;
	__asm        jmp    near ptr 0x0053C678;
// LINE 318:
	__asm        mov    slope, 1;
// LINE 319:
	__asm        jmp    near ptr 0x0053C678;
	__asm        dec    dword ptr [ebp-0x24];
	__asm        cmp    dword ptr [ebp-0x24], 3;
	__asm        ja     near ptr 0x0053C645;
	__asm        mov    eax, [ebp-0x24];
	__asm        jmp    dword ptr [eax*4+0x53C668];
	__asm        mov    cl, 0xC5;
	__asm        push   ebx;
	__asm        add    dh, dl;
	__asm        lds    edx, [ebx];
	__asm        sti;
	__asm        lds    edx, [ebx];
	__asm        and    dh, al;
	__asm        push   ebx;
	__asm        (bad);
// LINE 321:
	__asm        jmp    near ptr 0x0053C684;
// LINE 323:
	__asm        mov    slope, 1;
// LINE 325:
	__asm        mov    eax, slope;
	__asm        mov    ecx, pGoal;
	__asm        mov    [ecx+0x26], eax;
// LINE 327:
	__asm        jmp    near ptr 0x0053C697;
	__asm        jmp    near ptr 0x0053C449;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0053c69e
void RoadGraph::PickPlaceOnRoad(struct Goal* pGoal, int32_t x, int32_t y) {
	enum DirectionTypes tempDir;
	int32_t validTurn;
	unsigned char yindex;
	struct Edge* pEdge;
	struct RGVertex* pRGV;
	int32_t loopCounter;

// LINE 333:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x30;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 338:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        mov    yindex, al;
// LINE 339:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    pRGV, eax;
// LINE 344:
	__asm        mov    loopCounter, 0;
// LINE 350:
	__asm        call   0x0056EC50;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 3;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ecx, pGoal;
	__asm        mov    [ecx+0xE], eax;
// LINE 353:
	__asm        mov    eax, loopCounter;
	__asm        mov    [ebp-0x24], eax;
	__asm        inc    loopCounter;
	__asm        cmp    dword ptr [ebp-0x24], 0x10;
	__asm        jle    near ptr 0x0053C730;
// LINE 354:
	__asm        push   0x162;
	__asm        push   0x5B8170;
	__asm        push   0x5B8194;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0053C730;
	__asm        jmp    near ptr 0x0053C730;
// LINE 356:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0xE];
	__asm        mov    eax, [eax*4+0x593430];
	__asm        mov    tempDir, eax;
// LINE 357:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        and    ecx, tempDir;
	__asm        mov    validTurn, ecx;
// LINE 359:
	__asm        cmp    validTurn, 0;
	__asm        je     near ptr 0x0053C6E2;
// LINE 361:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0xE];
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, eax;
	__asm        add    eax, pRGV;
	__asm        add    eax, 4;
	__asm        mov    pEdge, eax;
// LINE 363:
	__asm        mov    eax, pEdge;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+4];
	__asm        test   ecx, ecx;
	__asm        je     near ptr 0x0053C913;
// LINE 366:
// Block start:
	int32_t i;
	struct Road* pRoad;
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0xE];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0053C7B4;
// LINE 368:
	__asm        dec    y;
	__asm        jmp    near ptr 0x0053C7D8;
// LINE 369:
	__asm        inc    x;
	__asm        jmp    near ptr 0x0053C7D8;
// LINE 370:
	__asm        inc    y;
	__asm        jmp    near ptr 0x0053C7D8;
// LINE 371:
	__asm        dec    x;
	__asm        jmp    near ptr 0x0053C7D8;
// LINE 372:
	__asm        jmp    near ptr 0x0053C7D8;
	__asm        cmp    dword ptr [ebp-0x2C], 3;
	__asm        ja     near ptr 0x0053C7D8;
	__asm        mov    eax, [ebp-0x2C];
	__asm        jmp    dword ptr [eax*4+0x53C7C8];
	__asm        pop    edi;
	__asm        push   ebx;
	__asm        add    [edi-0x60FFAC39], dl;
	__asm        (bad);
	__asm        (bad);
// LINE 375:
	__asm        call   0x0056EC50;
	__asm        mov    ecx, pEdge;
	__asm        xor    ebx, ebx;
	__asm        mov    bx, [ecx+4];
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ebx;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+4], edx;
// LINE 378:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, eax;
	__asm        mov    ecx, pEdge;
	__asm        add    eax, [ecx+6];
	__asm        mov    pRoad, eax;
// LINE 382:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0053C812;
	__asm        inc    i;
	__asm        mov    eax, pGoal;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+4], ecx;
	__asm        jle    near ptr 0x0053C8D5;
// LINE 384:
	__asm        mov    eax, pEdge;
	__asm        mov    eax, [eax+6];
	__asm        mov    ecx, i;
	__asm        mov    al, [eax+ecx*2];
	__asm        and    al, 3;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    [ebp-0x30], ecx;
	__asm        jmp    near ptr 0x0053C8AC;
// LINE 386:
	__asm        xor    eax, eax;
	__asm        mov    ecx, pEdge;
	__asm        mov    ecx, [ecx+6];
	__asm        mov    edx, i;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx*2+1];
	__asm        inc    ebx;
	__asm        sub    eax, ebx;
	__asm        neg    eax;
	__asm        sub    y, eax;
	__asm        jmp    near ptr 0x0053C8D0;
// LINE 387:
	__asm        mov    eax, pEdge;
	__asm        mov    eax, [eax+6];
	__asm        mov    ecx, i;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx*2+1];
	__asm        inc    edx;
	__asm        add    x, edx;
	__asm        jmp    near ptr 0x0053C8D0;
// LINE 388:
	__asm        mov    eax, pEdge;
	__asm        mov    eax, [eax+6];
	__asm        mov    ecx, i;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx*2+1];
	__asm        inc    edx;
	__asm        add    y, edx;
	__asm        jmp    near ptr 0x0053C8D0;
// LINE 389:
	__asm        xor    eax, eax;
	__asm        mov    ecx, pEdge;
	__asm        mov    ecx, [ecx+6];
	__asm        mov    edx, i;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx*2+1];
	__asm        inc    ebx;
	__asm        sub    eax, ebx;
	__asm        neg    eax;
	__asm        sub    x, eax;
	__asm        jmp    near ptr 0x0053C8D0;
// LINE 390:
	__asm        jmp    near ptr 0x0053C8D0;
	__asm        cmp    dword ptr [ebp-0x30], 3;
	__asm        ja     near ptr 0x0053C8D0;
	__asm        mov    eax, [ebp-0x30];
	__asm        jmp    dword ptr [eax*4+0x53C8C0];
	__asm        cmp    ecx, eax;
	__asm        push   ebx;
	__asm        add    [ecx-0x38], bl;
	__asm        push   ebx;
	__asm        add    [ecx-0x38], dh;
	__asm        push   ebx;
	__asm        (bad);
// LINE 391:
	__asm        jmp    near ptr 0x0053C80F;
// LINE 395:
	__asm        mov    eax, pRoad;
	__asm        mov    al, [eax];
	__asm        and    al, 3;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x12], ecx;
// LINE 396:
	__asm        mov    eax, pRoad;
	__asm        mov    al, [eax];
	__asm        shr    al, 4;
	__asm        and    al, 1;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x22], ecx;
// LINE 397:
	__asm        mov    eax, pRoad;
	__asm        mov    al, [eax];
	__asm        shr    al, 2;
	__asm        and    al, 3;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x26], ecx;
// LINE 399:
// Block end:
	__asm        jmp    near ptr 0x0053C941;
// LINE 401:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0xE];
	__asm        mov    ecx, pGoal;
	__asm        mov    [ecx+0x12], eax;
// LINE 402:
	__asm        mov    eax, pGoal;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 403:
	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+3];
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x22], ecx;
// LINE 404:
	__asm        mov    eax, pGoal;
	__asm        mov    dword ptr [eax+0x26], 1;
// LINE 407:
	__asm        mov    eax, pRGV;
	__asm        mov    ecx, pGoal;
	__asm        mov    [ecx], eax;
// LINE 408:
	__asm        mov    eax, pGoal;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 409:
	__asm        mov    al, reinterpret_cast<uint8_t>(x);
	__asm        mov    ecx, pGoal;
	__asm        mov    [ecx+0xC], al;
// LINE 410:
	__asm        mov    al, reinterpret_cast<uint8_t>(y);
	__asm        mov    ecx, pGoal;
	__asm        mov    [ecx+0xD], al;
// LINE 411:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x1A], ecx;
// LINE 412:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x1E], ecx;
// LINE 413:
	__asm        jmp    near ptr 0x0053C991;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0053c998
struct Goal RoadGraph::FindIntersections(struct _GridCoordinates startLoc, struct _GridCoordinates destLoc, struct Goal& goal1, struct Goal& goal2) {
	int32_t stepSize;
	int32_t Offset;
	unsigned short fromTile;
	struct Goal resultGoal;

// LINE 419:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x50;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 420:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0053C9DE;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0053C9DE;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0053C9DE;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x0053C9E9;
	__asm        mov    fromTile, 0;
	__asm        jmp    near ptr 0x0053CA29;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startLoc.y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startLoc.x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        xor    edx, edx;
	__asm        mov    dl, startLoc.y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    fromTile, ax;
	__asm        jmp    near ptr 0x0053CA29;
// LINE 426:
	__asm        mov    eax, goal1;
	__asm        mov    dword ptr [eax], 0;
// LINE 427:
	__asm        mov    eax, goal2;
	__asm        mov    dword ptr [eax], 0;
// LINE 428:
	__asm        lea    edi, resultGoal.pRGV;
	__asm        mov    esi, goal1;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 431:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053CB39;
// LINE 435:
// Block start:
	struct RGVertex* pRGV;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [eax+ecx*2];
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        mov    edx, this;
	__asm        add    ecx, [edx+eax*4];
	__asm        mov    pRGV, ecx;
	__asm        mov    eax, pRGV;
	__asm        mov    ecx, goal1;
	__asm        mov    [ecx], eax;
// LINE 436:
	__asm        mov    eax, goal1;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 437:
	__asm        mov    eax, goal1;
	__asm        mov    dword ptr [eax+8], 0xFFFFFFFF;
// LINE 438:
	__asm        mov    al, startLoc.x;
	__asm        mov    ecx, goal1;
	__asm        mov    [ecx+0xC], al;
// LINE 439:
	__asm        mov    al, startLoc.y;
	__asm        mov    ecx, goal1;
	__asm        mov    [ecx+0xD], al;
// LINE 440:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, goal1;
	__asm        mov    [eax+0x1A], ecx;
// LINE 441:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, goal1;
	__asm        mov    [eax+0x1E], ecx;
// LINE 442:
	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+3];
	__asm        mov    eax, goal1;
	__asm        mov    [eax+0x22], ecx;
// LINE 443:
	__asm        mov    eax, goal1;
	__asm        mov    dword ptr [eax+0x26], 1;
// LINE 446:
	__asm        mov    eax, goal1;
	__asm        mov    dword ptr [eax+0x16], 0;
// LINE 447:
	__asm        mov    eax, goal1;
	__asm        mov    dword ptr [eax+0x12], 0xFFFFFFFE;
// LINE 448:
	__asm        mov    eax, goal1;
	__asm        mov    dword ptr [eax+0xE], 0xFFFFFFFE;
// LINE 450:
	__asm        mov    edi, __$ReturnUdt;
	__asm        mov    esi, goal1;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    near ptr 0x0053D025;
// LINE 453:
// Block end:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x69;
	__asm        jne    near ptr 0x0053CB5D;
// LINE 455:
	__asm        mov    stepSize, 2;
// LINE 456:
	__asm        mov    Offset, 1;
// LINE 458:
	__asm        jmp    near ptr 0x0053CB6B;
// LINE 460:
	__asm        mov    stepSize, 1;
// LINE 461:
	__asm        mov    Offset, 0;
// LINE 469:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        cmp    eax, Offset;
	__asm        jle    near ptr 0x0053CC54;
// LINE 471:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0053CBB3;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        dec    eax;
	__asm        js     near ptr 0x0053CBB3;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0053CBB3;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x0053CBBE;
	__asm        mov    word ptr [ebp-0x40], 0;
	__asm        jmp    near ptr 0x0053CC00;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startLoc.y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx-1];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startLoc.x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        xor    edx, edx;
	__asm        mov    dl, startLoc.y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx-1];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x40], ax;
	__asm        jmp    near ptr 0x0053CC00;
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   0x0053964A;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053CC54;
// LINE 473:
	__asm        push   1;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        mov    eax, goal1;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D21B;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053CC54;
// LINE 474:
	__asm        lea    edi, resultGoal.pRGV;
	__asm        mov    esi, goal1;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 478:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        mov    ecx, 0x7F;
	__asm        sub    ecx, Offset;
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x0053CD99;
// LINE 480:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        add    eax, stepSize;
	__asm        js     near ptr 0x0053CCA7;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0053CCA7;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        add    eax, stepSize;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0053CCA7;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x0053CCB2;
	__asm        mov    word ptr [ebp-0x44], 0;
	__asm        jmp    near ptr 0x0053CCF8;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        add    eax, stepSize;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startLoc.y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startLoc.x;
	__asm        add    ecx, stepSize;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        xor    edx, edx;
	__asm        mov    dl, startLoc.y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x44], ax;
	__asm        jmp    near ptr 0x0053CCF8;
	__asm        push   2;
	__asm        push   2;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   0x0053964A;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053CD99;
// LINE 482:
	__asm        mov    eax, goal1;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x0053CD5F;
// LINE 484:
	__asm        push   2;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.y);
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        add    eax, stepSize;
	__asm        push   eax;
	__asm        mov    eax, goal2;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D21B;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053CD5A;
// LINE 485:
	__asm        lea    edi, resultGoal.pRGV;
	__asm        mov    esi, goal2;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 487:
	__asm        jmp    near ptr 0x0053CD99;
// LINE 489:
	__asm        push   2;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.y);
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        add    eax, stepSize;
	__asm        push   eax;
	__asm        mov    eax, goal1;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D21B;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053CD99;
// LINE 490:
	__asm        lea    edi, resultGoal.pRGV;
	__asm        mov    esi, goal1;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 495:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        mov    ecx, 0x7F;
	__asm        sub    ecx, Offset;
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x0053CEDE;
// LINE 497:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0053CDEC;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        add    eax, stepSize;
	__asm        js     near ptr 0x0053CDEC;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0053CDEC;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        add    eax, stepSize;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x0053CDF7;
	__asm        mov    word ptr [ebp-0x48], 0;
	__asm        jmp    near ptr 0x0053CE3D;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        add    eax, stepSize;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startLoc.x;
	__asm        mov    ecx, [ecx*4+0x638F70];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startLoc.x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        xor    edx, edx;
	__asm        mov    dl, startLoc.y;
	__asm        add    edx, stepSize;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x48], ax;
	__asm        jmp    near ptr 0x0053CE3D;
	__asm        push   4;
	__asm        push   4;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   0x0053964A;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053CEDE;
// LINE 499:
	__asm        mov    eax, goal1;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x0053CEA4;
// LINE 501:
	__asm        push   4;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        add    eax, stepSize;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        mov    eax, goal2;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D21B;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053CE9F;
// LINE 502:
	__asm        lea    edi, resultGoal.pRGV;
	__asm        mov    esi, goal2;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 504:
	__asm        jmp    near ptr 0x0053CEDE;
// LINE 506:
	__asm        push   4;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        add    eax, stepSize;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        mov    eax, goal1;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D21B;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053CEDE;
// LINE 507:
	__asm        lea    edi, resultGoal.pRGV;
	__asm        mov    esi, goal1;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 512:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        cmp    eax, Offset;
	__asm        jle    near ptr 0x0053D00E;
// LINE 514:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        dec    eax;
	__asm        js     near ptr 0x0053CF26;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0053CF26;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0053CF26;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x0053CF31;
	__asm        mov    word ptr [ebp-0x4C], 0;
	__asm        jmp    near ptr 0x0053CF71;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        mov    eax, [eax*4+0x638F6C];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startLoc.y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startLoc.x;
	__asm        mov    ecx, [ecx*4+0x63984C];
	__asm        xor    edx, edx;
	__asm        mov    dl, startLoc.y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x4C], ax;
	__asm        jmp    near ptr 0x0053CF71;
	__asm        push   8;
	__asm        push   8;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   0x0053964A;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053D00E;
// LINE 516:
	__asm        mov    eax, goal1;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x0053CFD6;
// LINE 518:
	__asm        push   8;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.y);
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, goal2;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D21B;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053CFD1;
// LINE 519:
	__asm        lea    edi, resultGoal.pRGV;
	__asm        mov    esi, goal2;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 521:
	__asm        jmp    near ptr 0x0053D00E;
// LINE 523:
	__asm        push   8;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.y);
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, goal1;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D21B;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053D00E;
// LINE 524:
	__asm        lea    edi, resultGoal.pRGV;
	__asm        mov    esi, goal1;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 529:
	__asm        lea    esi, resultGoal.pRGV;
	__asm        mov    edi, __$ReturnUdt;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    near ptr 0x0053D025;
// LINE 530:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x0053d02c
void RoadGraph::SamePlaceOtherDirection(struct Goal* pGoal) {
	enum DirIndex2 prevDir;
	struct _GridCoordinates here;

// LINE 553:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 554:
	__asm        mov    eax, pGoal;
	__asm        mov    ax, [eax+0xC];
	__asm        mov    reinterpret_cast<uint16_t>(here.x), ax;
// LINE 557:
	__asm        mov    eax, pGoal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD];
	__asm        push   ecx;
	__asm        mov    eax, pGoal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xC];
	__asm        push   ecx;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053D08E;
// LINE 560:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0x12];
	__asm        sub    eax, 2;
	__asm        and    eax, 3;
	__asm        mov    ecx, pGoal;
	__asm        mov    [ecx+0x12], eax;
// LINE 561:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0xE];
	__asm        sub    eax, 2;
	__asm        and    eax, 3;
	__asm        mov    ecx, pGoal;
	__asm        mov    [ecx+0xE], eax;
// LINE 562:
	__asm        jmp    near ptr 0x0053D160;
// LINE 567:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0x12];
	__asm        mov    prevDir, eax;
// LINE 570:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0x12];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0053D0D6;
// LINE 572:
	__asm        mov    eax, pGoal;
	__asm        dec    byte ptr [eax+0xD];
	__asm        jmp    near ptr 0x0053D0FA;
// LINE 573:
	__asm        mov    eax, pGoal;
	__asm        inc    byte ptr [eax+0xC];
	__asm        jmp    near ptr 0x0053D0FA;
// LINE 574:
	__asm        mov    eax, pGoal;
	__asm        inc    byte ptr [eax+0xD];
	__asm        jmp    near ptr 0x0053D0FA;
// LINE 575:
	__asm        mov    eax, pGoal;
	__asm        dec    byte ptr [eax+0xC];
	__asm        jmp    near ptr 0x0053D0FA;
// LINE 576:
	__asm        jmp    near ptr 0x0053D0FA;
	__asm        cmp    dword ptr [ebp-0x10], 3;
	__asm        ja     near ptr 0x0053D0FA;
	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    dword ptr [eax*4+0x53D0EA];
	__asm        movsd;
	__asm        rcl    byte ptr [ebx], 1;
	__asm        mov    al, 0xD0;
	__asm        push   ebx;
	__asm        add    [ebx-0x39FFAC30], bh;
	__asm        rcl    byte ptr [ebx], 1;
// LINE 578:
	__asm        mov    eax, pGoal;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053C331;
// LINE 580:
	__asm        mov    eax, pGoal;
	__asm        cmp    dword ptr [eax+0xE], 0xFFFFFFFE;
	__asm        jne    near ptr 0x0053D131;
// LINE 582:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0x12];
	__asm        sub    eax, 2;
	__asm        and    eax, 3;
	__asm        mov    ecx, pGoal;
	__asm        mov    [ecx+0x12], eax;
// LINE 583:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0x12];
	__asm        mov    ecx, pGoal;
	__asm        mov    [ecx+0xE], eax;
// LINE 586:
	__asm        mov    eax, pGoal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xC];
	__asm        xor    eax, eax;
	__asm        mov    al, here.x;
	__asm        cmp    ecx, eax;
	__asm        jne    near ptr 0x0053D08E;
	__asm        mov    eax, pGoal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD];
	__asm        xor    eax, eax;
	__asm        mov    al, here.y;
	__asm        cmp    ecx, eax;
	__asm        jne    near ptr 0x0053D08E;
// LINE 587:
	__asm        jmp    near ptr 0x0053D160;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0053d167
unsigned char RoadGraph::FindYIndexToVertex(int32_t x, int32_t y) {
	unsigned char yindex;

// LINE 596:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 597:
	__asm        mov    yindex, 0;
	__asm        jmp    near ptr 0x0053D17F;
	__asm        inc    yindex;
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x200];
	__asm        xor    eax, eax;
	__asm        mov    al, yindex;
	__asm        cmp    edx, eax;
	__asm        jle    near ptr 0x0053D1D0;
// LINE 598:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+1];
	__asm        cmp    edx, y;
	__asm        jne    near ptr 0x0053D1CB;
// LINE 599:
	__asm        mov    al, yindex;
	__asm        jmp    near ptr 0x0053D214;
// LINE 603:
	__asm        jmp    near ptr 0x0053D17C;
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x200];
	__asm        xor    eax, eax;
	__asm        mov    al, yindex;
	__asm        cmp    edx, eax;
	__asm        jg     near ptr 0x0053D208;
	__asm        push   0x25B;
	__asm        push   0x5B819C;
	__asm        push   0x5B81C0;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0053D20D;
	__asm        jmp    near ptr 0x0053D20D;
// LINE 605:
	__asm        mov    al, 0xFF;
	__asm        jmp    near ptr 0x0053D214;
// LINE 606:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0053d21b
int32_t RoadGraph::FindIntersection(struct Goal& goal, unsigned char x, unsigned char y, struct _GridCoordinates startLoc, struct _GridCoordinates destLoc, enum DirectionTypes currentDirType) {
	enum DirIndex2 returnDir;
	struct _GridCoordinates here;
	int32_t returnVal;
	enum DirIndex2 currentDir;
	enum DirIndex2 result;

// LINE 629:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 632:
	__asm        mov    eax, currentDirType;
	__asm        mov    eax, [eax*4+0x593440];
	__asm        mov    currentDir, eax;
// LINE 634:
	__asm        mov    returnVal, 0;
// LINE 636:
	__asm        mov    al, x;
	__asm        mov    here.x, al;
// LINE 637:
	__asm        mov    al, y;
	__asm        mov    here.y, al;
// LINE 639:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053D273;
// LINE 641:
	__asm        mov    eax, currentDir;
	__asm        mov    returnDir, eax;
// LINE 642:
	__asm        jmp    near ptr 0x0053D3F4;
	__asm        jmp    near ptr 0x0053D348;
// LINE 647:
	__asm        xor    eax, eax;
	__asm        mov    al, destLoc.x;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x0053D29E;
	__asm        xor    eax, eax;
	__asm        mov    al, destLoc.y;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x0053D29E;
// LINE 649:
	__asm        mov    returnVal, 1;
// LINE 655:
	__asm        mov    eax, reinterpret_cast<uint32_t>(here.y);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(here.x);
	__asm        push   eax;
	__asm        lea    eax, returnDir;
	__asm        push   eax;
	__asm        mov    eax, currentDir;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053E8B0;
	__asm        mov    result, eax;
// LINE 658:
	__asm        mov    eax, returnDir;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0053D2E9;
// LINE 660:
	__asm        dec    here.y;
	__asm        jmp    near ptr 0x0053D30D;
// LINE 661:
	__asm        inc    here.x;
	__asm        jmp    near ptr 0x0053D30D;
// LINE 662:
	__asm        inc    here.y;
	__asm        jmp    near ptr 0x0053D30D;
// LINE 663:
	__asm        dec    here.x;
	__asm        jmp    near ptr 0x0053D30D;
// LINE 664:
	__asm        jmp    near ptr 0x0053D30D;
	__asm        cmp    dword ptr [ebp-0x20], 3;
	__asm        ja     near ptr 0x0053D30D;
	__asm        mov    eax, [ebp-0x20];
	__asm        jmp    dword ptr [eax*4+0x53D2FD];
	__asm        (bad);
	__asm        int    3;
	__asm        rcl    byte ptr [ebx], cl;
	__asm        aam    0xD2;
	__asm        push   ebx;
	__asm        add    ah, bl;
	__asm        rcl    byte ptr [ebx], cl;
// LINE 668:
	__asm        xor    eax, eax;
	__asm        mov    al, here.x;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, destLoc.x;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x0053D338;
	__asm        xor    eax, eax;
	__asm        mov    al, here.y;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, destLoc.y;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x0053D338;
// LINE 670:
	__asm        mov    returnVal, 1;
// LINE 674:
	__asm        mov    eax, returnDir;
	__asm        mov    currentDir, eax;
// LINE 677:
	__asm        cmp    result, 0xFFFFFFFE;
	__asm        jne    near ptr 0x0053D3C7;
// LINE 682:
KlugeFirstStepIsAnIntersection:
// Block start:
	int32_t yindex;
	__asm        mov    eax, returnDir;
	__asm        sub    eax, 2;
	__asm        and    eax, 3;
	__asm        mov    ecx, goal;
	__asm        mov    [ecx+0x12], eax;
	__asm        mov    eax, goal;
	__asm        mov    eax, [eax+0x12];
	__asm        mov    ecx, goal;
	__asm        mov    [ecx+0xE], eax;
// LINE 683:
	__asm        xor    eax, eax;
	__asm        mov    al, here.y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, here.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    yindex, ecx;
// LINE 684:
	__asm        xor    eax, eax;
	__asm        mov    al, here.x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    ecx, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    ecx, goal;
	__asm        mov    [ecx], eax;
// LINE 685:
	__asm        mov    eax, goal;
	__asm        mov    dword ptr [eax+8], 0xFFFFFFFF;
// LINE 686:
	__asm        mov    eax, goal;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 688:
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        mov    eax, goal;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00541130;
// LINE 689:
	__asm        jmp    near ptr 0x0053D3EC;
// LINE 694:
// Block end:
	__asm        cmp    result, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0053D3E7;
// LINE 696:
	__asm        mov    eax, goal;
	__asm        cmp    dword ptr [eax], 0;
	__asm        jne    near ptr 0x0053D3E2;
	__asm        jmp    near ptr 0x0053D3E2;
// LINE 697:
	__asm        jmp    near ptr 0x0053D3EC;
// LINE 699:
	__asm        jmp    near ptr 0x0053D29E;
// LINE 701:
	__asm        mov    eax, returnVal;
	__asm        jmp    near ptr 0x0053D3F9;
// LINE 702:
	__asm        jmp    near ptr 0x0053D348;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x18;
}

// FUNCTION: COPTER_D 0x0053d400
void RoadGraph::FindDeadEnds() {
	int32_t stepSize;
	int32_t Offset;
	int32_t y;
	int32_t x;

// LINE 708:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x30;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 713:
	__asm        mov    x, 0;
	__asm        jmp    near ptr 0x0053D41B;
	__asm        inc    x;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x0053D8CB;
// LINE 715:
// Block start:
	int32_t yindex;
	__asm        mov    yindex, 0;
	__asm        jmp    near ptr 0x0053D437;
	__asm        inc    yindex;
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x200];
	__asm        cmp    edx, yindex;
	__asm        jle    near ptr 0x0053D8C6;
// LINE 717:
// Block start:
	unsigned short fromTile;
	struct RGVertex* pRGV;
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    ecx, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    pRGV, eax;
// LINE 719:
	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        mov    y, ecx;
// LINE 720:
	__asm        cmp    x, 0;
	__asm        jl     near ptr 0x0053D4A4;
	__asm        cmp    y, 0;
	__asm        jl     near ptr 0x0053D4A4;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x0053D4A4;
	__asm        cmp    y, 0x80;
	__asm        jl     near ptr 0x0053D4AF;
	__asm        mov    fromTile, 0;
	__asm        jmp    near ptr 0x0053D4E7;
	__asm        mov    eax, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    fromTile, ax;
	__asm        jmp    near ptr 0x0053D4E7;
// LINE 722:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x69;
	__asm        jne    near ptr 0x0053D50B;
// LINE 724:
	__asm        mov    stepSize, 2;
// LINE 725:
	__asm        mov    Offset, 1;
// LINE 727:
	__asm        jmp    near ptr 0x0053D519;
// LINE 729:
	__asm        mov    stepSize, 1;
// LINE 730:
	__asm        mov    Offset, 0;
// LINE 734:
	__asm        mov    eax, Offset;
	__asm        cmp    y, eax;
	__asm        jle    near ptr 0x0053D5FD;
	__asm        cmp    x, 0;
	__asm        jl     near ptr 0x0053D555;
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        js     near ptr 0x0053D555;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x0053D555;
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x0053D560;
	__asm        mov    word ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x0053D59A;
	__asm        mov    eax, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx-1];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx-1];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x20], ax;
	__asm        jmp    near ptr 0x0053D59A;
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   0x0053964A;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053D5FD;
	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        dec    ecx;
	__asm        push   ecx;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x0053D8D5;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053D5FD;
// LINE 736:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        or     ecx, 1;
	__asm        shl    cl, 4;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        or     cl, al;
	__asm        mov    eax, pRGV;
	__asm        mov    [eax+2], cl;
// LINE 740:
	__asm        mov    eax, 0x7F;
	__asm        sub    eax, Offset;
	__asm        cmp    eax, x;
	__asm        jle    near ptr 0x0053D6EE;
	__asm        mov    eax, x;
	__asm        add    eax, stepSize;
	__asm        js     near ptr 0x0053D642;
	__asm        cmp    y, 0;
	__asm        jl     near ptr 0x0053D642;
	__asm        mov    eax, x;
	__asm        add    eax, stepSize;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0053D642;
	__asm        cmp    y, 0x80;
	__asm        jl     near ptr 0x0053D64D;
	__asm        mov    word ptr [ebp-0x24], 0;
	__asm        jmp    near ptr 0x0053D68B;
	__asm        mov    eax, x;
	__asm        add    eax, stepSize;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        add    ecx, stepSize;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x24], ax;
	__asm        jmp    near ptr 0x0053D68B;
	__asm        push   2;
	__asm        push   2;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   0x0053964A;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053D6EE;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+1];
	__asm        push   eax;
	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        inc    ecx;
	__asm        push   ecx;
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x0053D8D5;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053D6EE;
// LINE 742:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        or     ecx, 2;
	__asm        shl    cl, 4;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        or     cl, al;
	__asm        mov    eax, pRGV;
	__asm        mov    [eax+2], cl;
// LINE 746:
	__asm        mov    eax, 0x7F;
	__asm        sub    eax, Offset;
	__asm        cmp    eax, y;
	__asm        jle    near ptr 0x0053D7DF;
	__asm        cmp    x, 0;
	__asm        jl     near ptr 0x0053D733;
	__asm        mov    eax, y;
	__asm        add    eax, stepSize;
	__asm        js     near ptr 0x0053D733;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x0053D733;
	__asm        mov    eax, y;
	__asm        add    eax, stepSize;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x0053D73E;
	__asm        mov    word ptr [ebp-0x28], 0;
	__asm        jmp    near ptr 0x0053D77C;
	__asm        mov    eax, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        mov    ecx, y;
	__asm        add    ecx, stepSize;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        mov    edx, y;
	__asm        add    edx, stepSize;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x28], ax;
	__asm        jmp    near ptr 0x0053D77C;
	__asm        push   4;
	__asm        push   4;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   0x0053964A;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053D7DF;
	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        inc    ecx;
	__asm        push   ecx;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax];
	__asm        push   eax;
	__asm        push   2;
	__asm        mov    ecx, this;
	__asm        call   0x0053D8D5;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053D7DF;
// LINE 748:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        or     ecx, 4;
	__asm        shl    cl, 4;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        or     cl, al;
	__asm        mov    eax, pRGV;
	__asm        mov    [eax+2], cl;
// LINE 752:
	__asm        mov    eax, Offset;
	__asm        cmp    x, eax;
	__asm        jle    near ptr 0x0053D8C1;
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        js     near ptr 0x0053D81B;
	__asm        cmp    y, 0;
	__asm        jl     near ptr 0x0053D81B;
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0053D81B;
	__asm        cmp    y, 0x80;
	__asm        jl     near ptr 0x0053D826;
	__asm        mov    word ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x0053D85E;
	__asm        mov    eax, x;
	__asm        mov    eax, [eax*4+0x638F6C];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, [ecx*4+0x63984C];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x2C], ax;
	__asm        jmp    near ptr 0x0053D85E;
	__asm        push   8;
	__asm        push   8;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   0x0053964A;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053D8C1;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+1];
	__asm        push   eax;
	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        dec    ecx;
	__asm        push   ecx;
	__asm        push   3;
	__asm        mov    ecx, this;
	__asm        call   0x0053D8D5;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053D8C1;
// LINE 754:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        or     ecx, 8;
	__asm        shl    cl, 4;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        or     cl, al;
	__asm        mov    eax, pRGV;
	__asm        mov    [eax+2], cl;
// LINE 756:
// Block end:
	__asm        jmp    near ptr 0x0053D434;
// LINE 757:
// Block end:
	__asm        jmp    near ptr 0x0053D418;
// LINE 758:
	__asm        jmp    near ptr 0x0053D8D0;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0053d8d5
int32_t RoadGraph::IsThisADeadEnd(enum DirIndex2 currentDir, unsigned char x, unsigned char y) {
	int32_t repeatCount;
	enum DirIndex2 returnStatus;
	enum DirIndex2 returnDir;
	enum DirIndex2 startingDir;

// LINE 762:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 763:
	__asm        mov    repeatCount, 0;
// LINE 766:
	__asm        mov    eax, currentDir;
	__asm        mov    startingDir, eax;
// LINE 769:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053D911;
// LINE 771:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0053D9CB;
// LINE 776:
	__asm        mov    eax, reinterpret_cast<uint32_t>(y);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(x);
	__asm        push   eax;
	__asm        lea    eax, returnDir;
	__asm        push   eax;
	__asm        mov    eax, currentDir;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053E8B0;
	__asm        mov    returnStatus, eax;
// LINE 778:
	__asm        cmp    returnStatus, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0053D940;
// LINE 779:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0053D9CB;
// LINE 781:
	__asm        cmp    returnStatus, 0xFFFFFFFE;
	__asm        jne    near ptr 0x0053D951;
// LINE 782:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0053D9CB;
// LINE 785:
	__asm        mov    eax, currentDir;
	__asm        cmp    returnDir, eax;
	__asm        jne    near ptr 0x0053D965;
// LINE 787:
	__asm        inc    repeatCount;
// LINE 789:
	__asm        jmp    near ptr 0x0053D972;
// LINE 791:
	__asm        mov    repeatCount, 0;
// LINE 792:
	__asm        mov    eax, returnDir;
	__asm        mov    currentDir, eax;
// LINE 795:
	__asm        mov    eax, currentDir;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0053D9A2;
// LINE 797:
	__asm        dec    y;
	__asm        jmp    near ptr 0x0053D9C6;
// LINE 798:
	__asm        inc    x;
	__asm        jmp    near ptr 0x0053D9C6;
// LINE 799:
	__asm        inc    y;
	__asm        jmp    near ptr 0x0053D9C6;
// LINE 800:
	__asm        dec    x;
	__asm        jmp    near ptr 0x0053D9C6;
// LINE 801:
	__asm        jmp    near ptr 0x0053D9C6;
	__asm        cmp    dword ptr [ebp-0x18], 3;
	__asm        ja     near ptr 0x0053D9C6;
	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    dword ptr [eax*4+0x53D9B6];
	__asm        jge    short 0x0053D991;
	__asm        push   ebx;
	__asm        add    [ebp-0x72FFAC27], al;
	__asm        fst    dword ptr [ebx];
	__asm        xchg   ebp, eax;
	__asm        fst    dword ptr [ebx];
// LINE 802:
	__asm        jmp    near ptr 0x0053D911;
// LINE 803:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0053d9d2
void RoadGraph::FindEdges(int32_t x, int32_t y, struct RGVertex* pRGV) {
	 // Switch table at 0x0053e04e
	 // Switch table at 0x0053dd66
	int32_t stepSize;
	int32_t Offset;
	struct Edge* pEdge;
	unsigned short fromTile;

// LINE 808:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x3C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 810:
	__asm        cmp    x, 0;
	__asm        jl     near ptr 0x0053DA0C;
	__asm        cmp    y, 0;
	__asm        jl     near ptr 0x0053DA0C;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x0053DA0C;
	__asm        cmp    y, 0x80;
	__asm        jl     near ptr 0x0053DA17;
	__asm        mov    fromTile, 0;
	__asm        jmp    near ptr 0x0053DA4F;
	__asm        mov    eax, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    fromTile, ax;
	__asm        jmp    near ptr 0x0053DA4F;
// LINE 815:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0053DA7C;
	__asm        mov    eax, pRGV;
	__asm        mov    byte ptr [eax+3], 1;
	__asm        jmp    near ptr 0x0053DAD1;
	__asm        mov    eax, pRGV;
	__asm        mov    byte ptr [eax+3], 0;
	__asm        jmp    near ptr 0x0053DAD1;
	__asm        jmp    near ptr 0x0053DAC8;
	__asm        cmp    dword ptr [ebp-0x34], 0x6B;
	__asm        jg     near ptr 0x0053DAA9;
	__asm        cmp    dword ptr [ebp-0x34], 0x61;
	__asm        jge    near ptr 0x0053DA5F;
	__asm        cmp    dword ptr [ebp-0x34], 0x49;
	__asm        jl     near ptr 0x0053DA6B;
	__asm        cmp    dword ptr [ebp-0x34], 0x50;
	__asm        jle    near ptr 0x0053DA5F;
	__asm        jmp    near ptr 0x0053DA6B;
	__asm        cmp    dword ptr [ebp-0x34], 0x806A;
	__asm        jl     near ptr 0x0053DA6B;
	__asm        cmp    dword ptr [ebp-0x34], 0x806B;
	__asm        jle    near ptr 0x0053DA5F;
	__asm        jmp    near ptr 0x0053DA6B;
	__asm        mov    al, [ebp-0x14];
	__asm        mov    ecx, pRGV;
	__asm        mov    [ecx+3], al;
// LINE 817:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x69;
	__asm        jne    near ptr 0x0053DAF5;
// LINE 819:
	__asm        mov    stepSize, 2;
// LINE 820:
	__asm        mov    Offset, 1;
// LINE 822:
	__asm        jmp    near ptr 0x0053DB03;
// LINE 824:
	__asm        mov    stepSize, 1;
// LINE 825:
	__asm        mov    Offset, 0;
// LINE 833:
	__asm        mov    eax, y;
	__asm        cmp    Offset, eax;
	__asm        jge    near ptr 0x0053DDDE;
// LINE 835:
	__asm        cmp    x, 0;
	__asm        jl     near ptr 0x0053DB3F;
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        js     near ptr 0x0053DB3F;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x0053DB3F;
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x0053DB4A;
	__asm        mov    word ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x0053DB84;
	__asm        mov    eax, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx-1];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx-1];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x18], ax;
	__asm        jmp    near ptr 0x0053DB84;
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   0x0053964A;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053DDDE;
// LINE 837:
	__asm        mov    eax, pRGV;
	__asm        add    eax, 4;
	__asm        mov    pEdge, eax;
// LINE 838:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x0053DC42;
	__asm        mov    dword ptr [ebp-0x28], 8;
	__asm        jmp    near ptr 0x0053DD7B;
	__asm        mov    dword ptr [ebp-0x28], 0xA;
	__asm        jmp    near ptr 0x0053DD7B;
	__asm        mov    dword ptr [ebp-0x28], 8;
	__asm        jmp    near ptr 0x0053DD7B;
	__asm        mov    dword ptr [ebp-0x28], 4;
	__asm        jmp    near ptr 0x0053DD7B;
	__asm        mov    dword ptr [ebp-0x28], 8;
	__asm        jmp    near ptr 0x0053DD7B;
	__asm        mov    dword ptr [ebp-0x28], 8;
	__asm        jmp    near ptr 0x0053DD7B;
	__asm        mov    dword ptr [ebp-0x28], 0xA;
	__asm        jmp    near ptr 0x0053DD7B;
	__asm        mov    dword ptr [ebp-0x28], 8;
	__asm        jmp    near ptr 0x0053DD7B;
	__asm        mov    dword ptr [ebp-0x28], 0xA;
	__asm        jmp    near ptr 0x0053DD7B;
	__asm        mov    dword ptr [ebp-0x28], 4;
	__asm        jmp    near ptr 0x0053DD7B;
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    near ptr 0x0053DD7B;
	__asm        jmp    near ptr 0x0053DD7B;
	__asm        cmp    dword ptr [ebp-0x38], 0x2B;
	__asm        jg     near ptr 0x0053DC6F;
	__asm        cmp    dword ptr [ebp-0x38], 0x27;
	__asm        jge    near ptr 0x0053DBC5;
	__asm        cmp    dword ptr [ebp-0x38], 0x1D;
	__asm        jl     near ptr 0x0053DC31;
	__asm        cmp    dword ptr [ebp-0x38], 0x26;
	__asm        jle    near ptr 0x0053DBB9;
	__asm        jmp    near ptr 0x0053DC31;
	__asm        cmp    dword ptr [ebp-0x38], 0x50;
	__asm        jg     near ptr 0x0053DC9C;
	__asm        cmp    dword ptr [ebp-0x38], 0x49;
	__asm        jge    near ptr 0x0053DBDD;
	__asm        cmp    dword ptr [ebp-0x38], 0x3F;
	__asm        jl     near ptr 0x0053DC31;
	__asm        cmp    dword ptr [ebp-0x38], 0x46;
	__asm        jle    near ptr 0x0053DBD1;
	__asm        jmp    near ptr 0x0053DC31;
	__asm        cmp    dword ptr [ebp-0x38], 0x59;
	__asm        jg     near ptr 0x0053DCC9;
	__asm        cmp    dword ptr [ebp-0x38], 0x57;
	__asm        jge    near ptr 0x0053DBF5;
	__asm        cmp    dword ptr [ebp-0x38], 0x51;
	__asm        jl     near ptr 0x0053DC31;
	__asm        cmp    dword ptr [ebp-0x38], 0x56;
	__asm        jle    near ptr 0x0053DBE9;
	__asm        jmp    near ptr 0x0053DC31;
	__asm        cmp    dword ptr [ebp-0x38], 0x68;
	__asm        jg     near ptr 0x0053DCF6;
	__asm        cmp    dword ptr [ebp-0x38], 0x61;
	__asm        jge    near ptr 0x0053DC0D;
	__asm        cmp    dword ptr [ebp-0x38], 0x5D;
	__asm        jl     near ptr 0x0053DC31;
	__asm        cmp    dword ptr [ebp-0x38], 0x60;
	__asm        jle    near ptr 0x0053DC01;
	__asm        jmp    near ptr 0x0053DC31;
	__asm        cmp    dword ptr [ebp-0x38], 0x8056;
	__asm        jg     near ptr 0x0053DD33;
	__asm        cmp    dword ptr [ebp-0x38], 0x8051;
	__asm        jge    near ptr 0x0053DBE9;
	__asm        cmp    dword ptr [ebp-0x38], 0x69;
	__asm        je     near ptr 0x0053DC19;
	__asm        cmp    dword ptr [ebp-0x38], 0x6A;
	__asm        jl     near ptr 0x0053DC31;
	__asm        cmp    dword ptr [ebp-0x38], 0x6B;
	__asm        jle    near ptr 0x0053DC25;
	__asm        jmp    near ptr 0x0053DC31;
	__asm        sub    dword ptr [ebp-0x38], 0x8057;
	__asm        cmp    dword ptr [ebp-0x38], 0x14;
	__asm        ja     near ptr 0x0053DC31;
	__asm        mov    eax, [ebp-0x38];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x53DD66];
	__asm        jmp    dword ptr [ecx*4+0x53DD56];
	__asm        cmc;
	__asm        fist   dword ptr [ebx];
	__asm        add    esp, ebx;
	__asm        push   ebx;
	__asm        add    ds:[0x310053DC], ah;
	__asm        fcom   qword ptr [ebx];
	__asm        add    [eax], al;
	__asm        add    [ebx], al;
	__asm        add    eax, [ebx];
	__asm        add    [ecx], eax;
	__asm        add    [ecx], eax;
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [edx];
	__asm        add    cl, [ebx-0x36CC07BB];
	__asm        mov    cx, [eax+2];
	__asm        add    ecx, [ebp-0x28];
	__asm        mov    eax, pEdge;
	__asm        mov    [eax+2], cx;
// LINE 839:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        or     ecx, 1;
	__asm        and    cl, 0xF;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF0;
	__asm        or     cl, al;
	__asm        mov    eax, pRGV;
	__asm        mov    [eax+2], cl;
// LINE 840:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        and    ecx, 1;
	__asm        push   ecx;
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, pEdge;
	__asm        push   eax;
	__asm        mov    eax, pRGV;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053E305;
// LINE 844:
	__asm        mov    eax, 0x7F;
	__asm        sub    eax, Offset;
	__asm        cmp    eax, x;
	__asm        jle    near ptr 0x0053E0C6;
// LINE 846:
	__asm        mov    eax, stepSize;
	__asm        add    eax, x;
	__asm        js     near ptr 0x0053DE23;
	__asm        cmp    y, 0;
	__asm        jl     near ptr 0x0053DE23;
	__asm        mov    eax, stepSize;
	__asm        add    eax, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0053DE23;
	__asm        cmp    y, 0x80;
	__asm        jl     near ptr 0x0053DE2E;
	__asm        mov    word ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x0053DE6C;
	__asm        mov    eax, stepSize;
	__asm        add    eax, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, stepSize;
	__asm        add    ecx, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x1C], ax;
	__asm        jmp    near ptr 0x0053DE6C;
	__asm        push   2;
	__asm        push   2;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   0x0053964A;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053E0C6;
// LINE 848:
	__asm        mov    eax, pRGV;
	__asm        add    eax, 0xE;
	__asm        mov    pEdge, eax;
// LINE 849:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0053DF2A;
	__asm        mov    dword ptr [ebp-0x2C], 8;
	__asm        jmp    near ptr 0x0053E063;
	__asm        mov    dword ptr [ebp-0x2C], 0xA;
	__asm        jmp    near ptr 0x0053E063;
	__asm        mov    dword ptr [ebp-0x2C], 8;
	__asm        jmp    near ptr 0x0053E063;
	__asm        mov    dword ptr [ebp-0x2C], 4;
	__asm        jmp    near ptr 0x0053E063;
	__asm        mov    dword ptr [ebp-0x2C], 8;
	__asm        jmp    near ptr 0x0053E063;
	__asm        mov    dword ptr [ebp-0x2C], 8;
	__asm        jmp    near ptr 0x0053E063;
	__asm        mov    dword ptr [ebp-0x2C], 0xA;
	__asm        jmp    near ptr 0x0053E063;
	__asm        mov    dword ptr [ebp-0x2C], 8;
	__asm        jmp    near ptr 0x0053E063;
	__asm        mov    dword ptr [ebp-0x2C], 0xA;
	__asm        jmp    near ptr 0x0053E063;
	__asm        mov    dword ptr [ebp-0x2C], 4;
	__asm        jmp    near ptr 0x0053E063;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x0053E063;
	__asm        jmp    near ptr 0x0053E063;
	__asm        cmp    dword ptr [ebp-0x3C], 0x2B;
	__asm        jg     near ptr 0x0053DF57;
	__asm        cmp    dword ptr [ebp-0x3C], 0x27;
	__asm        jge    near ptr 0x0053DEAD;
	__asm        cmp    dword ptr [ebp-0x3C], 0x1D;
	__asm        jl     near ptr 0x0053DF19;
	__asm        cmp    dword ptr [ebp-0x3C], 0x26;
	__asm        jle    near ptr 0x0053DEA1;
	__asm        jmp    near ptr 0x0053DF19;
	__asm        cmp    dword ptr [ebp-0x3C], 0x50;
	__asm        jg     near ptr 0x0053DF84;
	__asm        cmp    dword ptr [ebp-0x3C], 0x49;
	__asm        jge    near ptr 0x0053DEC5;
	__asm        cmp    dword ptr [ebp-0x3C], 0x3F;
	__asm        jl     near ptr 0x0053DF19;
	__asm        cmp    dword ptr [ebp-0x3C], 0x46;
	__asm        jle    near ptr 0x0053DEB9;
	__asm        jmp    near ptr 0x0053DF19;
	__asm        cmp    dword ptr [ebp-0x3C], 0x59;
	__asm        jg     near ptr 0x0053DFB1;
	__asm        cmp    dword ptr [ebp-0x3C], 0x57;
	__asm        jge    near ptr 0x0053DEDD;
	__asm        cmp    dword ptr [ebp-0x3C], 0x51;
	__asm        jl     near ptr 0x0053DF19;
	__asm        cmp    dword ptr [ebp-0x3C], 0x56;
	__asm        jle    near ptr 0x0053DED1;
	__asm        jmp    near ptr 0x0053DF19;
	__asm        cmp    dword ptr [ebp-0x3C], 0x68;
	__asm        jg     near ptr 0x0053DFDE;
	__asm        cmp    dword ptr [ebp-0x3C], 0x61;
	__asm        jge    near ptr 0x0053DEF5;
	__asm        cmp    dword ptr [ebp-0x3C], 0x5D;
	__asm        jl     near ptr 0x0053DF19;
	__asm        cmp    dword ptr [ebp-0x3C], 0x60;
	__asm        jle    near ptr 0x0053DEE9;
	__asm        jmp    near ptr 0x0053DF19;
	__asm        cmp    dword ptr [ebp-0x3C], 0x8056;
	__asm        jg     near ptr 0x0053E01B;
	__asm        cmp    dword ptr [ebp-0x3C], 0x8051;
	__asm        jge    near ptr 0x0053DED1;
	__asm        cmp    dword ptr [ebp-0x3C], 0x69;
	__asm        je     near ptr 0x0053DF01;
	__asm        cmp    dword ptr [ebp-0x3C], 0x6A;
	__asm        jl     near ptr 0x0053DF19;
	__asm        cmp    dword ptr [ebp-0x3C], 0x6B;
	__asm        jle    near ptr 0x0053DF0D;
	__asm        jmp    near ptr 0x0053DF19;
	__asm        sub    dword ptr [ebp-0x3C], 0x8057;
	__asm        cmp    dword ptr [ebp-0x3C], 0x14;
	__asm        ja     near ptr 0x0053DF19;
	__asm        mov    eax, [ebp-0x3C];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x53E04E];
	__asm        jmp    dword ptr [ecx*4+0x53E03E];
	__asm        fstp   st(6);
	__asm        push   ebx;
	__asm        add    cl, ch;
	__asm        ficom  word ptr [ebx];
	__asm        or     eax, 0x190053DF;
	__asm        fist   word ptr [ebx];
	__asm        add    [eax], al;
	__asm        add    [ebx], al;
	__asm        add    eax, [ebx];
	__asm        add    [ecx], eax;
	__asm        add    [ecx], eax;
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [edx];
	__asm        add    cl, [ebx-0x36CC07BB];
	__asm        mov    cx, [eax+2];
	__asm        add    ecx, [ebp-0x2C];
	__asm        mov    eax, pEdge;
	__asm        mov    [eax+2], cx;
// LINE 850:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        or     ecx, 2;
	__asm        and    cl, 0xF;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF0;
	__asm        or     cl, al;
	__asm        mov    eax, pRGV;
	__asm        mov    [eax+2], cl;
// LINE 851:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        and    ecx, 2;
	__asm        push   ecx;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, pEdge;
	__asm        push   eax;
	__asm        mov    eax, pRGV;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053E305;
// LINE 855:
	__asm        mov    eax, 0x7F;
	__asm        sub    eax, Offset;
	__asm        cmp    eax, y;
	__asm        jle    near ptr 0x0053E1E7;
// LINE 857:
	__asm        cmp    x, 0;
	__asm        jl     near ptr 0x0053E10B;
	__asm        mov    eax, stepSize;
	__asm        add    eax, y;
	__asm        js     near ptr 0x0053E10B;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x0053E10B;
	__asm        mov    eax, stepSize;
	__asm        add    eax, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x0053E116;
	__asm        mov    word ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x0053E154;
	__asm        mov    eax, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        mov    ecx, stepSize;
	__asm        add    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        mov    edx, stepSize;
	__asm        add    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x20], ax;
	__asm        jmp    near ptr 0x0053E154;
	__asm        push   4;
	__asm        push   4;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   0x0053964A;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053E1E7;
// LINE 859:
	__asm        mov    eax, pRGV;
	__asm        add    eax, 0x18;
	__asm        mov    pEdge, eax;
// LINE 860:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   0x00541360;
	__asm        add    esp, 4;
	__asm        mov    ecx, pEdge;
	__asm        xor    edx, edx;
	__asm        mov    dx, [ecx+2];
	__asm        add    eax, edx;
	__asm        mov    ecx, pEdge;
	__asm        mov    [ecx+2], ax;
// LINE 861:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        or     ecx, 4;
	__asm        and    cl, 0xF;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF0;
	__asm        or     cl, al;
	__asm        mov    eax, pRGV;
	__asm        mov    [eax+2], cl;
// LINE 862:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        and    ecx, 4;
	__asm        push   ecx;
	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        push   2;
	__asm        mov    eax, pEdge;
	__asm        push   eax;
	__asm        mov    eax, pRGV;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053E305;
// LINE 866:
	__asm        mov    eax, x;
	__asm        cmp    Offset, eax;
	__asm        jge    near ptr 0x0053E2F9;
// LINE 868:
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        js     near ptr 0x0053E223;
	__asm        cmp    y, 0;
	__asm        jl     near ptr 0x0053E223;
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0053E223;
	__asm        cmp    y, 0x80;
	__asm        jl     near ptr 0x0053E22E;
	__asm        mov    word ptr [ebp-0x24], 0;
	__asm        jmp    near ptr 0x0053E266;
	__asm        mov    eax, x;
	__asm        mov    eax, [eax*4+0x638F6C];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, [ecx*4+0x63984C];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x24], ax;
	__asm        jmp    near ptr 0x0053E266;
	__asm        push   8;
	__asm        push   8;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   0x0053964A;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053E2F9;
// LINE 870:
	__asm        mov    eax, pRGV;
	__asm        add    eax, 0x22;
	__asm        mov    pEdge, eax;
// LINE 871:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   0x00541360;
	__asm        add    esp, 4;
	__asm        mov    ecx, pEdge;
	__asm        xor    edx, edx;
	__asm        mov    dx, [ecx+2];
	__asm        add    eax, edx;
	__asm        mov    ecx, pEdge;
	__asm        mov    [ecx+2], ax;
// LINE 872:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        or     ecx, 8;
	__asm        and    cl, 0xF;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF0;
	__asm        or     cl, al;
	__asm        mov    eax, pRGV;
	__asm        mov    [eax+2], cl;
// LINE 873:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        and    ecx, 8;
	__asm        push   ecx;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        push   3;
	__asm        mov    eax, pEdge;
	__asm        push   eax;
	__asm        mov    eax, pRGV;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053E305;
// LINE 876:
	__asm        jmp    near ptr 0x0053E2FE;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0053e305
void RoadGraph::FindNumRoadElements(struct RGVertex* pRGV, struct Edge* pEdge, enum DirIndex2 currentDir, unsigned char x, unsigned char y, int32_t fDeadEnd) {
	 // Switch table at 0x0053e75f
	int32_t repeatCount;
	enum DirIndex2 returnStatus;
	enum DirIndex2 returnDir;
	enum DirIndex2 startingDir;

// LINE 880:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x34;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 881:
	__asm        mov    repeatCount, 0;
// LINE 884:
	__asm        mov    eax, currentDir;
	__asm        mov    startingDir, eax;
// LINE 887:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053E36A;
// LINE 889:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        mov    ecx, pEdge;
	__asm        mov    [ecx], al;
// LINE 890:
	__asm        mov    al, x;
	__asm        mov    ecx, pEdge;
	__asm        mov    [ecx+1], al;
// LINE 891:
	__asm        mov    eax, pEdge;
	__asm        mov    word ptr [eax+4], 0;
// LINE 892:
	__asm        jmp    near ptr 0x0053E8A9;
// LINE 895:
	__asm        cmp    fDeadEnd, 0;
	__asm        je     near ptr 0x0053E37B;
// LINE 896:
	__asm        mov    eax, pEdge;
	__asm        inc    word ptr [eax+4];
// LINE 900:
	__asm        mov    eax, reinterpret_cast<uint32_t>(y);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(x);
	__asm        push   eax;
	__asm        lea    eax, returnDir;
	__asm        push   eax;
	__asm        mov    eax, currentDir;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053E8B0;
	__asm        mov    returnStatus, eax;
// LINE 901:
	__asm        cmp    returnStatus, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0053E3A5;
// LINE 902:
	__asm        jmp    near ptr 0x0053E43F;
// LINE 904:
	__asm        cmp    returnStatus, 0xFFFFFFFE;
	__asm        jne    near ptr 0x0053E3B4;
// LINE 905:
	__asm        jmp    near ptr 0x0053E43F;
// LINE 907:
	__asm        mov    eax, currentDir;
	__asm        cmp    returnDir, eax;
	__asm        jne    near ptr 0x0053E3C8;
// LINE 909:
	__asm        inc    repeatCount;
// LINE 911:
	__asm        jmp    near ptr 0x0053E3E6;
// LINE 913:
	__asm        mov    repeatCount, 0;
// LINE 914:
	__asm        mov    eax, returnDir;
	__asm        mov    currentDir, eax;
// LINE 918:
	__asm        cmp    fDeadEnd, 0;
	__asm        je     near ptr 0x0053E3E6;
// LINE 920:
	__asm        mov    eax, pEdge;
	__asm        inc    word ptr [eax+4];
// LINE 924:
	__asm        mov    eax, returnDir;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x0053E416;
// LINE 926:
	__asm        dec    y;
	__asm        jmp    near ptr 0x0053E43A;
// LINE 927:
	__asm        inc    x;
	__asm        jmp    near ptr 0x0053E43A;
// LINE 928:
	__asm        inc    y;
	__asm        jmp    near ptr 0x0053E43A;
// LINE 929:
	__asm        dec    x;
	__asm        jmp    near ptr 0x0053E43A;
// LINE 930:
	__asm        jmp    near ptr 0x0053E43A;
	__asm        cmp    dword ptr [ebp-0x28], 3;
	__asm        ja     near ptr 0x0053E43A;
	__asm        mov    eax, [ebp-0x28];
	__asm        jmp    dword ptr [eax*4+0x53E42A];
	__asm        int1;
	__asm        jecxz  0x0053E480;
	__asm        add    cl, bh;
	__asm        jecxz  0x0053E484;
	__asm        add    [ecx], al;
	__asm        in     al, 0x53;
	__asm        add    [ecx], cl;
	__asm        in     al, 0x53;
	__asm        (bad);
// LINE 931:
	__asm        jmp    near ptr 0x0053E37B;
// LINE 936:
	__asm        cmp    returnStatus, 0xFFFFFFFE;
	__asm        jne    near ptr 0x0053E4D0;
// LINE 940:
// Block start:
	unsigned char tempy;
	unsigned char tempx;
	__asm        mov    al, x;
	__asm        mov    tempx, al;
// LINE 941:
	__asm        mov    al, y;
	__asm        mov    tempy, al;
// LINE 943:
	__asm        mov    eax, returnDir;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0053E485;
// LINE 945:
	__asm        dec    tempy;
	__asm        jmp    near ptr 0x0053E4A9;
// LINE 946:
	__asm        inc    tempx;
	__asm        jmp    near ptr 0x0053E4A9;
// LINE 947:
	__asm        inc    tempy;
	__asm        jmp    near ptr 0x0053E4A9;
// LINE 948:
	__asm        dec    tempx;
	__asm        jmp    near ptr 0x0053E4A9;
// LINE 949:
	__asm        jmp    near ptr 0x0053E4A9;
	__asm        cmp    dword ptr [ebp-0x2C], 3;
	__asm        ja     near ptr 0x0053E4A9;
	__asm        mov    eax, [ebp-0x2C];
	__asm        jmp    dword ptr [eax*4+0x53E499];
	__asm        pusha;
	__asm        in     al, 0x53;
	__asm        add    [eax-0x1C], ch;
	__asm        push   ebx;
	__asm        add    [eax-0x1C], dh;
	__asm        push   ebx;
	__asm        add    [eax-0x1C], bh;
	__asm        push   ebx;
	__asm        (bad);
// LINE 951:
	__asm        xor    eax, eax;
	__asm        mov    al, tempy;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, tempx;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        mov    ecx, pEdge;
	__asm        mov    [ecx], al;
// LINE 952:
	__asm        mov    al, tempx;
	__asm        mov    ecx, pEdge;
	__asm        mov    [ecx+1], al;
// LINE 954:
// Block end:
	__asm        jmp    near ptr 0x0053E503;
	__asm        cmp    returnStatus, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0053E503;
// LINE 956:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax];
	__asm        mov    ecx, pEdge;
	__asm        mov    [ecx+1], al;
// LINE 957:
	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        push   ecx;
	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        push   ecx;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        mov    ecx, pEdge;
	__asm        mov    [ecx], al;
// LINE 962:
	__asm        mov    eax, returnDir;
	__asm        sub    eax, 2;
	__asm        and    eax, 3;
	__asm        mov    currentDir, eax;
// LINE 963:
	__asm        mov    eax, pEdge;
	__asm        inc    word ptr [eax+4];
// LINE 965:
	__asm        mov    repeatCount, 0;
// LINE 969:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0053E557;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0053E557;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0053E557;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x0053E562;
	__asm        mov    word ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x0053E5A2;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x1C], ax;
	__asm        jmp    near ptr 0x0053E5A2;
	__asm        mov    eax, [ebp-0x1C];
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x0053E63B;
	__asm        mov    dword ptr [ebp-0x20], 8;
	__asm        jmp    near ptr 0x0053E774;
	__asm        mov    dword ptr [ebp-0x20], 0xA;
	__asm        jmp    near ptr 0x0053E774;
	__asm        mov    dword ptr [ebp-0x20], 8;
	__asm        jmp    near ptr 0x0053E774;
	__asm        mov    dword ptr [ebp-0x20], 4;
	__asm        jmp    near ptr 0x0053E774;
	__asm        mov    dword ptr [ebp-0x20], 8;
	__asm        jmp    near ptr 0x0053E774;
	__asm        mov    dword ptr [ebp-0x20], 8;
	__asm        jmp    near ptr 0x0053E774;
	__asm        mov    dword ptr [ebp-0x20], 0xA;
	__asm        jmp    near ptr 0x0053E774;
	__asm        mov    dword ptr [ebp-0x20], 8;
	__asm        jmp    near ptr 0x0053E774;
	__asm        mov    dword ptr [ebp-0x20], 0xA;
	__asm        jmp    near ptr 0x0053E774;
	__asm        mov    dword ptr [ebp-0x20], 4;
	__asm        jmp    near ptr 0x0053E774;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x0053E774;
	__asm        jmp    near ptr 0x0053E774;
	__asm        cmp    dword ptr [ebp-0x30], 0x2B;
	__asm        jg     near ptr 0x0053E668;
	__asm        cmp    dword ptr [ebp-0x30], 0x27;
	__asm        jge    near ptr 0x0053E5BE;
	__asm        cmp    dword ptr [ebp-0x30], 0x1D;
	__asm        jl     near ptr 0x0053E62A;
	__asm        cmp    dword ptr [ebp-0x30], 0x26;
	__asm        jle    near ptr 0x0053E5B2;
	__asm        jmp    near ptr 0x0053E62A;
	__asm        cmp    dword ptr [ebp-0x30], 0x50;
	__asm        jg     near ptr 0x0053E695;
	__asm        cmp    dword ptr [ebp-0x30], 0x49;
	__asm        jge    near ptr 0x0053E5D6;
	__asm        cmp    dword ptr [ebp-0x30], 0x3F;
	__asm        jl     near ptr 0x0053E62A;
	__asm        cmp    dword ptr [ebp-0x30], 0x46;
	__asm        jle    near ptr 0x0053E5CA;
	__asm        jmp    near ptr 0x0053E62A;
	__asm        cmp    dword ptr [ebp-0x30], 0x59;
	__asm        jg     near ptr 0x0053E6C2;
	__asm        cmp    dword ptr [ebp-0x30], 0x57;
	__asm        jge    near ptr 0x0053E5EE;
	__asm        cmp    dword ptr [ebp-0x30], 0x51;
	__asm        jl     near ptr 0x0053E62A;
	__asm        cmp    dword ptr [ebp-0x30], 0x56;
	__asm        jle    near ptr 0x0053E5E2;
	__asm        jmp    near ptr 0x0053E62A;
	__asm        cmp    dword ptr [ebp-0x30], 0x68;
	__asm        jg     near ptr 0x0053E6EF;
	__asm        cmp    dword ptr [ebp-0x30], 0x61;
	__asm        jge    near ptr 0x0053E606;
	__asm        cmp    dword ptr [ebp-0x30], 0x5D;
	__asm        jl     near ptr 0x0053E62A;
	__asm        cmp    dword ptr [ebp-0x30], 0x60;
	__asm        jle    near ptr 0x0053E5FA;
	__asm        jmp    near ptr 0x0053E62A;
	__asm        cmp    dword ptr [ebp-0x30], 0x8056;
	__asm        jg     near ptr 0x0053E72C;
	__asm        cmp    dword ptr [ebp-0x30], 0x8051;
	__asm        jge    near ptr 0x0053E5E2;
	__asm        cmp    dword ptr [ebp-0x30], 0x69;
	__asm        je     near ptr 0x0053E612;
	__asm        cmp    dword ptr [ebp-0x30], 0x6A;
	__asm        jl     near ptr 0x0053E62A;
	__asm        cmp    dword ptr [ebp-0x30], 0x6B;
	__asm        jle    near ptr 0x0053E61E;
	__asm        jmp    near ptr 0x0053E62A;
	__asm        sub    dword ptr [ebp-0x30], 0x8057;
	__asm        cmp    dword ptr [ebp-0x30], 0x14;
	__asm        ja     near ptr 0x0053E62A;
	__asm        mov    eax, [ebp-0x30];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x53E75F];
	__asm        jmp    dword ptr [ecx*4+0x53E74F];
	__asm        out    dx, al;
	__asm        in     eax, 0x53;
	__asm        add    dl, bh;
	__asm        in     eax, 0x53;
	__asm        add    [esi], bl;
	__asm        out    0x53, al;
	__asm        add    [edx], ch;
	__asm        out    0x53, al;
	__asm        add    [eax], al;
	__asm        add    [eax], al;
	__asm        add    eax, [ebx];
	__asm        add    eax, [ecx];
	__asm        add    [ecx], eax;
	__asm        add    [ebx], eax;
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    al, [edx];
	__asm        mov    eax, pEdge;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+2];
	__asm        add    ecx, [ebp-0x20];
	__asm        mov    eax, pEdge;
	__asm        mov    [eax+2], cx;
// LINE 970:
	__asm        mov    eax, pEdge;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+2];
	__asm        cmp    ecx, 0x7D00;
	__asm        jl     near ptr 0x0053E7B8;
	__asm        push   0x3CA;
	__asm        push   0x5B81D8;
	__asm        push   0x5B81FC;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0053E7BD;
	__asm        jmp    near ptr 0x0053E7BD;
// LINE 972:
	__asm        mov    eax, reinterpret_cast<uint32_t>(y);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(x);
	__asm        push   eax;
	__asm        lea    eax, returnDir;
	__asm        push   eax;
	__asm        mov    eax, currentDir;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053E8B0;
	__asm        mov    returnStatus, eax;
// LINE 973:
	__asm        cmp    returnStatus, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0053E7E7;
// LINE 974:
	__asm        jmp    near ptr 0x0053E877;
// LINE 977:
	__asm        cmp    returnStatus, 0xFFFFFFFE;
	__asm        jne    near ptr 0x0053E7F6;
// LINE 978:
	__asm        jmp    near ptr 0x0053E877;
// LINE 980:
	__asm        mov    eax, currentDir;
	__asm        cmp    returnDir, eax;
	__asm        jne    near ptr 0x0053E80A;
// LINE 982:
	__asm        inc    repeatCount;
// LINE 984:
	__asm        jmp    near ptr 0x0053E81E;
// LINE 986:
	__asm        mov    repeatCount, 0;
// LINE 987:
	__asm        mov    eax, returnDir;
	__asm        mov    currentDir, eax;
// LINE 988:
	__asm        mov    eax, pEdge;
	__asm        inc    word ptr [eax+4];
// LINE 991:
	__asm        mov    eax, currentDir;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0053E84E;
// LINE 993:
	__asm        dec    y;
	__asm        jmp    near ptr 0x0053E872;
// LINE 994:
	__asm        inc    x;
	__asm        jmp    near ptr 0x0053E872;
// LINE 995:
	__asm        inc    y;
	__asm        jmp    near ptr 0x0053E872;
// LINE 996:
	__asm        dec    x;
	__asm        jmp    near ptr 0x0053E872;
// LINE 997:
	__asm        jmp    near ptr 0x0053E872;
	__asm        cmp    dword ptr [ebp-0x34], 3;
	__asm        ja     near ptr 0x0053E872;
	__asm        mov    eax, [ebp-0x34];
	__asm        jmp    dword ptr [eax*4+0x53E862];
	__asm        sub    eax, ebp;
	__asm        push   ebx;
	__asm        add    [ecx], dh;
	__asm        call   0xE88CE8BF;
	__asm        push   ebx;
	__asm        add    [ecx-0x18], al;
	__asm        push   ebx;
	__asm        (bad);
// LINE 998:
	__asm        jmp    near ptr 0x0053E51D;
// LINE 1007:
	__asm        cmp    fDeadEnd, 0;
	__asm        je     near ptr 0x0053E8A4;
	__asm        mov    eax, pEdge;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+4];
	__asm        cmp    ecx, 2;
	__asm        jne    near ptr 0x0053E8A4;
	__asm        cmp    repeatCount, 0;
	__asm        jne    near ptr 0x0053E8A4;
// LINE 1008:
	__asm        mov    eax, pEdge;
	__asm        dec    word ptr [eax+4];
// LINE 1009:
	__asm        jmp    near ptr 0x0053E8A9;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x18;
}

// FUNCTION: COPTER_D 0x0053e8b0
enum DirIndex2 RoadGraph::WhatDirAmIConnectedTo(enum DirIndex2 currentDir, enum DirIndex2* pNextDir, unsigned char x, unsigned char y) {
	int32_t stepSize;
	int32_t Offset;
	unsigned short LocalTile;

// LINE 1013:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1014:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0053E8F6;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0053E8F6;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0053E8F6;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x0053E901;
	__asm        mov    LocalTile, 0;
	__asm        jmp    near ptr 0x0053E941;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    LocalTile, ax;
	__asm        jmp    near ptr 0x0053E941;
// LINE 1021:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, [eax*4+0x639510];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dx, [eax+ecx*2];
	__asm        shr    edx, 0xA;
	__asm        test   dl, 0x1F;
	__asm        je     near ptr 0x0053E974;
// LINE 1023:
	__asm        mov    eax, currentDir;
	__asm        mov    ecx, pNextDir;
	__asm        mov    [ecx], eax;
// LINE 1024:
	__asm        mov    eax, currentDir;
	__asm        jmp    near ptr 0x0053EECF;
// LINE 1029:
	__asm        mov    eax, reinterpret_cast<uint32_t>(LocalTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x0053E998;
	__asm        jmp    near ptr 0x0053E9DA;
	__asm        jmp    near ptr 0x0053EA01;
	__asm        jmp    near ptr 0x0053E9DA;
	__asm        jmp    near ptr 0x0053E9D0;
	__asm        cmp    dword ptr [ebp-0x28], 0x806B;
	__asm        jg     near ptr 0x0053EA01;
	__asm        cmp    dword ptr [ebp-0x28], 0x806A;
	__asm        jge    near ptr 0x0053E9DA;
	__asm        cmp    dword ptr [ebp-0x28], 0x61;
	__asm        jl     near ptr 0x0053EA01;
	__asm        cmp    dword ptr [ebp-0x28], 0x6B;
	__asm        jle    near ptr 0x0053E9DA;
	__asm        jmp    near ptr 0x0053EA01;
	__asm        jmp    near ptr 0x0053EA01;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x0053EA01;
// LINE 1031:
	__asm        mov    stepSize, 2;
// LINE 1032:
	__asm        mov    Offset, 1;
// LINE 1033:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        and    al, 0xFE;
	__asm        mov    x, al;
// LINE 1034:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        and    al, 0xFE;
	__asm        mov    y, al;
// LINE 1036:
	__asm        jmp    near ptr 0x0053EA0F;
// LINE 1038:
	__asm        mov    stepSize, 1;
// LINE 1039:
	__asm        mov    Offset, 0;
// LINE 1043:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0053EA49;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0053EA49;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0053EA49;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x0053EA54;
	__asm        mov    LocalTile, 0;
	__asm        jmp    near ptr 0x0053EA94;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    LocalTile, ax;
	__asm        jmp    near ptr 0x0053EA94;
// LINE 1047:
	__asm        cmp    currentDir, 2;
	__asm        je     near ptr 0x0053EB94;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, Offset;
	__asm        jl     near ptr 0x0053EB94;
// LINE 1048:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0053EAE6;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        dec    eax;
	__asm        js     near ptr 0x0053EAE6;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0053EAE6;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x0053EAF1;
	__asm        mov    word ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x0053EB33;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx-1];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx-1];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x14], ax;
	__asm        jmp    near ptr 0x0053EB33;
	__asm        push   1;
	__asm        mov    eax, currentDir;
	__asm        mov    eax, [eax*4+0x593430];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(LocalTile);
	__asm        push   eax;
	__asm        call   0x0053964A;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053EB94;
// LINE 1050:
	__asm        mov    eax, pNextDir;
	__asm        mov    dword ptr [eax], 0;
// LINE 1051:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053EB8D;
// LINE 1052:
	__asm        mov    eax, 0xFFFFFFFE;
	__asm        jmp    near ptr 0x0053EECF;
// LINE 1053:
	__asm        jmp    near ptr 0x0053EB94;
// LINE 1054:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0053EECF;
// LINE 1057:
	__asm        cmp    currentDir, 3;
	__asm        je     near ptr 0x0053ECA8;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    ecx, 0x7F;
	__asm        sub    ecx, Offset;
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x0053ECA8;
// LINE 1058:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        add    eax, stepSize;
	__asm        js     near ptr 0x0053EBF1;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0053EBF1;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        add    eax, stepSize;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0053EBF1;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x0053EBFC;
	__asm        mov    word ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x0053EC42;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        add    eax, stepSize;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        add    ecx, stepSize;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x18], ax;
	__asm        jmp    near ptr 0x0053EC42;
	__asm        push   2;
	__asm        mov    eax, currentDir;
	__asm        mov    eax, [eax*4+0x593430];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(LocalTile);
	__asm        push   eax;
	__asm        call   0x0053964A;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053ECA8;
// LINE 1060:
	__asm        mov    eax, pNextDir;
	__asm        mov    dword ptr [eax], 1;
// LINE 1061:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        add    eax, stepSize;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053EC9E;
// LINE 1062:
	__asm        mov    eax, 0xFFFFFFFE;
	__asm        jmp    near ptr 0x0053EECF;
// LINE 1063:
	__asm        jmp    near ptr 0x0053ECA8;
// LINE 1064:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0053EECF;
// LINE 1067:
	__asm        cmp    currentDir, 1;
	__asm        je     near ptr 0x0053EDA9;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, Offset;
	__asm        jl     near ptr 0x0053EDA9;
// LINE 1068:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        dec    eax;
	__asm        js     near ptr 0x0053ECFA;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0053ECFA;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0053ECFA;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x0053ED05;
	__asm        mov    word ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x0053ED45;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, [eax*4+0x638F6C];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        mov    ecx, [ecx*4+0x63984C];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x1C], ax;
	__asm        jmp    near ptr 0x0053ED45;
	__asm        push   8;
	__asm        mov    eax, currentDir;
	__asm        mov    eax, [eax*4+0x593430];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(LocalTile);
	__asm        push   eax;
	__asm        call   0x0053964A;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053EDA9;
// LINE 1070:
	__asm        mov    eax, pNextDir;
	__asm        mov    dword ptr [eax], 3;
// LINE 1071:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053ED9F;
// LINE 1072:
	__asm        mov    eax, 0xFFFFFFFE;
	__asm        jmp    near ptr 0x0053EECF;
// LINE 1073:
	__asm        jmp    near ptr 0x0053EDA9;
// LINE 1074:
	__asm        mov    eax, 3;
	__asm        jmp    near ptr 0x0053EECF;
// LINE 1077:
	__asm        cmp    currentDir, 0;
	__asm        je     near ptr 0x0053EEBD;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        mov    ecx, 0x7F;
	__asm        sub    ecx, Offset;
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x0053EEBD;
// LINE 1078:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0053EE06;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        add    eax, stepSize;
	__asm        js     near ptr 0x0053EE06;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0053EE06;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        add    eax, stepSize;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x0053EE11;
	__asm        mov    word ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x0053EE57;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        add    ecx, stepSize;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        add    edx, stepSize;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x20], ax;
	__asm        jmp    near ptr 0x0053EE57;
	__asm        push   4;
	__asm        mov    eax, currentDir;
	__asm        mov    eax, [eax*4+0x593430];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(LocalTile);
	__asm        push   eax;
	__asm        call   0x0053964A;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053EEBD;
// LINE 1080:
	__asm        mov    eax, pNextDir;
	__asm        mov    dword ptr [eax], 2;
// LINE 1081:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        add    eax, stepSize;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053EEB3;
// LINE 1082:
	__asm        mov    eax, 0xFFFFFFFE;
	__asm        jmp    near ptr 0x0053EECF;
// LINE 1083:
	__asm        jmp    near ptr 0x0053EEBD;
// LINE 1084:
	__asm        mov    eax, 2;
	__asm        jmp    near ptr 0x0053EECF;
// LINE 1088:
	__asm        mov    eax, currentDir;
	__asm        mov    ecx, pNextDir;
	__asm        mov    [ecx], eax;
// LINE 1089:
	__asm        mov    eax, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0053EECF;
// LINE 1090:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x0053eed6
void RoadGraph::ConnectHiwayRamp(int32_t x, int32_t y, unsigned short RampTile) {
	 // Switch table at 0x005403b8
	 // Switch table at 0x00540119
	 // Switch table at 0x0053fe7b
	 // Switch table at 0x0053fbde
	 // Switch table at 0x0053f940
	 // Switch table at 0x0053f69d
	 // Switch table at 0x0053f3fb
	 // Switch table at 0x0053f158
	unsigned char yindex;

// LINE 1096:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x4C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1099:
	__asm        mov    eax, reinterpret_cast<uint32_t>(RampTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0054041A;
// LINE 1102:
	__asm        cmp    x, 1;
	__asm        jle    near ptr 0x0053F18E;
	__asm        cmp    y, 0x7F;
	__asm        jge    near ptr 0x0053F18E;
// LINE 1103:
	__asm        mov    eax, y;
	__asm        sub    eax, 2;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053F18E;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053F18E;
// LINE 1105:
	__asm        mov    eax, y;
	__asm        sub    eax, 2;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        mov    yindex, al;
// LINE 1106:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x18], al;
// LINE 1107:
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x19], al;
// LINE 1108:
	__asm        mov    dword ptr [ebp-0x30], 0x5D;
	__asm        jmp    near ptr 0x0053F034;
	__asm        mov    dword ptr [ebp-8], 8;
	__asm        jmp    near ptr 0x0053F16D;
	__asm        mov    dword ptr [ebp-8], 0xA;
	__asm        jmp    near ptr 0x0053F16D;
	__asm        mov    dword ptr [ebp-8], 8;
	__asm        jmp    near ptr 0x0053F16D;
	__asm        mov    dword ptr [ebp-8], 4;
	__asm        jmp    near ptr 0x0053F16D;
	__asm        mov    dword ptr [ebp-8], 8;
	__asm        jmp    near ptr 0x0053F16D;
	__asm        mov    dword ptr [ebp-8], 8;
	__asm        jmp    near ptr 0x0053F16D;
	__asm        mov    dword ptr [ebp-8], 0xA;
	__asm        jmp    near ptr 0x0053F16D;
	__asm        mov    dword ptr [ebp-8], 8;
	__asm        jmp    near ptr 0x0053F16D;
	__asm        mov    dword ptr [ebp-8], 0xA;
	__asm        jmp    near ptr 0x0053F16D;
	__asm        mov    dword ptr [ebp-8], 4;
	__asm        jmp    near ptr 0x0053F16D;
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        jmp    near ptr 0x0053F16D;
	__asm        jmp    near ptr 0x0053F16D;
	__asm        cmp    dword ptr [ebp-0x30], 0x2B;
	__asm        jg     near ptr 0x0053F061;
	__asm        cmp    dword ptr [ebp-0x30], 0x27;
	__asm        jge    near ptr 0x0053EFB7;
	__asm        cmp    dword ptr [ebp-0x30], 0x1D;
	__asm        jl     near ptr 0x0053F023;
	__asm        cmp    dword ptr [ebp-0x30], 0x26;
	__asm        jle    near ptr 0x0053EFAB;
	__asm        jmp    near ptr 0x0053F023;
	__asm        cmp    dword ptr [ebp-0x30], 0x50;
	__asm        jg     near ptr 0x0053F08E;
	__asm        cmp    dword ptr [ebp-0x30], 0x49;
	__asm        jge    near ptr 0x0053EFCF;
	__asm        cmp    dword ptr [ebp-0x30], 0x3F;
	__asm        jl     near ptr 0x0053F023;
	__asm        cmp    dword ptr [ebp-0x30], 0x46;
	__asm        jle    near ptr 0x0053EFC3;
	__asm        jmp    near ptr 0x0053F023;
	__asm        cmp    dword ptr [ebp-0x30], 0x59;
	__asm        jg     near ptr 0x0053F0BB;
	__asm        cmp    dword ptr [ebp-0x30], 0x57;
	__asm        jge    near ptr 0x0053EFE7;
	__asm        cmp    dword ptr [ebp-0x30], 0x51;
	__asm        jl     near ptr 0x0053F023;
	__asm        cmp    dword ptr [ebp-0x30], 0x56;
	__asm        jle    near ptr 0x0053EFDB;
	__asm        jmp    near ptr 0x0053F023;
	__asm        cmp    dword ptr [ebp-0x30], 0x68;
	__asm        jg     near ptr 0x0053F0E8;
	__asm        cmp    dword ptr [ebp-0x30], 0x61;
	__asm        jge    near ptr 0x0053EFFF;
	__asm        cmp    dword ptr [ebp-0x30], 0x5D;
	__asm        jl     near ptr 0x0053F023;
	__asm        cmp    dword ptr [ebp-0x30], 0x60;
	__asm        jle    near ptr 0x0053EFF3;
	__asm        jmp    near ptr 0x0053F023;
	__asm        cmp    dword ptr [ebp-0x30], 0x8056;
	__asm        jg     near ptr 0x0053F125;
	__asm        cmp    dword ptr [ebp-0x30], 0x8051;
	__asm        jge    near ptr 0x0053EFDB;
	__asm        cmp    dword ptr [ebp-0x30], 0x69;
	__asm        je     near ptr 0x0053F00B;
	__asm        cmp    dword ptr [ebp-0x30], 0x6A;
	__asm        jl     near ptr 0x0053F023;
	__asm        cmp    dword ptr [ebp-0x30], 0x6B;
	__asm        jle    near ptr 0x0053F017;
	__asm        jmp    near ptr 0x0053F023;
	__asm        sub    dword ptr [ebp-0x30], 0x8057;
	__asm        cmp    dword ptr [ebp-0x30], 0x14;
	__asm        ja     near ptr 0x0053F023;
	__asm        mov    eax, [ebp-0x30];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x53F158];
	__asm        jmp    dword ptr [ecx*4+0x53F148];
	__asm        out    0xEF, eax;
	__asm        push   ebx;
	__asm        add    bl, dh;
	__asm        out    dx, eax;
	__asm        push   ebx;
	__asm        add    [edi], dl;
	__asm        (bad);
	__asm        add    [ebx], ah;
	__asm        (bad);
	__asm        add    [eax], al;
	__asm        add    [eax], al;
	__asm        add    eax, [ebx];
	__asm        add    eax, [ecx];
	__asm        add    [ecx], eax;
	__asm        add    [ebx], eax;
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    al, [edx];
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x1A], ax;
// LINE 1110:
	__asm        jmp    near ptr 0x00540481;
// LINE 1113:
	__asm        cmp    x, 1;
	__asm        jle    near ptr 0x0053F431;
	__asm        cmp    y, 0x7F;
	__asm        jge    near ptr 0x0053F431;
// LINE 1114:
	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053F431;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        sub    eax, 2;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053F431;
// LINE 1116:
	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        mov    yindex, al;
// LINE 1117:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        sub    eax, 2;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+4], al;
// LINE 1118:
	__asm        mov    eax, x;
	__asm        sub    eax, 2;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+5], al;
// LINE 1119:
	__asm        mov    dword ptr [ebp-0x34], 0x805D;
	__asm        jmp    near ptr 0x0053F2D7;
	__asm        mov    dword ptr [ebp-0xC], 8;
	__asm        jmp    near ptr 0x0053F410;
	__asm        mov    dword ptr [ebp-0xC], 0xA;
	__asm        jmp    near ptr 0x0053F410;
	__asm        mov    dword ptr [ebp-0xC], 8;
	__asm        jmp    near ptr 0x0053F410;
	__asm        mov    dword ptr [ebp-0xC], 4;
	__asm        jmp    near ptr 0x0053F410;
	__asm        mov    dword ptr [ebp-0xC], 8;
	__asm        jmp    near ptr 0x0053F410;
	__asm        mov    dword ptr [ebp-0xC], 8;
	__asm        jmp    near ptr 0x0053F410;
	__asm        mov    dword ptr [ebp-0xC], 0xA;
	__asm        jmp    near ptr 0x0053F410;
	__asm        mov    dword ptr [ebp-0xC], 8;
	__asm        jmp    near ptr 0x0053F410;
	__asm        mov    dword ptr [ebp-0xC], 0xA;
	__asm        jmp    near ptr 0x0053F410;
	__asm        mov    dword ptr [ebp-0xC], 4;
	__asm        jmp    near ptr 0x0053F410;
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        jmp    near ptr 0x0053F410;
	__asm        jmp    near ptr 0x0053F410;
	__asm        cmp    dword ptr [ebp-0x34], 0x2B;
	__asm        jg     near ptr 0x0053F304;
	__asm        cmp    dword ptr [ebp-0x34], 0x27;
	__asm        jge    near ptr 0x0053F25A;
	__asm        cmp    dword ptr [ebp-0x34], 0x1D;
	__asm        jl     near ptr 0x0053F2C6;
	__asm        cmp    dword ptr [ebp-0x34], 0x26;
	__asm        jle    near ptr 0x0053F24E;
	__asm        jmp    near ptr 0x0053F2C6;
	__asm        cmp    dword ptr [ebp-0x34], 0x50;
	__asm        jg     near ptr 0x0053F331;
	__asm        cmp    dword ptr [ebp-0x34], 0x49;
	__asm        jge    near ptr 0x0053F272;
	__asm        cmp    dword ptr [ebp-0x34], 0x3F;
	__asm        jl     near ptr 0x0053F2C6;
	__asm        cmp    dword ptr [ebp-0x34], 0x46;
	__asm        jle    near ptr 0x0053F266;
	__asm        jmp    near ptr 0x0053F2C6;
	__asm        cmp    dword ptr [ebp-0x34], 0x59;
	__asm        jg     near ptr 0x0053F35E;
	__asm        cmp    dword ptr [ebp-0x34], 0x57;
	__asm        jge    near ptr 0x0053F28A;
	__asm        cmp    dword ptr [ebp-0x34], 0x51;
	__asm        jl     near ptr 0x0053F2C6;
	__asm        cmp    dword ptr [ebp-0x34], 0x56;
	__asm        jle    near ptr 0x0053F27E;
	__asm        jmp    near ptr 0x0053F2C6;
	__asm        cmp    dword ptr [ebp-0x34], 0x68;
	__asm        jg     near ptr 0x0053F38B;
	__asm        cmp    dword ptr [ebp-0x34], 0x61;
	__asm        jge    near ptr 0x0053F2A2;
	__asm        cmp    dword ptr [ebp-0x34], 0x5D;
	__asm        jl     near ptr 0x0053F2C6;
	__asm        cmp    dword ptr [ebp-0x34], 0x60;
	__asm        jle    near ptr 0x0053F296;
	__asm        jmp    near ptr 0x0053F2C6;
	__asm        cmp    dword ptr [ebp-0x34], 0x8056;
	__asm        jg     near ptr 0x0053F3C8;
	__asm        cmp    dword ptr [ebp-0x34], 0x8051;
	__asm        jge    near ptr 0x0053F27E;
	__asm        cmp    dword ptr [ebp-0x34], 0x69;
	__asm        je     near ptr 0x0053F2AE;
	__asm        cmp    dword ptr [ebp-0x34], 0x6A;
	__asm        jl     near ptr 0x0053F2C6;
	__asm        cmp    dword ptr [ebp-0x34], 0x6B;
	__asm        jle    near ptr 0x0053F2BA;
	__asm        jmp    near ptr 0x0053F2C6;
	__asm        sub    dword ptr [ebp-0x34], 0x8057;
	__asm        cmp    dword ptr [ebp-0x34], 0x14;
	__asm        ja     near ptr 0x0053F2C6;
	__asm        mov    eax, [ebp-0x34];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x53F3FB];
	__asm        jmp    dword ptr [ecx*4+0x53F3EB];
	__asm        mov    dh, dl;
	__asm        push   ebx;
	__asm        add    [esi-0x45FFAC0E], dl;
	__asm        push   ebx;
	__asm        add    dh, al;
	__asm        push   ebx;
	__asm        add    [eax], al;
	__asm        add    [eax], al;
	__asm        add    eax, [ebx];
	__asm        add    eax, [ecx];
	__asm        add    [ecx], eax;
	__asm        add    [ebx], eax;
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    al, [edx];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+6], ax;
// LINE 1121:
	__asm        jmp    near ptr 0x00540481;
// LINE 1124:
	__asm        cmp    x, 0;
	__asm        jle    near ptr 0x0053F6D4;
	__asm        cmp    y, 1;
	__asm        jle    near ptr 0x0053F6D4;
// LINE 1125:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053F6D4;
	__asm        mov    eax, y;
	__asm        sub    eax, 2;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053F6D4;
// LINE 1127:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        mov    yindex, al;
// LINE 1128:
	__asm        mov    eax, y;
	__asm        sub    eax, 2;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4-4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0xE], al;
// LINE 1129:
	__asm        mov    al, reinterpret_cast<uint8_t>(x);
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4-4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0xF], al;
// LINE 1130:
	__asm        mov    dword ptr [ebp-0x38], 0x5E;
	__asm        jmp    near ptr 0x0053F579;
	__asm        mov    dword ptr [ebp-0x10], 8;
	__asm        jmp    near ptr 0x0053F6B2;
	__asm        mov    dword ptr [ebp-0x10], 0xA;
	__asm        jmp    near ptr 0x0053F6B2;
	__asm        mov    dword ptr [ebp-0x10], 8;
	__asm        jmp    near ptr 0x0053F6B2;
	__asm        mov    dword ptr [ebp-0x10], 4;
	__asm        jmp    near ptr 0x0053F6B2;
	__asm        mov    dword ptr [ebp-0x10], 8;
	__asm        jmp    near ptr 0x0053F6B2;
	__asm        mov    dword ptr [ebp-0x10], 8;
	__asm        jmp    near ptr 0x0053F6B2;
	__asm        mov    dword ptr [ebp-0x10], 0xA;
	__asm        jmp    near ptr 0x0053F6B2;
	__asm        mov    dword ptr [ebp-0x10], 8;
	__asm        jmp    near ptr 0x0053F6B2;
	__asm        mov    dword ptr [ebp-0x10], 0xA;
	__asm        jmp    near ptr 0x0053F6B2;
	__asm        mov    dword ptr [ebp-0x10], 4;
	__asm        jmp    near ptr 0x0053F6B2;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        jmp    near ptr 0x0053F6B2;
	__asm        jmp    near ptr 0x0053F6B2;
	__asm        cmp    dword ptr [ebp-0x38], 0x2B;
	__asm        jg     near ptr 0x0053F5A6;
	__asm        cmp    dword ptr [ebp-0x38], 0x27;
	__asm        jge    near ptr 0x0053F4FC;
	__asm        cmp    dword ptr [ebp-0x38], 0x1D;
	__asm        jl     near ptr 0x0053F568;
	__asm        cmp    dword ptr [ebp-0x38], 0x26;
	__asm        jle    near ptr 0x0053F4F0;
	__asm        jmp    near ptr 0x0053F568;
	__asm        cmp    dword ptr [ebp-0x38], 0x50;
	__asm        jg     near ptr 0x0053F5D3;
	__asm        cmp    dword ptr [ebp-0x38], 0x49;
	__asm        jge    near ptr 0x0053F514;
	__asm        cmp    dword ptr [ebp-0x38], 0x3F;
	__asm        jl     near ptr 0x0053F568;
	__asm        cmp    dword ptr [ebp-0x38], 0x46;
	__asm        jle    near ptr 0x0053F508;
	__asm        jmp    near ptr 0x0053F568;
	__asm        cmp    dword ptr [ebp-0x38], 0x59;
	__asm        jg     near ptr 0x0053F600;
	__asm        cmp    dword ptr [ebp-0x38], 0x57;
	__asm        jge    near ptr 0x0053F52C;
	__asm        cmp    dword ptr [ebp-0x38], 0x51;
	__asm        jl     near ptr 0x0053F568;
	__asm        cmp    dword ptr [ebp-0x38], 0x56;
	__asm        jle    near ptr 0x0053F520;
	__asm        jmp    near ptr 0x0053F568;
	__asm        cmp    dword ptr [ebp-0x38], 0x68;
	__asm        jg     near ptr 0x0053F62D;
	__asm        cmp    dword ptr [ebp-0x38], 0x61;
	__asm        jge    near ptr 0x0053F544;
	__asm        cmp    dword ptr [ebp-0x38], 0x5D;
	__asm        jl     near ptr 0x0053F568;
	__asm        cmp    dword ptr [ebp-0x38], 0x60;
	__asm        jle    near ptr 0x0053F538;
	__asm        jmp    near ptr 0x0053F568;
	__asm        cmp    dword ptr [ebp-0x38], 0x8056;
	__asm        jg     near ptr 0x0053F66A;
	__asm        cmp    dword ptr [ebp-0x38], 0x8051;
	__asm        jge    near ptr 0x0053F520;
	__asm        cmp    dword ptr [ebp-0x38], 0x69;
	__asm        je     near ptr 0x0053F550;
	__asm        cmp    dword ptr [ebp-0x38], 0x6A;
	__asm        jl     near ptr 0x0053F568;
	__asm        cmp    dword ptr [ebp-0x38], 0x6B;
	__asm        jle    near ptr 0x0053F55C;
	__asm        jmp    near ptr 0x0053F568;
	__asm        sub    dword ptr [ebp-0x38], 0x8057;
	__asm        cmp    dword ptr [ebp-0x38], 0x14;
	__asm        ja     near ptr 0x0053F568;
	__asm        mov    eax, [ebp-0x38];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x53F69D];
	__asm        jmp    dword ptr [ecx*4+0x53F68D];
	__asm        sub    al, 0xF5;
	__asm        push   ebx;
	__asm        add    [eax], bh;
	__asm        cmc;
	__asm        push   ebx;
	__asm        add    [ebp+esi*8+0x53], bl;
	__asm        add    [eax-0xB], ch;
	__asm        push   ebx;
	__asm        add    [eax], al;
	__asm        add    [eax], al;
	__asm        add    eax, [ebx];
	__asm        add    eax, [ecx];
	__asm        add    [ecx], eax;
	__asm        add    [ebx], eax;
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    al, [edx];
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4-4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x10], ax;
// LINE 1132:
	__asm        jmp    near ptr 0x00540481;
// LINE 1135:
	__asm        cmp    x, 1;
	__asm        jle    near ptr 0x0053F977;
	__asm        cmp    y, 0;
	__asm        jle    near ptr 0x0053F977;
// LINE 1136:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        sub    eax, 2;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053F977;
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053F977;
// LINE 1138:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        sub    eax, 2;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        mov    yindex, al;
// LINE 1139:
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4-8];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0xE], al;
// LINE 1140:
	__asm        mov    al, reinterpret_cast<uint8_t>(x);
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4-8];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0xF], al;
// LINE 1141:
	__asm        mov    dword ptr [ebp-0x3C], 0x805E;
	__asm        jmp    near ptr 0x0053F81C;
	__asm        mov    dword ptr [ebp-0x14], 8;
	__asm        jmp    near ptr 0x0053F955;
	__asm        mov    dword ptr [ebp-0x14], 0xA;
	__asm        jmp    near ptr 0x0053F955;
	__asm        mov    dword ptr [ebp-0x14], 8;
	__asm        jmp    near ptr 0x0053F955;
	__asm        mov    dword ptr [ebp-0x14], 4;
	__asm        jmp    near ptr 0x0053F955;
	__asm        mov    dword ptr [ebp-0x14], 8;
	__asm        jmp    near ptr 0x0053F955;
	__asm        mov    dword ptr [ebp-0x14], 8;
	__asm        jmp    near ptr 0x0053F955;
	__asm        mov    dword ptr [ebp-0x14], 0xA;
	__asm        jmp    near ptr 0x0053F955;
	__asm        mov    dword ptr [ebp-0x14], 8;
	__asm        jmp    near ptr 0x0053F955;
	__asm        mov    dword ptr [ebp-0x14], 0xA;
	__asm        jmp    near ptr 0x0053F955;
	__asm        mov    dword ptr [ebp-0x14], 4;
	__asm        jmp    near ptr 0x0053F955;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x0053F955;
	__asm        jmp    near ptr 0x0053F955;
	__asm        cmp    dword ptr [ebp-0x3C], 0x2B;
	__asm        jg     near ptr 0x0053F849;
	__asm        cmp    dword ptr [ebp-0x3C], 0x27;
	__asm        jge    near ptr 0x0053F79F;
	__asm        cmp    dword ptr [ebp-0x3C], 0x1D;
	__asm        jl     near ptr 0x0053F80B;
	__asm        cmp    dword ptr [ebp-0x3C], 0x26;
	__asm        jle    near ptr 0x0053F793;
	__asm        jmp    near ptr 0x0053F80B;
	__asm        cmp    dword ptr [ebp-0x3C], 0x50;
	__asm        jg     near ptr 0x0053F876;
	__asm        cmp    dword ptr [ebp-0x3C], 0x49;
	__asm        jge    near ptr 0x0053F7B7;
	__asm        cmp    dword ptr [ebp-0x3C], 0x3F;
	__asm        jl     near ptr 0x0053F80B;
	__asm        cmp    dword ptr [ebp-0x3C], 0x46;
	__asm        jle    near ptr 0x0053F7AB;
	__asm        jmp    near ptr 0x0053F80B;
	__asm        cmp    dword ptr [ebp-0x3C], 0x59;
	__asm        jg     near ptr 0x0053F8A3;
	__asm        cmp    dword ptr [ebp-0x3C], 0x57;
	__asm        jge    near ptr 0x0053F7CF;
	__asm        cmp    dword ptr [ebp-0x3C], 0x51;
	__asm        jl     near ptr 0x0053F80B;
	__asm        cmp    dword ptr [ebp-0x3C], 0x56;
	__asm        jle    near ptr 0x0053F7C3;
	__asm        jmp    near ptr 0x0053F80B;
	__asm        cmp    dword ptr [ebp-0x3C], 0x68;
	__asm        jg     near ptr 0x0053F8D0;
	__asm        cmp    dword ptr [ebp-0x3C], 0x61;
	__asm        jge    near ptr 0x0053F7E7;
	__asm        cmp    dword ptr [ebp-0x3C], 0x5D;
	__asm        jl     near ptr 0x0053F80B;
	__asm        cmp    dword ptr [ebp-0x3C], 0x60;
	__asm        jle    near ptr 0x0053F7DB;
	__asm        jmp    near ptr 0x0053F80B;
	__asm        cmp    dword ptr [ebp-0x3C], 0x8056;
	__asm        jg     near ptr 0x0053F90D;
	__asm        cmp    dword ptr [ebp-0x3C], 0x8051;
	__asm        jge    near ptr 0x0053F7C3;
	__asm        cmp    dword ptr [ebp-0x3C], 0x69;
	__asm        je     near ptr 0x0053F7F3;
	__asm        cmp    dword ptr [ebp-0x3C], 0x6A;
	__asm        jl     near ptr 0x0053F80B;
	__asm        cmp    dword ptr [ebp-0x3C], 0x6B;
	__asm        jle    near ptr 0x0053F7FF;
	__asm        jmp    near ptr 0x0053F80B;
	__asm        sub    dword ptr [ebp-0x3C], 0x8057;
	__asm        cmp    dword ptr [ebp-0x3C], 0x14;
	__asm        ja     near ptr 0x0053F80B;
	__asm        mov    eax, [ebp-0x3C];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x53F940];
	__asm        jmp    dword ptr [ecx*4+0x53F930];
	__asm        iretd;
	__asm        not    dword ptr [ebx];
	__asm        fcomi  st, st(7);
	__asm        push   ebx;
	__asm        add    bh, bh;
	__asm        not    dword ptr [ebx];
	__asm        or     edi, eax;
	__asm        push   ebx;
	__asm        add    [eax], al;
	__asm        add    [eax], al;
	__asm        add    eax, [ebx];
	__asm        add    eax, [ecx];
	__asm        add    [ecx], eax;
	__asm        add    [ebx], eax;
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    al, [edx];
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4-8];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x10], ax;
// LINE 1143:
	__asm        jmp    near ptr 0x00540481;
// LINE 1146:
	__asm        cmp    x, 0;
	__asm        jle    near ptr 0x0053FC14;
	__asm        cmp    y, 0x7F;
	__asm        jge    near ptr 0x0053FC14;
// LINE 1147:
	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053FC14;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053FC14;
// LINE 1149:
	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        mov    yindex, al;
// LINE 1150:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+4], al;
// LINE 1151:
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+5], al;
// LINE 1152:
	__asm        mov    dword ptr [ebp-0x40], 0x5F;
	__asm        jmp    near ptr 0x0053FABA;
	__asm        mov    dword ptr [ebp-0x18], 8;
	__asm        jmp    near ptr 0x0053FBF3;
	__asm        mov    dword ptr [ebp-0x18], 0xA;
	__asm        jmp    near ptr 0x0053FBF3;
	__asm        mov    dword ptr [ebp-0x18], 8;
	__asm        jmp    near ptr 0x0053FBF3;
	__asm        mov    dword ptr [ebp-0x18], 4;
	__asm        jmp    near ptr 0x0053FBF3;
	__asm        mov    dword ptr [ebp-0x18], 8;
	__asm        jmp    near ptr 0x0053FBF3;
	__asm        mov    dword ptr [ebp-0x18], 8;
	__asm        jmp    near ptr 0x0053FBF3;
	__asm        mov    dword ptr [ebp-0x18], 0xA;
	__asm        jmp    near ptr 0x0053FBF3;
	__asm        mov    dword ptr [ebp-0x18], 8;
	__asm        jmp    near ptr 0x0053FBF3;
	__asm        mov    dword ptr [ebp-0x18], 0xA;
	__asm        jmp    near ptr 0x0053FBF3;
	__asm        mov    dword ptr [ebp-0x18], 4;
	__asm        jmp    near ptr 0x0053FBF3;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x0053FBF3;
	__asm        jmp    near ptr 0x0053FBF3;
	__asm        cmp    dword ptr [ebp-0x40], 0x2B;
	__asm        jg     near ptr 0x0053FAE7;
	__asm        cmp    dword ptr [ebp-0x40], 0x27;
	__asm        jge    near ptr 0x0053FA3D;
	__asm        cmp    dword ptr [ebp-0x40], 0x1D;
	__asm        jl     near ptr 0x0053FAA9;
	__asm        cmp    dword ptr [ebp-0x40], 0x26;
	__asm        jle    near ptr 0x0053FA31;
	__asm        jmp    near ptr 0x0053FAA9;
	__asm        cmp    dword ptr [ebp-0x40], 0x50;
	__asm        jg     near ptr 0x0053FB14;
	__asm        cmp    dword ptr [ebp-0x40], 0x49;
	__asm        jge    near ptr 0x0053FA55;
	__asm        cmp    dword ptr [ebp-0x40], 0x3F;
	__asm        jl     near ptr 0x0053FAA9;
	__asm        cmp    dword ptr [ebp-0x40], 0x46;
	__asm        jle    near ptr 0x0053FA49;
	__asm        jmp    near ptr 0x0053FAA9;
	__asm        cmp    dword ptr [ebp-0x40], 0x59;
	__asm        jg     near ptr 0x0053FB41;
	__asm        cmp    dword ptr [ebp-0x40], 0x57;
	__asm        jge    near ptr 0x0053FA6D;
	__asm        cmp    dword ptr [ebp-0x40], 0x51;
	__asm        jl     near ptr 0x0053FAA9;
	__asm        cmp    dword ptr [ebp-0x40], 0x56;
	__asm        jle    near ptr 0x0053FA61;
	__asm        jmp    near ptr 0x0053FAA9;
	__asm        cmp    dword ptr [ebp-0x40], 0x68;
	__asm        jg     near ptr 0x0053FB6E;
	__asm        cmp    dword ptr [ebp-0x40], 0x61;
	__asm        jge    near ptr 0x0053FA85;
	__asm        cmp    dword ptr [ebp-0x40], 0x5D;
	__asm        jl     near ptr 0x0053FAA9;
	__asm        cmp    dword ptr [ebp-0x40], 0x60;
	__asm        jle    near ptr 0x0053FA79;
	__asm        jmp    near ptr 0x0053FAA9;
	__asm        cmp    dword ptr [ebp-0x40], 0x8056;
	__asm        jg     near ptr 0x0053FBAB;
	__asm        cmp    dword ptr [ebp-0x40], 0x8051;
	__asm        jge    near ptr 0x0053FA61;
	__asm        cmp    dword ptr [ebp-0x40], 0x69;
	__asm        je     near ptr 0x0053FA91;
	__asm        cmp    dword ptr [ebp-0x40], 0x6A;
	__asm        jl     near ptr 0x0053FAA9;
	__asm        cmp    dword ptr [ebp-0x40], 0x6B;
	__asm        jle    near ptr 0x0053FA9D;
	__asm        jmp    near ptr 0x0053FAA9;
	__asm        sub    dword ptr [ebp-0x40], 0x8057;
	__asm        cmp    dword ptr [ebp-0x40], 0x14;
	__asm        ja     near ptr 0x0053FAA9;
	__asm        mov    eax, [ebp-0x40];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x53FBDE];
	__asm        jmp    dword ptr [ecx*4+0x53FBCE];
	__asm        insd;
	__asm        cli;
	__asm        push   ebx;
	__asm        add    [ecx-6], bh;
	__asm        push   ebx;
	__asm        add    [ebp-0x56FFAC06], bl;
	__asm        cli;
	__asm        push   ebx;
	__asm        add    [eax], al;
	__asm        add    [eax], al;
	__asm        add    eax, [ebx];
	__asm        add    eax, [ecx];
	__asm        add    [ecx], eax;
	__asm        add    [ebx], eax;
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    al, [edx];
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+6], ax;
// LINE 1154:
	__asm        jmp    near ptr 0x00540481;
// LINE 1157:
	__asm        cmp    x, 0;
	__asm        jle    near ptr 0x0053FEB1;
	__asm        cmp    y, 0x7F;
	__asm        jge    near ptr 0x0053FEB1;
// LINE 1158:
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053FEB1;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053FEB1;
// LINE 1160:
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        mov    yindex, al;
// LINE 1161:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x18], al;
// LINE 1162:
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x19], al;
// LINE 1163:
	__asm        mov    dword ptr [ebp-0x44], 0x805F;
	__asm        jmp    near ptr 0x0053FD57;
	__asm        mov    dword ptr [ebp-0x1C], 8;
	__asm        jmp    near ptr 0x0053FE90;
	__asm        mov    dword ptr [ebp-0x1C], 0xA;
	__asm        jmp    near ptr 0x0053FE90;
	__asm        mov    dword ptr [ebp-0x1C], 8;
	__asm        jmp    near ptr 0x0053FE90;
	__asm        mov    dword ptr [ebp-0x1C], 4;
	__asm        jmp    near ptr 0x0053FE90;
	__asm        mov    dword ptr [ebp-0x1C], 8;
	__asm        jmp    near ptr 0x0053FE90;
	__asm        mov    dword ptr [ebp-0x1C], 8;
	__asm        jmp    near ptr 0x0053FE90;
	__asm        mov    dword ptr [ebp-0x1C], 0xA;
	__asm        jmp    near ptr 0x0053FE90;
	__asm        mov    dword ptr [ebp-0x1C], 8;
	__asm        jmp    near ptr 0x0053FE90;
	__asm        mov    dword ptr [ebp-0x1C], 0xA;
	__asm        jmp    near ptr 0x0053FE90;
	__asm        mov    dword ptr [ebp-0x1C], 4;
	__asm        jmp    near ptr 0x0053FE90;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x0053FE90;
	__asm        jmp    near ptr 0x0053FE90;
	__asm        cmp    dword ptr [ebp-0x44], 0x2B;
	__asm        jg     near ptr 0x0053FD84;
	__asm        cmp    dword ptr [ebp-0x44], 0x27;
	__asm        jge    near ptr 0x0053FCDA;
	__asm        cmp    dword ptr [ebp-0x44], 0x1D;
	__asm        jl     near ptr 0x0053FD46;
	__asm        cmp    dword ptr [ebp-0x44], 0x26;
	__asm        jle    near ptr 0x0053FCCE;
	__asm        jmp    near ptr 0x0053FD46;
	__asm        cmp    dword ptr [ebp-0x44], 0x50;
	__asm        jg     near ptr 0x0053FDB1;
	__asm        cmp    dword ptr [ebp-0x44], 0x49;
	__asm        jge    near ptr 0x0053FCF2;
	__asm        cmp    dword ptr [ebp-0x44], 0x3F;
	__asm        jl     near ptr 0x0053FD46;
	__asm        cmp    dword ptr [ebp-0x44], 0x46;
	__asm        jle    near ptr 0x0053FCE6;
	__asm        jmp    near ptr 0x0053FD46;
	__asm        cmp    dword ptr [ebp-0x44], 0x59;
	__asm        jg     near ptr 0x0053FDDE;
	__asm        cmp    dword ptr [ebp-0x44], 0x57;
	__asm        jge    near ptr 0x0053FD0A;
	__asm        cmp    dword ptr [ebp-0x44], 0x51;
	__asm        jl     near ptr 0x0053FD46;
	__asm        cmp    dword ptr [ebp-0x44], 0x56;
	__asm        jle    near ptr 0x0053FCFE;
	__asm        jmp    near ptr 0x0053FD46;
	__asm        cmp    dword ptr [ebp-0x44], 0x68;
	__asm        jg     near ptr 0x0053FE0B;
	__asm        cmp    dword ptr [ebp-0x44], 0x61;
	__asm        jge    near ptr 0x0053FD22;
	__asm        cmp    dword ptr [ebp-0x44], 0x5D;
	__asm        jl     near ptr 0x0053FD46;
	__asm        cmp    dword ptr [ebp-0x44], 0x60;
	__asm        jle    near ptr 0x0053FD16;
	__asm        jmp    near ptr 0x0053FD46;
	__asm        cmp    dword ptr [ebp-0x44], 0x8056;
	__asm        jg     near ptr 0x0053FE48;
	__asm        cmp    dword ptr [ebp-0x44], 0x8051;
	__asm        jge    near ptr 0x0053FCFE;
	__asm        cmp    dword ptr [ebp-0x44], 0x69;
	__asm        je     near ptr 0x0053FD2E;
	__asm        cmp    dword ptr [ebp-0x44], 0x6A;
	__asm        jl     near ptr 0x0053FD46;
	__asm        cmp    dword ptr [ebp-0x44], 0x6B;
	__asm        jle    near ptr 0x0053FD3A;
	__asm        jmp    near ptr 0x0053FD46;
	__asm        sub    dword ptr [ebp-0x44], 0x8057;
	__asm        cmp    dword ptr [ebp-0x44], 0x14;
	__asm        ja     near ptr 0x0053FD46;
	__asm        mov    eax, [ebp-0x44];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x53FE7B];
	__asm        jmp    dword ptr [ecx*4+0x53FE6B];
	__asm        or     bh, ch;
	__asm        push   ebx;
	__asm        add    [esi], dl;
	__asm        std;
	__asm        push   ebx;
	__asm        add    [edx], bh;
	__asm        std;
	__asm        push   ebx;
	__asm        add    [esi-3], al;
	__asm        push   ebx;
	__asm        add    [eax], al;
	__asm        add    [eax], al;
	__asm        add    eax, [ebx];
	__asm        add    eax, [ecx];
	__asm        add    [ecx], eax;
	__asm        add    [ebx], eax;
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    al, [edx];
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x1A], ax;
// LINE 1165:
	__asm        jmp    near ptr 0x00540481;
// LINE 1168:
	__asm        cmp    x, 0x7F;
	__asm        jge    near ptr 0x00540150;
	__asm        cmp    y, 0x7F;
	__asm        jge    near ptr 0x00540150;
// LINE 1169:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00540150;
	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00540150;
// LINE 1171:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        mov    yindex, al;
// LINE 1172:
	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4+4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x22], al;
// LINE 1173:
	__asm        mov    al, reinterpret_cast<uint8_t>(x);
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4+4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x23], al;
// LINE 1174:
	__asm        mov    dword ptr [ebp-0x48], 0x60;
	__asm        jmp    near ptr 0x0053FFF5;
	__asm        mov    dword ptr [ebp-0x20], 8;
	__asm        jmp    near ptr 0x0054012E;
	__asm        mov    dword ptr [ebp-0x20], 0xA;
	__asm        jmp    near ptr 0x0054012E;
	__asm        mov    dword ptr [ebp-0x20], 8;
	__asm        jmp    near ptr 0x0054012E;
	__asm        mov    dword ptr [ebp-0x20], 4;
	__asm        jmp    near ptr 0x0054012E;
	__asm        mov    dword ptr [ebp-0x20], 8;
	__asm        jmp    near ptr 0x0054012E;
	__asm        mov    dword ptr [ebp-0x20], 8;
	__asm        jmp    near ptr 0x0054012E;
	__asm        mov    dword ptr [ebp-0x20], 0xA;
	__asm        jmp    near ptr 0x0054012E;
	__asm        mov    dword ptr [ebp-0x20], 8;
	__asm        jmp    near ptr 0x0054012E;
	__asm        mov    dword ptr [ebp-0x20], 0xA;
	__asm        jmp    near ptr 0x0054012E;
	__asm        mov    dword ptr [ebp-0x20], 4;
	__asm        jmp    near ptr 0x0054012E;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x0054012E;
	__asm        jmp    near ptr 0x0054012E;
	__asm        cmp    dword ptr [ebp-0x48], 0x2B;
	__asm        jg     near ptr 0x00540022;
	__asm        cmp    dword ptr [ebp-0x48], 0x27;
	__asm        jge    near ptr 0x0053FF78;
	__asm        cmp    dword ptr [ebp-0x48], 0x1D;
	__asm        jl     near ptr 0x0053FFE4;
	__asm        cmp    dword ptr [ebp-0x48], 0x26;
	__asm        jle    near ptr 0x0053FF6C;
	__asm        jmp    near ptr 0x0053FFE4;
	__asm        cmp    dword ptr [ebp-0x48], 0x50;
	__asm        jg     near ptr 0x0054004F;
	__asm        cmp    dword ptr [ebp-0x48], 0x49;
	__asm        jge    near ptr 0x0053FF90;
	__asm        cmp    dword ptr [ebp-0x48], 0x3F;
	__asm        jl     near ptr 0x0053FFE4;
	__asm        cmp    dword ptr [ebp-0x48], 0x46;
	__asm        jle    near ptr 0x0053FF84;
	__asm        jmp    near ptr 0x0053FFE4;
	__asm        cmp    dword ptr [ebp-0x48], 0x59;
	__asm        jg     near ptr 0x0054007C;
	__asm        cmp    dword ptr [ebp-0x48], 0x57;
	__asm        jge    near ptr 0x0053FFA8;
	__asm        cmp    dword ptr [ebp-0x48], 0x51;
	__asm        jl     near ptr 0x0053FFE4;
	__asm        cmp    dword ptr [ebp-0x48], 0x56;
	__asm        jle    near ptr 0x0053FF9C;
	__asm        jmp    near ptr 0x0053FFE4;
	__asm        cmp    dword ptr [ebp-0x48], 0x68;
	__asm        jg     near ptr 0x005400A9;
	__asm        cmp    dword ptr [ebp-0x48], 0x61;
	__asm        jge    near ptr 0x0053FFC0;
	__asm        cmp    dword ptr [ebp-0x48], 0x5D;
	__asm        jl     near ptr 0x0053FFE4;
	__asm        cmp    dword ptr [ebp-0x48], 0x60;
	__asm        jle    near ptr 0x0053FFB4;
	__asm        jmp    near ptr 0x0053FFE4;
	__asm        cmp    dword ptr [ebp-0x48], 0x8056;
	__asm        jg     near ptr 0x005400E6;
	__asm        cmp    dword ptr [ebp-0x48], 0x8051;
	__asm        jge    near ptr 0x0053FF9C;
	__asm        cmp    dword ptr [ebp-0x48], 0x69;
	__asm        je     near ptr 0x0053FFCC;
	__asm        cmp    dword ptr [ebp-0x48], 0x6A;
	__asm        jl     near ptr 0x0053FFE4;
	__asm        cmp    dword ptr [ebp-0x48], 0x6B;
	__asm        jle    near ptr 0x0053FFD8;
	__asm        jmp    near ptr 0x0053FFE4;
	__asm        sub    dword ptr [ebp-0x48], 0x8057;
	__asm        cmp    dword ptr [ebp-0x48], 0x14;
	__asm        ja     near ptr 0x0053FFE4;
	__asm        mov    eax, [ebp-0x48];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x540119];
	__asm        jmp    dword ptr [ecx*4+0x540109];
	__asm        test   al, 0xFF;
	__asm        push   ebx;
	__asm        add    [edi+edi*8-0x27FFAD], dh;
	__asm        push   ebx;
	__asm        add    ah, ah;
	__asm        call   dword ptr [ebx];
	__asm        add    [eax], al;
	__asm        add    [ebx], al;
	__asm        add    eax, [ebx];
	__asm        add    [ecx], eax;
	__asm        add    [ecx], eax;
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [edx];
	__asm        add    cl, [ebx+0x4D8BE045];
	__asm        or     [ebx+0x4C8BD855], cl;
	__asm        mov    al, [ebx+esi];
	__asm        ror    byte ptr [edx-0x257403AB], cl;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x24], ax;
// LINE 1176:
	__asm        jmp    near ptr 0x00540481;
// LINE 1179:
	__asm        cmp    x, 0x7F;
	__asm        jge    near ptr 0x005403EF;
	__asm        cmp    y, 0x7F;
	__asm        jge    near ptr 0x005403EF;
// LINE 1180:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005403EF;
	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005403EF;
// LINE 1182:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        mov    yindex, al;
// LINE 1183:
	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053D167;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4+4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x22], al;
// LINE 1184:
	__asm        mov    al, reinterpret_cast<uint8_t>(x);
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4+4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x23], al;
// LINE 1185:
	__asm        mov    dword ptr [ebp-0x4C], 0x8060;
	__asm        jmp    near ptr 0x00540294;
	__asm        mov    dword ptr [ebp-0x24], 8;
	__asm        jmp    near ptr 0x005403CD;
	__asm        mov    dword ptr [ebp-0x24], 0xA;
	__asm        jmp    near ptr 0x005403CD;
	__asm        mov    dword ptr [ebp-0x24], 8;
	__asm        jmp    near ptr 0x005403CD;
	__asm        mov    dword ptr [ebp-0x24], 4;
	__asm        jmp    near ptr 0x005403CD;
	__asm        mov    dword ptr [ebp-0x24], 8;
	__asm        jmp    near ptr 0x005403CD;
	__asm        mov    dword ptr [ebp-0x24], 8;
	__asm        jmp    near ptr 0x005403CD;
	__asm        mov    dword ptr [ebp-0x24], 0xA;
	__asm        jmp    near ptr 0x005403CD;
	__asm        mov    dword ptr [ebp-0x24], 8;
	__asm        jmp    near ptr 0x005403CD;
	__asm        mov    dword ptr [ebp-0x24], 0xA;
	__asm        jmp    near ptr 0x005403CD;
	__asm        mov    dword ptr [ebp-0x24], 4;
	__asm        jmp    near ptr 0x005403CD;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    near ptr 0x005403CD;
	__asm        jmp    near ptr 0x005403CD;
	__asm        cmp    dword ptr [ebp-0x4C], 0x2B;
	__asm        jg     near ptr 0x005402C1;
	__asm        cmp    dword ptr [ebp-0x4C], 0x27;
	__asm        jge    near ptr 0x00540217;
	__asm        cmp    dword ptr [ebp-0x4C], 0x1D;
	__asm        jl     near ptr 0x00540283;
	__asm        cmp    dword ptr [ebp-0x4C], 0x26;
	__asm        jle    near ptr 0x0054020B;
	__asm        jmp    near ptr 0x00540283;
	__asm        cmp    dword ptr [ebp-0x4C], 0x50;
	__asm        jg     near ptr 0x005402EE;
	__asm        cmp    dword ptr [ebp-0x4C], 0x49;
	__asm        jge    near ptr 0x0054022F;
	__asm        cmp    dword ptr [ebp-0x4C], 0x3F;
	__asm        jl     near ptr 0x00540283;
	__asm        cmp    dword ptr [ebp-0x4C], 0x46;
	__asm        jle    near ptr 0x00540223;
	__asm        jmp    near ptr 0x00540283;
	__asm        cmp    dword ptr [ebp-0x4C], 0x59;
	__asm        jg     near ptr 0x0054031B;
	__asm        cmp    dword ptr [ebp-0x4C], 0x57;
	__asm        jge    near ptr 0x00540247;
	__asm        cmp    dword ptr [ebp-0x4C], 0x51;
	__asm        jl     near ptr 0x00540283;
	__asm        cmp    dword ptr [ebp-0x4C], 0x56;
	__asm        jle    near ptr 0x0054023B;
	__asm        jmp    near ptr 0x00540283;
	__asm        cmp    dword ptr [ebp-0x4C], 0x68;
	__asm        jg     near ptr 0x00540348;
	__asm        cmp    dword ptr [ebp-0x4C], 0x61;
	__asm        jge    near ptr 0x0054025F;
	__asm        cmp    dword ptr [ebp-0x4C], 0x5D;
	__asm        jl     near ptr 0x00540283;
	__asm        cmp    dword ptr [ebp-0x4C], 0x60;
	__asm        jle    near ptr 0x00540253;
	__asm        jmp    near ptr 0x00540283;
	__asm        cmp    dword ptr [ebp-0x4C], 0x8056;
	__asm        jg     near ptr 0x00540385;
	__asm        cmp    dword ptr [ebp-0x4C], 0x8051;
	__asm        jge    near ptr 0x0054023B;
	__asm        cmp    dword ptr [ebp-0x4C], 0x69;
	__asm        je     near ptr 0x0054026B;
	__asm        cmp    dword ptr [ebp-0x4C], 0x6A;
	__asm        jl     near ptr 0x00540283;
	__asm        cmp    dword ptr [ebp-0x4C], 0x6B;
	__asm        jle    near ptr 0x00540277;
	__asm        jmp    near ptr 0x00540283;
	__asm        sub    dword ptr [ebp-0x4C], 0x8057;
	__asm        cmp    dword ptr [ebp-0x4C], 0x14;
	__asm        ja     near ptr 0x00540283;
	__asm        mov    eax, [ebp-0x4C];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x5403B8];
	__asm        jmp    dword ptr [ecx*4+0x5403A8];
	__asm        inc    edi;
	__asm        add    dl, [eax+eax+0x53];
	__asm        add    dl, [eax+eax+0x77];
	__asm        add    dl, [eax+eax-0x7D];
	__asm        add    dl, [eax+eax];
	__asm        add    [eax], al;
	__asm        add    eax, [ebx];
	__asm        add    eax, [ecx];
	__asm        add    [ecx], eax;
	__asm        add    [ebx], eax;
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ebx];
	__asm        add    al, [edx];
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4+4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x24], ax;
// LINE 1187:
	__asm        jmp    near ptr 0x00540481;
// LINE 1190:
	__asm        push   0x4A6;
	__asm        push   0x5B8210;
	__asm        push   0x5B8234;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00540415;
	__asm        jmp    near ptr 0x00540415;
// LINE 1191:
	__asm        jmp    near ptr 0x00540481;
	__asm        cmp    dword ptr [ebp-0x2C], 0x805D;
	__asm        jg     near ptr 0x00540455;
	__asm        je     near ptr 0x0053F193;
	__asm        sub    dword ptr [ebp-0x2C], 0x5D;
	__asm        cmp    dword ptr [ebp-0x2C], 3;
	__asm        ja     near ptr 0x005403F4;
	__asm        mov    eax, [ebp-0x2C];
	__asm        jmp    dword ptr [eax*4+0x540445];
	__asm        out    dx, al;
	__asm        push   ebx;
	__asm        add    [esi], dh;
	__asm        hlt;
	__asm        push   ebx;
	__asm        add    [ecx+edi*8+0x53], bh;
	__asm        add    [esi-0x7EFFAC02], dh;
	__asm        jge    short 0x0054042C;
	__asm        pop    esi;
	__asm        add    byte ptr [eax], 0;
	__asm        je     near ptr 0x0053F6D9;
	__asm        cmp    dword ptr [ebp-0x2C], 0x805F;
	__asm        je     near ptr 0x0053FC19;
	__asm        cmp    dword ptr [ebp-0x2C], 0x8060;
	__asm        je     near ptr 0x00540155;
	__asm        jmp    near ptr 0x005403F4;
// LINE 1192:
	__asm        jmp    near ptr 0x00540486;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0054048d
void RoadGraph::FindRoads(int32_t x, int32_t y, struct RGVertex* pRGV) {
	int32_t stepSize;
	int32_t Offset;
	unsigned short fromTile;

// LINE 1197:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1198:
	__asm        cmp    x, 0;
	__asm        jl     near ptr 0x005404C7;
	__asm        cmp    y, 0;
	__asm        jl     near ptr 0x005404C7;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x005404C7;
	__asm        cmp    y, 0x80;
	__asm        jl     near ptr 0x005404D2;
	__asm        mov    fromTile, 0;
	__asm        jmp    near ptr 0x0054050A;
	__asm        mov    eax, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    fromTile, ax;
	__asm        jmp    near ptr 0x0054050A;
// LINE 1202:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x69;
	__asm        jne    near ptr 0x0054052E;
// LINE 1204:
	__asm        mov    stepSize, 2;
// LINE 1205:
	__asm        mov    Offset, 1;
// LINE 1207:
	__asm        jmp    near ptr 0x0054053C;
// LINE 1209:
	__asm        mov    stepSize, 1;
// LINE 1210:
	__asm        mov    Offset, 0;
// LINE 1213:
	__asm        mov    eax, Offset;
	__asm        cmp    y, eax;
	__asm        jle    near ptr 0x00540574;
// LINE 1215:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        test   cl, 1;
	__asm        je     near ptr 0x00540574;
// LINE 1216:
	__asm        push   0;
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    eax, pRGV;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00540636;
// LINE 1219:
	__asm        mov    eax, 0x7F;
	__asm        sub    eax, Offset;
	__asm        cmp    eax, x;
	__asm        jle    near ptr 0x005405B3;
// LINE 1221:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        test   cl, 2;
	__asm        je     near ptr 0x005405B3;
// LINE 1222:
	__asm        push   1;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        add    eax, stepSize;
	__asm        push   eax;
	__asm        mov    eax, pRGV;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00540636;
// LINE 1225:
	__asm        mov    eax, 0x7F;
	__asm        sub    eax, Offset;
	__asm        cmp    eax, y;
	__asm        jle    near ptr 0x005405F2;
// LINE 1227:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        test   cl, 4;
	__asm        je     near ptr 0x005405F2;
// LINE 1228:
	__asm        push   2;
	__asm        mov    eax, y;
	__asm        add    eax, stepSize;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    eax, pRGV;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00540636;
// LINE 1231:
	__asm        mov    eax, Offset;
	__asm        cmp    x, eax;
	__asm        jle    near ptr 0x0054062A;
// LINE 1233:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        test   cl, 8;
	__asm        je     near ptr 0x0054062A;
// LINE 1234:
	__asm        push   3;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, pRGV;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00540636;
// LINE 1236:
	__asm        jmp    near ptr 0x0054062F;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00540636
void RoadGraph::MakeRoad(struct RGVertex* pRGV, unsigned char x, unsigned char y, enum DirIndex2 currentDir) {
	int32_t repeatCount;
	enum DirIndex2 returnStatus;
	int32_t element;
	struct Edge* pEdge;
	enum DirIndex2 returnDir;
	int32_t decrementFlag;
	struct _GridCoordinates startLoc;
	int32_t fStart;
	short lastAlt;
	struct Road* pRoad;
	int32_t deadEnd;

// LINE 1254:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x78;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1259:
	__asm        mov    element, 0;
// LINE 1260:
	__asm        mov    repeatCount, 0;
// LINE 1261:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, currentDir;
	__asm        and    ecx, [eax*4+0x593430];
	__asm        mov    deadEnd, ecx;
// LINE 1262:
	__asm        mov    decrementFlag, 0;
// LINE 1266:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        push   eax;
	__asm        call   0x00539260;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00540694;
	__asm        jmp    near ptr 0x00541129;
// LINE 1270:
	__asm        mov    al, x;
	__asm        mov    startLoc.x, al;
// LINE 1271:
	__asm        mov    al, y;
	__asm        mov    startLoc.y, al;
// LINE 1275:
	__asm        mov    eax, currentDir;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, eax;
	__asm        add    eax, pRGV;
	__asm        add    eax, 4;
	__asm        mov    pEdge, eax;
// LINE 1276:
	__asm        mov    eax, pEdge;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+4];
	__asm        lea    eax, [ecx*2];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x647200];
	__asm        push   eax;
	__asm        call   0x004CB4AC;
	__asm        add    esp, 8;
	__asm        mov    ecx, pEdge;
	__asm        mov    [ecx+6], eax;
// LINE 1281:
	__asm        mov    eax, pEdge;
	__asm        mov    eax, [eax+6];
	__asm        mov    pRoad, eax;
// LINE 1282:
	__asm        cmp    deadEnd, 0;
	__asm        je     near ptr 0x00540983;
	__asm        mov    eax, pEdge;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+4];
	__asm        cmp    ecx, 1;
	__asm        jne    near ptr 0x00540983;
// LINE 1284:
	__asm        mov    eax, pRoad;
	__asm        mov    byte ptr [eax+1], 0;
// LINE 1285:
	__asm        mov    eax, currentDir;
	__asm        sub    eax, 2;
	__asm        and    al, 3;
	__asm        mov    ecx, pRoad;
	__asm        mov    cl, [ecx];
	__asm        and    cl, 0xFC;
	__asm        or     al, cl;
	__asm        mov    ecx, pRoad;
	__asm        mov    [ecx], al;
// LINE 1288:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00540753;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00540753;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x00540753;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x0054075E;
	__asm        mov    word ptr [ebp-0x50], 0;
	__asm        jmp    near ptr 0x0054079E;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x50], ax;
	__asm        jmp    near ptr 0x0054079E;
	__asm        mov    eax, [ebp-0x50];
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x005407CB;
	__asm        mov    dword ptr [ebp-0x30], 1;
	__asm        jmp    near ptr 0x00540817;
	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        jmp    near ptr 0x00540817;
	__asm        jmp    near ptr 0x00540817;
	__asm        cmp    dword ptr [ebp-0x58], 0x6B;
	__asm        jg     near ptr 0x005407F8;
	__asm        cmp    dword ptr [ebp-0x58], 0x61;
	__asm        jge    near ptr 0x005407AE;
	__asm        cmp    dword ptr [ebp-0x58], 0x49;
	__asm        jl     near ptr 0x005407BA;
	__asm        cmp    dword ptr [ebp-0x58], 0x50;
	__asm        jle    near ptr 0x005407AE;
	__asm        jmp    near ptr 0x005407BA;
	__asm        cmp    dword ptr [ebp-0x58], 0x806A;
	__asm        jl     near ptr 0x005407BA;
	__asm        cmp    dword ptr [ebp-0x58], 0x806B;
	__asm        jle    near ptr 0x005407AE;
	__asm        jmp    near ptr 0x005407BA;
	__asm        mov    eax, [ebp-0x30];
	__asm        and    al, 1;
	__asm        shl    al, 4;
	__asm        mov    ecx, pRoad;
	__asm        mov    cl, [ecx];
	__asm        and    cl, 0xEF;
	__asm        or     al, cl;
	__asm        mov    ecx, pRoad;
	__asm        mov    [ecx], al;
// LINE 1289:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00540868;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x00540868;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00540868;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x00540874;
	__asm        mov    dword ptr [ebp-0x34], 1;
	__asm        jmp    near ptr 0x00540967;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, [eax*4+0x639850];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        mov    [ebp-0x5C], edx;
	__asm        jmp    near ptr 0x0054093F;
	__asm        cmp    currentDir, 3;
	__asm        jne    near ptr 0x005408A8;
	__asm        mov    dword ptr [ebp-0x34], 2;
	__asm        jmp    near ptr 0x005408AF;
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x00540967;
	__asm        jmp    near ptr 0x00540967;
	__asm        cmp    currentDir, 0;
	__asm        jne    near ptr 0x005408CF;
	__asm        mov    dword ptr [ebp-0x34], 2;
	__asm        jmp    near ptr 0x005408D6;
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x00540967;
	__asm        jmp    near ptr 0x00540967;
	__asm        cmp    currentDir, 1;
	__asm        jne    near ptr 0x005408F6;
	__asm        mov    dword ptr [ebp-0x34], 2;
	__asm        jmp    near ptr 0x005408FD;
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x00540967;
	__asm        jmp    near ptr 0x00540967;
	__asm        cmp    currentDir, 2;
	__asm        jne    near ptr 0x0054091D;
	__asm        mov    dword ptr [ebp-0x34], 2;
	__asm        jmp    near ptr 0x00540924;
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x00540967;
	__asm        jmp    near ptr 0x00540967;
	__asm        mov    dword ptr [ebp-0x34], 1;
	__asm        jmp    near ptr 0x00540967;
	__asm        jmp    near ptr 0x00540967;
	__asm        sub    dword ptr [ebp-0x5C], 0x1F;
	__asm        cmp    dword ptr [ebp-0x5C], 3;
	__asm        ja     near ptr 0x0054092E;
	__asm        mov    eax, [ebp-0x5C];
	__asm        jmp    dword ptr [eax*4+0x540957];
	__asm        xchg   edx, eax;
	__asm        or     [eax+eax-0x47], dl;
	__asm        or     [eax+eax-0x20], dl;
	__asm        or     [eax+eax+7], dl;
	__asm        or     [eax+eax-0x75], edx;
	__asm        inc    ebp;
	__asm        int    3;
	__asm        and    al, 3;
	__asm        shl    al, 2;
	__asm        mov    ecx, pRoad;
	__asm        mov    cl, [ecx];
	__asm        and    cl, 0xF3;
	__asm        or     al, cl;
	__asm        mov    ecx, pRoad;
	__asm        mov    [ecx], al;
// LINE 1290:
	__asm        jmp    near ptr 0x00541129;
// LINE 1296:
	__asm        cmp    deadEnd, 0;
	__asm        jne    near ptr 0x00540A31;
// LINE 1300:
	__asm        mov    eax, reinterpret_cast<uint32_t>(y);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(x);
	__asm        push   eax;
	__asm        lea    eax, returnDir;
	__asm        push   eax;
	__asm        mov    eax, currentDir;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053E8B0;
	__asm        mov    returnStatus, eax;
// LINE 1301:
	__asm        cmp    returnStatus, 0xFFFFFFFF;
	__asm        jne    near ptr 0x005409B7;
// LINE 1302:
	__asm        jmp    near ptr 0x00540A25;
// LINE 1304:
	__asm        cmp    returnStatus, 0xFFFFFFFE;
	__asm        jne    near ptr 0x005409C6;
// LINE 1305:
	__asm        jmp    near ptr 0x00540A25;
// LINE 1307:
	__asm        mov    eax, returnDir;
	__asm        mov    currentDir, eax;
// LINE 1308:
	__asm        mov    eax, currentDir;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x005409FC;
// LINE 1310:
	__asm        dec    y;
	__asm        jmp    near ptr 0x00540A20;
// LINE 1311:
	__asm        inc    x;
	__asm        jmp    near ptr 0x00540A20;
// LINE 1312:
	__asm        inc    y;
	__asm        jmp    near ptr 0x00540A20;
// LINE 1313:
	__asm        dec    x;
	__asm        jmp    near ptr 0x00540A20;
// LINE 1314:
	__asm        jmp    near ptr 0x00540A20;
	__asm        cmp    dword ptr [ebp-0x60], 3;
	__asm        ja     near ptr 0x00540A20;
	__asm        mov    eax, [ebp-0x60];
	__asm        jmp    dword ptr [eax*4+0x540A10];
	__asm        xlatb;
	__asm        or     [eax+eax-0x21], edx;
	__asm        or     [eax+eax-0x19], edx;
	__asm        or     [eax+eax-0x11], edx;
	__asm        (bad);
// LINE 1315:
	__asm        jmp    near ptr 0x0054098D;
// LINE 1319:
	__asm        mov    eax, returnDir;
	__asm        sub    eax, 2;
	__asm        and    eax, 3;
	__asm        mov    currentDir, eax;
// LINE 1325:
	__asm        mov    eax, pEdge;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+4];
	__asm        dec    ecx;
	__asm        mov    element, ecx;
// LINE 1326:
	__asm        mov    eax, pEdge;
	__asm        mov    eax, [eax+6];
	__asm        mov    ecx, element;
	__asm        lea    eax, [eax+ecx*2];
	__asm        mov    pRoad, eax;
// LINE 1327:
	__asm        mov    eax, pRoad;
	__asm        mov    byte ptr [eax+1], 0;
// LINE 1328:
	__asm        mov    eax, currentDir;
	__asm        sub    eax, 2;
	__asm        and    al, 3;
	__asm        mov    ecx, pRoad;
	__asm        mov    cl, [ecx];
	__asm        and    cl, 0xFC;
	__asm        or     al, cl;
	__asm        mov    ecx, pRoad;
	__asm        mov    [ecx], al;
// LINE 1331:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00540AA5;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00540AA5;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x00540AA5;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x00540AB0;
	__asm        mov    word ptr [ebp-0x4C], 0;
	__asm        jmp    near ptr 0x00540AF0;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x4C], ax;
	__asm        jmp    near ptr 0x00540AF0;
	__asm        mov    eax, [ebp-0x4C];
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x00540B1D;
	__asm        mov    dword ptr [ebp-0x38], 1;
	__asm        jmp    near ptr 0x00540B69;
	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        jmp    near ptr 0x00540B69;
	__asm        jmp    near ptr 0x00540B69;
	__asm        cmp    dword ptr [ebp-0x64], 0x6B;
	__asm        jg     near ptr 0x00540B4A;
	__asm        cmp    dword ptr [ebp-0x64], 0x61;
	__asm        jge    near ptr 0x00540B00;
	__asm        cmp    dword ptr [ebp-0x64], 0x49;
	__asm        jl     near ptr 0x00540B0C;
	__asm        cmp    dword ptr [ebp-0x64], 0x50;
	__asm        jle    near ptr 0x00540B00;
	__asm        jmp    near ptr 0x00540B0C;
	__asm        cmp    dword ptr [ebp-0x64], 0x806A;
	__asm        jl     near ptr 0x00540B0C;
	__asm        cmp    dword ptr [ebp-0x64], 0x806B;
	__asm        jle    near ptr 0x00540B00;
	__asm        jmp    near ptr 0x00540B0C;
	__asm        mov    eax, [ebp-0x38];
	__asm        and    al, 1;
	__asm        shl    al, 4;
	__asm        mov    ecx, pRoad;
	__asm        mov    cl, [ecx];
	__asm        and    cl, 0xEF;
	__asm        or     al, cl;
	__asm        mov    ecx, pRoad;
	__asm        mov    [ecx], al;
// LINE 1332:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00540BBA;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x00540BBA;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00540BBA;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x00540BC6;
	__asm        mov    dword ptr [ebp-0x3C], 1;
	__asm        jmp    near ptr 0x00540CB9;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, [eax*4+0x639850];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        mov    [ebp-0x68], edx;
	__asm        jmp    near ptr 0x00540C91;
	__asm        cmp    currentDir, 3;
	__asm        jne    near ptr 0x00540BFA;
	__asm        mov    dword ptr [ebp-0x3C], 2;
	__asm        jmp    near ptr 0x00540C01;
	__asm        mov    dword ptr [ebp-0x3C], 0;
	__asm        jmp    near ptr 0x00540CB9;
	__asm        jmp    near ptr 0x00540CB9;
	__asm        cmp    currentDir, 0;
	__asm        jne    near ptr 0x00540C21;
	__asm        mov    dword ptr [ebp-0x3C], 2;
	__asm        jmp    near ptr 0x00540C28;
	__asm        mov    dword ptr [ebp-0x3C], 0;
	__asm        jmp    near ptr 0x00540CB9;
	__asm        jmp    near ptr 0x00540CB9;
	__asm        cmp    currentDir, 1;
	__asm        jne    near ptr 0x00540C48;
	__asm        mov    dword ptr [ebp-0x3C], 2;
	__asm        jmp    near ptr 0x00540C4F;
	__asm        mov    dword ptr [ebp-0x3C], 0;
	__asm        jmp    near ptr 0x00540CB9;
	__asm        jmp    near ptr 0x00540CB9;
	__asm        cmp    currentDir, 2;
	__asm        jne    near ptr 0x00540C6F;
	__asm        mov    dword ptr [ebp-0x3C], 2;
	__asm        jmp    near ptr 0x00540C76;
	__asm        mov    dword ptr [ebp-0x3C], 0;
	__asm        jmp    near ptr 0x00540CB9;
	__asm        jmp    near ptr 0x00540CB9;
	__asm        mov    dword ptr [ebp-0x3C], 1;
	__asm        jmp    near ptr 0x00540CB9;
	__asm        jmp    near ptr 0x00540CB9;
	__asm        sub    dword ptr [ebp-0x68], 0x1F;
	__asm        cmp    dword ptr [ebp-0x68], 3;
	__asm        ja     near ptr 0x00540C80;
	__asm        mov    eax, [ebp-0x68];
	__asm        jmp    dword ptr [eax*4+0x540CA9];
	__asm        in     al, 0xB;
	__asm        push   esp;
	__asm        add    [ebx], cl;
	__asm        or     al, 0x54;
	__asm        add    [edx], dh;
	__asm        or     al, 0x54;
	__asm        add    [ecx+0xC], bl;
	__asm        push   esp;
	__asm        add    [ebx+0x324C445], cl;
	__asm        shl    al, 2;
	__asm        mov    ecx, pRoad;
	__asm        mov    cl, [ecx];
	__asm        and    cl, 0xF3;
	__asm        or     al, cl;
	__asm        mov    ecx, pRoad;
	__asm        mov    [ecx], al;
// LINE 1333:
	__asm        mov    fStart, 1;
// LINE 1336:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, [eax*4+0x639510];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dx, [eax+ecx*2];
	__asm        and    edx, 0x1F;
	__asm        mov    lastAlt, dx;
// LINE 1339:
	__asm        mov    eax, reinterpret_cast<uint32_t>(y);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(x);
	__asm        push   eax;
	__asm        lea    eax, returnDir;
	__asm        push   eax;
	__asm        mov    eax, currentDir;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053E8B0;
	__asm        mov    returnStatus, eax;
// LINE 1341:
	__asm        cmp    deadEnd, 0;
	__asm        je     near ptr 0x00540DCF;
// LINE 1343:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x00540D52;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x00540D52;
	__asm        cmp    fStart, 0;
	__asm        jne    near ptr 0x00540D52;
// LINE 1345:
	__asm        jmp    near ptr 0x00541124;
// LINE 1347:
	__asm        jmp    near ptr 0x00540DC3;
	__asm        cmp    returnStatus, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00540DC3;
// LINE 1349:
	__asm        mov    decrementFlag, 1;
// LINE 1351:
	__asm        mov    eax, currentDir;
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x00540D93;
// LINE 1353:
	__asm        dec    y;
	__asm        jmp    near ptr 0x00540DB7;
// LINE 1354:
	__asm        inc    x;
	__asm        jmp    near ptr 0x00540DB7;
// LINE 1355:
	__asm        inc    y;
	__asm        jmp    near ptr 0x00540DB7;
// LINE 1356:
	__asm        dec    x;
	__asm        jmp    near ptr 0x00540DB7;
// LINE 1357:
	__asm        jmp    near ptr 0x00540DB7;
	__asm        cmp    dword ptr [ebp-0x6C], 3;
	__asm        ja     near ptr 0x00540DB7;
	__asm        mov    eax, [ebp-0x6C];
	__asm        jmp    dword ptr [eax*4+0x540DA7];
	__asm        outsb;
	__asm        or     eax, 0xD760054;
	__asm        push   esp;
	__asm        add    [esi+0xD], bh;
	__asm        push   esp;
	__asm        (bad);
// LINE 1359:
	__asm        mov    eax, returnDir;
	__asm        sub    eax, 2;
	__asm        and    eax, 3;
	__asm        mov    returnDir, eax;
// LINE 1362:
	__asm        mov    fStart, 0;
// LINE 1364:
	__asm        jmp    near ptr 0x00540DDE;
// LINE 1366:
	__asm        cmp    returnStatus, 0xFFFFFFFE;
	__asm        jne    near ptr 0x00540DDE;
// LINE 1367:
	__asm        jmp    near ptr 0x00541124;
// LINE 1371:
	__asm        mov    eax, returnDir;
	__asm        cmp    currentDir, eax;
	__asm        jne    near ptr 0x00540DF5;
// LINE 1373:
	__asm        mov    eax, pRoad;
	__asm        inc    byte ptr [eax+1];
// LINE 1375:
	__asm        jmp    near ptr 0x005410AD;
// LINE 1377:
	__asm        mov    eax, returnDir;
	__asm        mov    currentDir, eax;
// LINE 1378:
	__asm        dec    element;
// LINE 1379:
	__asm        mov    eax, pEdge;
	__asm        mov    eax, [eax+6];
	__asm        mov    ecx, element;
	__asm        lea    eax, [eax+ecx*2];
	__asm        mov    pRoad, eax;
// LINE 1381:
	__asm        cmp    decrementFlag, 0;
	__asm        je     near ptr 0x00540E2A;
// LINE 1383:
	__asm        mov    eax, pRoad;
	__asm        mov    byte ptr [eax+1], 0xFF;
// LINE 1384:
	__asm        mov    decrementFlag, 0;
// LINE 1386:
	__asm        jmp    near ptr 0x00540E31;
// LINE 1387:
	__asm        mov    eax, pRoad;
	__asm        mov    byte ptr [eax+1], 0;
// LINE 1389:
	__asm        mov    eax, currentDir;
	__asm        sub    eax, 2;
	__asm        and    al, 3;
	__asm        mov    ecx, pRoad;
	__asm        mov    cl, [ecx];
	__asm        and    cl, 0xFC;
	__asm        or     al, cl;
	__asm        mov    ecx, pRoad;
	__asm        mov    [ecx], al;
// LINE 1392:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00540E82;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00540E82;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x00540E82;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x00540E8D;
	__asm        mov    word ptr [ebp-0x48], 0;
	__asm        jmp    near ptr 0x00540ECD;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x48], ax;
	__asm        jmp    near ptr 0x00540ECD;
	__asm        mov    eax, [ebp-0x48];
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    near ptr 0x00540EFA;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        jmp    near ptr 0x00540F46;
	__asm        mov    dword ptr [ebp-0x40], 0;
	__asm        jmp    near ptr 0x00540F46;
	__asm        jmp    near ptr 0x00540F46;
	__asm        cmp    dword ptr [ebp-0x70], 0x6B;
	__asm        jg     near ptr 0x00540F27;
	__asm        cmp    dword ptr [ebp-0x70], 0x61;
	__asm        jge    near ptr 0x00540EDD;
	__asm        cmp    dword ptr [ebp-0x70], 0x49;
	__asm        jl     near ptr 0x00540EE9;
	__asm        cmp    dword ptr [ebp-0x70], 0x50;
	__asm        jle    near ptr 0x00540EDD;
	__asm        jmp    near ptr 0x00540EE9;
	__asm        cmp    dword ptr [ebp-0x70], 0x806A;
	__asm        jl     near ptr 0x00540EE9;
	__asm        cmp    dword ptr [ebp-0x70], 0x806B;
	__asm        jle    near ptr 0x00540EDD;
	__asm        jmp    near ptr 0x00540EE9;
	__asm        mov    eax, [ebp-0x40];
	__asm        and    al, 1;
	__asm        shl    al, 4;
	__asm        mov    ecx, pRoad;
	__asm        mov    cl, [ecx];
	__asm        and    cl, 0xEF;
	__asm        or     al, cl;
	__asm        mov    ecx, pRoad;
	__asm        mov    [ecx], al;
// LINE 1393:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00540F97;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x00540F97;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00540F97;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x00540FA3;
	__asm        mov    dword ptr [ebp-0x44], 1;
	__asm        jmp    near ptr 0x00541096;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, [eax*4+0x639850];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        mov    [ebp-0x74], edx;
	__asm        jmp    near ptr 0x0054106E;
	__asm        cmp    currentDir, 3;
	__asm        jne    near ptr 0x00540FD7;
	__asm        mov    dword ptr [ebp-0x44], 2;
	__asm        jmp    near ptr 0x00540FDE;
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    near ptr 0x00541096;
	__asm        jmp    near ptr 0x00541096;
	__asm        cmp    currentDir, 0;
	__asm        jne    near ptr 0x00540FFE;
	__asm        mov    dword ptr [ebp-0x44], 2;
	__asm        jmp    near ptr 0x00541005;
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    near ptr 0x00541096;
	__asm        jmp    near ptr 0x00541096;
	__asm        cmp    currentDir, 1;
	__asm        jne    near ptr 0x00541025;
	__asm        mov    dword ptr [ebp-0x44], 2;
	__asm        jmp    near ptr 0x0054102C;
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    near ptr 0x00541096;
	__asm        jmp    near ptr 0x00541096;
	__asm        cmp    currentDir, 2;
	__asm        jne    near ptr 0x0054104C;
	__asm        mov    dword ptr [ebp-0x44], 2;
	__asm        jmp    near ptr 0x00541053;
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    near ptr 0x00541096;
	__asm        jmp    near ptr 0x00541096;
	__asm        mov    dword ptr [ebp-0x44], 1;
	__asm        jmp    near ptr 0x00541096;
	__asm        jmp    near ptr 0x00541096;
	__asm        sub    dword ptr [ebp-0x74], 0x1F;
	__asm        cmp    dword ptr [ebp-0x74], 3;
	__asm        ja     near ptr 0x0054105D;
	__asm        mov    eax, [ebp-0x74];
	__asm        jmp    dword ptr [eax*4+0x541086];
	__asm        ror    dword ptr [edi], 0x54;
	__asm        add    al, ch;
	__asm        andps  xmm0, [eax];
	__asm        movups xmm2, [eax+eax+0x36];
	__asm        adc    [eax+eax-0x75], dl;
	__asm        inc    ebp;
	__asm        mov    esp, 0xE0C00324;
	__asm        add    cl, [ebx+0x98AF84D];
	__asm        and    cl, 0xF3;
	__asm        or     al, cl;
	__asm        mov    ecx, pRoad;
	__asm        mov    [ecx], al;
// LINE 1396:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, [eax*4+0x639510];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dx, [eax+ecx*2];
	__asm        and    edx, 0x1F;
	__asm        mov    lastAlt, dx;
// LINE 1397:
	__asm        mov    eax, currentDir;
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x005410FB;
// LINE 1399:
	__asm        dec    y;
	__asm        jmp    near ptr 0x0054111F;
// LINE 1400:
	__asm        inc    x;
	__asm        jmp    near ptr 0x0054111F;
// LINE 1401:
	__asm        inc    y;
	__asm        jmp    near ptr 0x0054111F;
// LINE 1402:
	__asm        dec    x;
	__asm        jmp    near ptr 0x0054111F;
// LINE 1403:
	__asm        jmp    near ptr 0x0054111F;
	__asm        cmp    dword ptr [ebp-0x78], 3;
	__asm        ja     near ptr 0x0054111F;
	__asm        mov    eax, [ebp-0x78];
	__asm        jmp    dword ptr [eax*4+0x54110F];
	__asm        salc;
	__asm        adc    [eax+eax-0x22], dl;
	__asm        adc    [eax+eax-0x1A], dl;
	__asm        adc    [eax+eax-0x12], dl;
	__asm        (bad);
// LINE 1404:
	__asm        jmp    near ptr 0x00540CF5;
// LINE 1406:
	__asm        jmp    near ptr 0x00541129;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x00541130
void RoadGraph::FindPlaceOnRoad(struct Goal& goal, struct _GridCoordinates currLoc) {
	struct Road* pRoad;

// LINE 1413:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1414:
	__asm        mov    eax, goal;
	__asm        mov    eax, [eax];
	__asm        mov    al, [eax];
	__asm        mov    ecx, goal;
	__asm        mov    [ecx+0xC], al;
// LINE 1415:
	__asm        mov    eax, goal;
	__asm        mov    eax, [eax];
	__asm        mov    al, [eax+1];
	__asm        mov    ecx, goal;
	__asm        mov    [ecx+0xD], al;
// LINE 1417:
	__asm        mov    eax, goal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xC];
	__asm        xor    eax, eax;
	__asm        mov    al, currLoc.x;
	__asm        cmp    ecx, eax;
	__asm        jne    near ptr 0x00541181;
	__asm        mov    eax, goal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD];
	__asm        xor    eax, eax;
	__asm        mov    al, currLoc.y;
	__asm        cmp    ecx, eax;
	__asm        je     near ptr 0x00541254;
// LINE 1419:
	__asm        mov    eax, goal;
	__asm        mov    eax, [eax+0x12];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x005411E4;
// LINE 1421:
	__asm        mov    eax, goal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD];
	__asm        dec    ecx;
	__asm        mov    eax, goal;
	__asm        mov    [eax+0xD], cl;
	__asm        jmp    near ptr 0x00541208;
// LINE 1422:
	__asm        mov    eax, goal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xC];
	__asm        inc    ecx;
	__asm        mov    eax, goal;
	__asm        mov    [eax+0xC], cl;
	__asm        jmp    near ptr 0x00541208;
// LINE 1423:
	__asm        mov    eax, goal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD];
	__asm        inc    ecx;
	__asm        mov    eax, goal;
	__asm        mov    [eax+0xD], cl;
	__asm        jmp    near ptr 0x00541208;
// LINE 1424:
	__asm        mov    eax, goal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xC];
	__asm        dec    ecx;
	__asm        mov    eax, goal;
	__asm        mov    [eax+0xC], cl;
	__asm        jmp    near ptr 0x00541208;
// LINE 1425:
	__asm        jmp    near ptr 0x00541208;
	__asm        cmp    dword ptr [ebp-0xC], 3;
	__asm        ja     near ptr 0x00541208;
	__asm        mov    eax, [ebp-0xC];
	__asm        jmp    dword ptr [eax*4+0x5411F8];
	__asm        (bad);
	__asm        mov    ds:[0xB7005411], eax;
	__asm        adc    [eax+eax-0x35], edx;
	__asm        (bad);
// LINE 1427:
	__asm        mov    eax, goal;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053C331;
// LINE 1430:
	__asm        mov    eax, goal;
	__asm        cmp    dword ptr [eax+0xE], 0xFFFFFFFE;
	__asm        je     near ptr 0x0054122E;
	__asm        mov    eax, goal;
	__asm        cmp    dword ptr [eax+0xE], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0054124F;
// LINE 1431:
	__asm        push   0x597;
	__asm        push   0x5B823C;
	__asm        push   0x5B8260;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0054124F;
	__asm        jmp    near ptr 0x0054124F;
// LINE 1433:
	__asm        jmp    near ptr 0x00541157;
// LINE 1435:
	__asm        mov    eax, goal;
	__asm        mov    eax, [eax+0xE];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, goal;
	__asm        mov    ecx, [ecx];
	__asm        mov    eax, [ecx+eax*2+0xA];
	__asm        mov    ecx, goal;
	__asm        mov    ecx, [ecx+4];
	__asm        lea    eax, [eax+ecx*2];
	__asm        mov    pRoad, eax;
// LINE 1436:
	__asm        mov    eax, pRoad;
	__asm        mov    al, [eax];
	__asm        shr    al, 4;
	__asm        and    al, 1;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, goal;
	__asm        mov    [eax+0x22], ecx;
// LINE 1437:
	__asm        mov    eax, pRoad;
	__asm        mov    al, [eax];
	__asm        shr    al, 2;
	__asm        and    al, 3;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, goal;
	__asm        mov    [eax+0x26], ecx;
// LINE 1438:
	__asm        mov    eax, goal;
	__asm        mov    eax, [eax];
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, goal;
	__asm        mov    [eax+0x1E], ecx;
// LINE 1439:
	__asm        mov    eax, goal;
	__asm        mov    eax, [eax];
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, goal;
	__asm        mov    [eax+0x1A], ecx;
// LINE 1440:
	__asm        jmp    near ptr 0x005412CA;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x005412d1
int32_t RoadGraph::SetElevation(unsigned short t) {
// LINE 1446:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1447:
	__asm        mov    eax, reinterpret_cast<uint32_t>(t);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00541303;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00541352;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00541352;
	__asm        jmp    near ptr 0x0054134F;
	__asm        cmp    dword ptr [ebp-0xC], 0x6B;
	__asm        jg     near ptr 0x00541330;
	__asm        cmp    dword ptr [ebp-0xC], 0x61;
	__asm        jge    near ptr 0x005412ED;
	__asm        cmp    dword ptr [ebp-0xC], 0x49;
	__asm        jl     near ptr 0x005412F7;
	__asm        cmp    dword ptr [ebp-0xC], 0x50;
	__asm        jle    near ptr 0x005412ED;
	__asm        jmp    near ptr 0x005412F7;
	__asm        cmp    dword ptr [ebp-0xC], 0x806A;
	__asm        jl     near ptr 0x005412F7;
	__asm        cmp    dword ptr [ebp-0xC], 0x806B;
	__asm        jle    near ptr 0x005412ED;
	__asm        jmp    near ptr 0x005412F7;
	__asm        mov    eax, [ebp-4];
	__asm        jmp    near ptr 0x00541357;
// LINE 1448:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}



// Contribution: 1:00140360-00140526 Module: 155, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 2:00004430-0000447f Module: 155, 8 byte alignment, initialized_data, read, 
// LOCAL: COPTER_D 0x00593430
// IndexToType
// LOCAL: COPTER_D 0x00593440
// TypeToIndex2


// Contribution: 3:000210f0-00021265 Module: 155, 4 byte alignment, initialized_data, read, write, 
