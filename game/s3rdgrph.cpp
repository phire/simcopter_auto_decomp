// Module: S3rdgrph.obj
// Source: C:\Copter\Source\Game\S3rdgrph.cpp
// autogenerated by simcopter_tool from PDB file

// Type: enum DirectionTypes;
enum DirectionTypes {
	NO_DIRECTION = 0,
	NORTH = 1,
	EAST = 2,
	SOUTH = 4,
	WEST = 8,
	RISING = 16,
	RISING_NORTH = 17,
	RISING_SOUTH = 20,
	RISING_EAST = 18,
	RISING_WEST = 24,
	NORTH_EAST = 3,
	SOUTH_EAST = 6,
	SOUTH_WEST = 12,
	NORTH_WEST = 9,
};

// Type: enum DirIndex2;
enum DirIndex2 {
	i2N = 0,
	i2E = 1,
	i2S = 2,
	i2W = 3,
	i2X = -1,
	i2I = -2,
};

// Type: void;

// Type: unsigned char;

// Type: int32_t;

// Type: /*packed*/ struct RGVertex (forward reference);
struct RGVertex{ // packed(0x33 bytes) TI: 0x1776
	/*+0x0*/   unsigned char x; // 0x1 bytes
	/*+0x1*/   unsigned char y; // 0x1 bytes
	/*+0x2*/   LfBitfield @ 0x11f58:
	[90m   LB.[32m[  0.  1][m [95mlength[m = 0x4
	[90m   LB.[95mTI[m = 0x1771
	[90m   LB.[32m[  1.  1][m [95mposition[m = 0x0
	[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
	 turnFlags;
	/*+0x2*/   LfBitfield @ 0x11f60:
	[90m   LB.[32m[  0.  1][m [95mlength[m = 0x4
	[90m   LB.[95mTI[m = 0x1772
	[90m   LB.[32m[  1.  1][m [95mposition[m = 0x4
	[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
	 deadEndFlags;
	/*+0x3*/   unsigned char fElevated; // 0x1 bytes
	/*+0x4*/   /*packed*/ struct Edge edge[4]; // 0x28 bytes
	/*+0x2c*/  unsigned char yindexPrev; // 0x1 bytes
	/*+0x2d*/  unsigned char xPrev; // 0x1 bytes
	/*+0x2e*/  unsigned char edgeIndexPrev; // 0x1 bytes
	/*+0x2f*/  int32_t STVisited;
};

// Type: /*packed*/ class RoadGraph (forward reference);
class RoadGraph{ // packed(0x280 bytes) TI: 0x485e
public:
	/*+0x0*/   /*packed*/ struct RGVertex *RGArray[128]; // 0x200 bytes
	/*+0x200*/ unsigned char RGLength[128]; // 0x80 bytes
	void RoadGraph();
	void Init();
	void ~RoadGraph();
	void Destroy();
	int32_t GetRoadLength(const /*packed*/ struct Goal*);
	void GetNextGoal(/*packed*/ struct Goal*);
	void PickPlaceOnRoad(/*packed*/ struct Goal*, int32_t, int32_t);
	/*packed*/ struct Goal FindIntersections(/*packed*/ struct _GridCoordinates, /*packed*/ struct _GridCoordinates, /*packed*/ struct Goal&, /*packed*/ struct Goal&);
	unsigned char FindYIndexToVertex(int32_t, int32_t);
	void DumpBuildMap();
	void FindPlaceOnRoad(/*packed*/ struct Goal&, /*packed*/ struct _GridCoordinates);
	void SamePlaceOtherDirection(/*packed*/ struct Goal*);
private:
	void FindEdges(int32_t, int32_t, /*packed*/ struct RGVertex*);
	void FindNumRoadElements(/*packed*/ struct RGVertex*, /*packed*/ struct Edge*, enum DirIndex2, unsigned char, unsigned char, int32_t);
	void FindRoads(int32_t, int32_t, /*packed*/ struct RGVertex*);
	void MakeRoad(/*packed*/ struct RGVertex*, unsigned char, unsigned char, enum DirIndex2);
	void FindDeadEnds();
	int32_t IsThisADeadEnd(enum DirIndex2, unsigned char, unsigned char);
	enum DirIndex2 WhatDirAmIConnectedTo(enum DirIndex2, enum DirIndex2*, unsigned char, unsigned char);
	int32_t FindIntersection(/*packed*/ struct Goal&, unsigned char, unsigned char, /*packed*/ struct _GridCoordinates, /*packed*/ struct _GridCoordinates, enum DirectionTypes);
	void ConnectHiwayRamp(int32_t, int32_t, unsigned short);
	int32_t SetElevation(unsigned short);
};

// Type: /*packed*/ struct Goal (forward reference);
struct Goal{ // packed(0x2a bytes) TI: 0x12ce
	/*+0x0*/   /*packed*/ struct RGVertex *pRGV;
	/*+0x4*/   int32_t elementIndex;
	/*+0x8*/   int32_t gridIndex;
	/*+0xc*/   /*packed*/ struct _GridCoordinates gridLoc; // 0x2 bytes
	/*+0xe*/   enum DirIndex2 edgeIndex;
	/*+0x12*/  enum DirIndex2 direction;
	/*+0x16*/  int32_t distance;
	/*+0x1a*/  int32_t turnFlags;
	/*+0x1e*/  int32_t deadEndFlags;
	/*+0x22*/  int32_t fElevated;
	/*+0x26*/  enum SlopeIndex slope;
};

// Type: /*packed*/ struct Edge (forward reference);
struct Edge{ // packed(0xa bytes) TI: 0x176b
	/*+0x0*/   unsigned char yindex; // 0x1 bytes
	/*+0x1*/   unsigned char x; // 0x1 bytes
	/*+0x2*/   unsigned short Time; // 0x2 bytes
	/*+0x4*/   unsigned short numElementsToPath; // 0x2 bytes
	/*+0x6*/   /*packed*/ struct Road *roadArray;
};

// Type: enum SlopeIndex;
enum SlopeIndex {
	DOWN = 0,
	FLAT = 1,
	UP = 2,
};

// Type: /*packed*/ struct Road (forward reference);
struct Road{ // packed(0x2 bytes) TI: 0x1752
	/*+0x0*/   LfBitfield @ 0x11b34:
	[90m   LB.[32m[  0.  1][m [95mlength[m = 0x2
	[90m   LB.[95mTI[m = 0x174e
	[90m   LB.[32m[  1.  1][m [95mposition[m = 0x0
	[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
	 direction; // 0x2 bytes
	/*+0x0*/   LfBitfield @ 0x11b3c:
	[90m   LB.[32m[  0.  1][m [95mlength[m = 0x2
	[90m   LB.[95mTI[m = 0x174f
	[90m   LB.[32m[  1.  1][m [95mposition[m = 0x2
	[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
	 slope; // 0x2 bytes
	/*+0x0*/   LfBitfield @ 0x11b44:
	[90m   LB.[32m[  0.  1][m [95mlength[m = 0x1
	[90m   LB.[95mTI[m = 0x1750
	[90m   LB.[32m[  1.  1][m [95mposition[m = 0x4
	[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
	 fElevated; // 0x1 bytes
	/*+0x1*/   unsigned char repeatCount; // 0x1 bytes
};

// Type: /*packed*/ struct _GridCoordinates;
struct _GridCoordinates{ // packed(0x2 bytes) TI: 0x143c
	/*+0x0*/   unsigned char x; // 0x1 bytes
	/*+0x1*/   unsigned char y; // 0x1 bytes
};

// Type: unsigned short;

// Type: /*packed*/ struct Goal;
struct Goal{ // packed(0x2a bytes) TI: 0x12ce
	/*+0x0*/   /*packed*/ struct RGVertex *pRGV;
	/*+0x4*/   int32_t elementIndex;
	/*+0x8*/   int32_t gridIndex;
	/*+0xc*/   /*packed*/ struct _GridCoordinates gridLoc; // 0x2 bytes
	/*+0xe*/   enum DirIndex2 edgeIndex;
	/*+0x12*/  enum DirIndex2 direction;
	/*+0x16*/  int32_t distance;
	/*+0x1a*/  int32_t turnFlags;
	/*+0x1e*/  int32_t deadEndFlags;
	/*+0x22*/  int32_t fElevated;
	/*+0x26*/  enum SlopeIndex slope;
};

// Type: short;



// Contribution: 1:0013ad40-0014035d Module: 155, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0053bd40
void S3RoadGraphInit() {
// LINE 69:
	__asm        mov    ecx, 0x5C3828;
	__asm        call   RoadGraph::Init;
// LINE 70:
	__asm        jmp    _T15;
_T15:
}

// FUNCTION: COPTER_D 0x0053bd5a
void S3RoadGraphDestroy() {
// LINE 76:
	__asm        jmp    _T0b;
_T0b:
}

// FUNCTION: COPTER_D 0x0053bd6a
void RoadGraph::Init() {
	/*bp-0x4*/   int32_t x;
	/*bp-0x8*/   int32_t y;
	/*bp-0xc*/   unsigned char yindex;

// LINE 91:
	__asm        mov    x, 0;
	__asm        jmp    _T1b;
_T18:
	x++;
_T1b:
	__asm        cmp    x, 0x80;
	__asm        jge    _T3b;

	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [eax+ecx+0x200], 0;
	__asm        jmp    _T18;
// LINE 96:
_T3b:
	__asm        mov    x, 0;
	__asm        jmp    _T4a;
_T47:
	x++;
_T4a:
	__asm        cmp    x, 0x80;
	__asm        jge    _T19b;
// LINE 98:
// Block start:
	/*bp-0x10*/  int32_t y;
	__asm        mov    y, 0;
	__asm        jmp    _T66;
_T63:
	y++;
_T66:
	__asm        cmp    y, 0x80;
	__asm        jge    _T196;
// LINE 99:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T191;
// LINE 101:
	__asm        cmp    x, 0;
	__asm        jl     _Tb9;

	__asm        cmp    y, 0;
	__asm        jl     _Tb9;

	__asm        cmp    x, 0x80;
	__asm        jge    _Tb9;

	__asm        cmp    y, 0x80;
	__asm        jl     _Tc4;
_Tb9:
	__asm        mov    word ptr [ebp-0x28], 0;
	__asm        jmp    _Tfc;
_Tc4:
	__asm        mov    eax, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x28], ax;
	__asm        jmp    _Tfc;
_Tfc:
	__asm        mov    eax, [ebp-0x28];
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T120;

	__asm        jmp    _T162;

	__asm        jmp    _T184;

	__asm        jmp    _T162;

	__asm        jmp    _T158;
_T120:
	__asm        cmp    dword ptr [ebp-0x34], 0x806B;
	__asm        jg     _T184;

	__asm        cmp    dword ptr [ebp-0x34], 0x806A;
	__asm        jge    _T162;

	__asm        cmp    dword ptr [ebp-0x34], 0x61;
	__asm        jl     _T184;

	__asm        cmp    dword ptr [ebp-0x34], 0x6B;
	__asm        jle    _T162;

	__asm        jmp    _T184;

	__asm        jmp    _T184;
_T158:
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T184;
// LINE 103:
_T162:
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        test   al, 1;
	__asm        je     _T173;

	__asm        jmp    _T63;
// LINE 104:
_T173:
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        test   al, 1;
	__asm        je     _T184;

	__asm        jmp    _T63;
// LINE 107:
_T184:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        inc    byte ptr [eax+ecx+0x200];
// LINE 109:
_T191:
	__asm        jmp    _T63;
// Block end:
_T196:
	__asm        jmp    _T47;
// LINE 113:
_T19b:
	__asm        mov    x, 0;
	__asm        jmp    _T1aa;
_T1a7:
	x++;
_T1aa:
	__asm        cmp    x, 0x80;
	__asm        jge    _T1ee;
// LINE 114:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x200];
	__asm        mov    eax, edx;
	__asm        lea    ecx, [edx+edx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    eax, [eax+ecx*2];
	__asm        push   eax;
	__asm        mov    eax, G_citymempool;
	__asm        push   eax;
	__asm        call   S2Alloc;
	__asm        add    esp, 8;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*4], eax;
	__asm        jmp    _T1a7;
// LINE 118:
_T1ee:
	__asm        mov    x, 0;
	__asm        jmp    _T1fd;
_T1fa:
	x++;
_T1fd:
	__asm        cmp    x, 0x80;
	__asm        jge    _T47d;
// LINE 120:
	__asm        mov    y, 0;
	__asm        mov    yindex, 0;
	__asm        jmp    _T21d;
_T21a:
	y++;
_T21d:
	__asm        cmp    y, 0x80;
	__asm        jge    _T478;
// LINE 122:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T473;
// LINE 126:
// Block start:
	/*bp-0x14*/  int32_t i;
	__asm        cmp    x, 0;
	__asm        jl     _T270;

	__asm        cmp    y, 0;
	__asm        jl     _T270;

	__asm        cmp    x, 0x80;
	__asm        jge    _T270;

	__asm        cmp    y, 0x80;
	__asm        jl     _T27b;
_T270:
	__asm        mov    word ptr [ebp-0x20], 0;
	__asm        jmp    _T2b3;
_T27b:
	__asm        mov    eax, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x20], ax;
	__asm        jmp    _T2b3;
_T2b3:
	__asm        mov    eax, [ebp-0x20];
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T2d7;

	__asm        jmp    _T319;

	__asm        jmp    _T33b;

	__asm        jmp    _T319;

	__asm        jmp    _T30f;
_T2d7:
	__asm        cmp    dword ptr [ebp-0x38], 0x806B;
	__asm        jg     _T33b;

	__asm        cmp    dword ptr [ebp-0x38], 0x806A;
	__asm        jge    _T319;

	__asm        cmp    dword ptr [ebp-0x38], 0x61;
	__asm        jl     _T33b;

	__asm        cmp    dword ptr [ebp-0x38], 0x6B;
	__asm        jle    _T319;

	__asm        jmp    _T33b;

	__asm        jmp    _T33b;
_T30f:
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T33b;
// LINE 128:
_T319:
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        test   al, 1;
	__asm        je     _T32a;

	__asm        jmp    _T21a;
// LINE 129:
_T32a:
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        test   al, 1;
	__asm        je     _T33b;

	__asm        jmp    _T21a;
// LINE 132:
_T33b:
	__asm        mov    al, reinterpret_cast<uint8_t>(x);
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx], al;
// LINE 133:
	__asm        mov    al, reinterpret_cast<uint8_t>(y);
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+1], al;
// LINE 134:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        and    byte ptr [eax+ecx+2], 0xF0;
// LINE 135:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        and    byte ptr [eax+ecx+2], 0xF;
// LINE 137:
	__asm        mov    i, 0;
	__asm        jmp    _T3c5;
_T3c2:
	i++;
_T3c5:
	__asm        cmp    i, 4;
	__asm        jge    _T470;
// LINE 139:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    ecx, i;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        mov    word ptr [eax+ecx*2+8], 0;
// LINE 140:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    ecx, i;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        mov    word ptr [eax+ecx*2+6], 0;
// LINE 141:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    ecx, i;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        mov    byte ptr [eax+ecx*2+4], 0xFF;
// LINE 142:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    ecx, i;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        mov    byte ptr [eax+ecx*2+5], 0xFF;
// LINE 143:
	__asm        jmp    _T3c2;
// LINE 145:
_T470:
	yindex++;
// LINE 147:
// Block end:
_T473:
	__asm        jmp    _T21a;
// LINE 148:
_T478:
	__asm        jmp    _T1fa;
// LINE 150:
_T47d:
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindDeadEnds;
// LINE 156:
	__asm        mov    x, 0;
	__asm        jmp    _T494;
_T491:
	x++;
_T494:
	__asm        cmp    x, 0x80;
	__asm        jge    _T521;
// LINE 158:
	__asm        mov    yindex, 0;
	__asm        jmp    _T4ad;
_T4aa:
	yindex++;
_T4ad:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x200];
	__asm        xor    eax, eax;
	__asm        mov    al, yindex;
	__asm        cmp    edx, eax;
	__asm        jle    _T51c;
// LINE 160:
// Block start:
	/*bp-0x18*/  /*packed*/ struct RGVertex *pRGV;
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    pRGV, eax;
// LINE 161:
	__asm        mov    eax, pRGV;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+1];
	__asm        push   edx;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindEdges;
// LINE 162:
// Block end:
	__asm        jmp    _T4aa;
// LINE 163:
_T51c:
	__asm        jmp    _T491;
// LINE 167:
_T521:
	__asm        mov    x, 0;
	__asm        jmp    _T530;
_T52d:
	x++;
_T530:
	__asm        cmp    x, 0x80;
	__asm        jge    _T5bd;
// LINE 169:
	__asm        mov    yindex, 0;
	__asm        jmp    _T549;
_T546:
	yindex++;
_T549:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x200];
	__asm        xor    eax, eax;
	__asm        mov    al, yindex;
	__asm        cmp    edx, eax;
	__asm        jle    _T5b8;
// LINE 171:
// Block start:
	/*bp-0x1c*/  /*packed*/ struct RGVertex *pRGV;
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    pRGV, eax;
// LINE 172:
	__asm        mov    eax, pRGV;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+1];
	__asm        push   edx;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindRoads;
// LINE 173:
// Block end:
	__asm        jmp    _T546;
// LINE 174:
_T5b8:
	__asm        jmp    _T52d;
// LINE 191:
_T5bd:
	__asm        jmp    _T5c2;
_T5c2:
}

// FUNCTION: COPTER_D 0x0053c331
void RoadGraph::GetNextGoal(/*packed*/ struct Goal *pGoal) {
	/*bp-0x4*/   /*packed*/ struct Road *pRoad;
	/*bp-0x8*/   /*packed*/ struct RGVertex *pRGV;
	/*bp-0xc*/   enum SlopeIndex slope;
	/*bp-0x10*/  /*packed*/ struct Edge *pEdge;

// LINE 199:
	pRGV = pGoal->pRGV;
// LINE 200:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0xE];
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, eax;
	__asm        add    eax, pRGV;
	__asm        add    eax, 4;
	__asm        mov    pEdge, eax;
// LINE 205:
	__asm        mov    eax, pEdge;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+4];
	__asm        test   ecx, ecx;
	__asm        jne    _T43;
// LINE 207:
	__asm        jmp    _T361;

	__asm        jmp    IntersectionKludge;
// LINE 210:
_T43:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, eax;
	__asm        mov    ecx, pEdge;
	__asm        add    eax, [ecx+6];
	__asm        mov    pRoad, eax;
// LINE 213:
	__asm        mov    eax, pRoad;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        mov    eax, pGoal;
	__asm        cmp    ecx, [eax+8];
	__asm        jle    _Tab;
// LINE 217:
	pGoal->gridIndex++;
// LINE 240:
	__asm        mov    eax, pGoal;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    _Ta6;
// LINE 242:
	__asm        mov    eax, pEdge;
	__asm        mov    eax, [eax+6];
	__asm        mov    al, [eax];
	__asm        and    al, 3;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x12], ecx;
// LINE 244:
	__asm        mov    eax, pEdge;
	__asm        mov    eax, [eax+6];
	__asm        mov    al, [eax];
	__asm        shr    al, 2;
	__asm        and    al, 3;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x26], ecx;
// LINE 247:
_Ta6:
	__asm        jmp    _T234;
// LINE 250:
_Tab:
	__asm        mov    eax, pRoad;
	__asm        mov    al, [eax];
	__asm        shr    al, 4;
	__asm        and    al, 1;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x22], ecx;
// LINE 251:
	__asm        mov    eax, pRoad;
	__asm        mov    al, [eax];
	__asm        shr    al, 2;
	__asm        and    al, 3;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x26], ecx;
// LINE 252:
	pGoal->elementIndex++;
// LINE 255:
	__asm        mov    eax, pEdge;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+4];
	__asm        mov    eax, pGoal;
	__asm        cmp    ecx, [eax+4];
	__asm        jle    IntersectionKludge;
// LINE 257:
	pGoal->gridIndex = 0x0;
// LINE 258:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, pEdge;
	__asm        mov    ecx, [ecx+6];
	__asm        mov    al, [ecx+eax*2];
	__asm        and    al, 3;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x12], ecx;
// LINE 260:
	__asm        jmp    _T234;
// LINE 266:
IntersectionKludge:
// Block start:
	/*bp-0x14*/  /*packed*/ struct RGVertex *pRGV;
	/*bp-0x18*/  unsigned char x;
	/*bp-0x1c*/  unsigned char yindex;
	pRGV = pGoal->pRGV;
// LINE 269:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0xE];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, pRGV;
	__asm        mov    al, [ecx+eax*2+4];
	__asm        mov    yindex, al;
// LINE 270:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0xE];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, pRGV;
	__asm        mov    al, [ecx+eax*2+5];
	__asm        mov    x, al;
// LINE 273:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    ecx, pGoal;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax];
	__asm        mov    pRGV, eax;
// LINE 274:
	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+3];
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x22], ecx;
// LINE 275:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x1A], ecx;
// LINE 276:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x1E], ecx;
// LINE 284:
	__asm        mov    eax, pGoal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xC];
	__asm        mov    eax, pRGV;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax];
	__asm        cmp    ecx, edx;
	__asm        je     _T1d8;

	__asm        push   0x11C;
	__asm        push   0x5B80F0;
	__asm        push   0x5B8114;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1dd;
_T1d8:
	__asm        jmp    _T1dd;
// LINE 285:
_T1dd:
	__asm        mov    eax, pGoal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD];
	__asm        mov    eax, pRGV;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+1];
	__asm        cmp    ecx, edx;
	__asm        je     _T211;

	__asm        push   0x11D;
	__asm        push   0x5B8130;
	__asm        push   0x5B8154;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T216;
_T211:
	__asm        jmp    _T216;
// LINE 293:
_T216:
	pGoal->edgeIndex = 0xfffffffe;
// LINE 294:
	pGoal->elementIndex = 0x0;
// LINE 299:
	pGoal->gridIndex = 0xffffffff;
// LINE 310:
// Block end:
_T234:
	__asm        mov    eax, pGoal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xC];
	__asm        cmp    ecx, 0x80;
	__asm        jge    _T34c;

	__asm        mov    eax, pGoal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD];
	__asm        cmp    ecx, 0x80;
	__asm        jge    _T34c;
// LINE 312:
	__asm        mov    eax, pGoal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xC];
	__asm        mov    eax, TerrainMap[ecx*4];
	__asm        mov    ecx, pGoal;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+edx];
	__asm        mov    [ebp-0x24], ecx;
	__asm        jmp    _T320;
// LINE 314:
_T280:
	__asm        mov    eax, pGoal;
	__asm        cmp    dword ptr [eax+0x12], 3;
	__asm        jne    _T299;

	__asm        mov    slope, 2;
	__asm        jmp    _T2a0;
_T299:
	slope = 0x0;
_T2a0:
	__asm        jmp    _T347;
// LINE 315:
_T2a5:
	__asm        mov    eax, pGoal;
	__asm        cmp    dword ptr [eax+0x12], 0;
	__asm        jne    _T2be;

	__asm        mov    slope, 2;
	__asm        jmp    _T2c5;
_T2be:
	slope = 0x0;
_T2c5:
	__asm        jmp    _T347;
// LINE 316:
_T2ca:
	__asm        mov    eax, pGoal;
	__asm        cmp    dword ptr [eax+0x12], 1;
	__asm        jne    _T2e3;

	__asm        mov    slope, 2;
	__asm        jmp    _T2ea;
_T2e3:
	slope = 0x0;
_T2ea:
	__asm        jmp    _T347;
// LINE 317:
_T2ef:
	__asm        mov    eax, pGoal;
	__asm        cmp    dword ptr [eax+0x12], 2;
	__asm        jne    _T308;

	__asm        mov    slope, 2;
	__asm        jmp    _T30f;
_T308:
	slope = 0x0;
_T30f:
	__asm        jmp    _T347;
// LINE 318:
_T314:
	slope = 0x1;
// LINE 319:
	__asm        jmp    _T347;
_T320:
	__asm        dec    dword ptr [ebp-0x24];
	__asm        cmp    dword ptr [ebp-0x24], 3;
	__asm        ja     _T314;

	__asm        mov    eax, [ebp-0x24];
	__asm        jmp    _Switch_337[0][eax*4];
// Switch pointers:
//   _T280
//   _T2a5
//   _T2ca
//   _T2ef
// LINE 321:
_T347:
	__asm        jmp    _T353;
// LINE 323:
_T34c:
	slope = 0x1;
// LINE 325:
_T353:
	pGoal->slope = slope;
// LINE 327:
	__asm        jmp    _T366;
_T361:
	__asm        jmp    IntersectionKludge;
_T366:
}

// FUNCTION: COPTER_D 0x0053c69e
void RoadGraph::PickPlaceOnRoad(/*packed*/ struct Goal *pGoal, int32_t x, int32_t y) {
	/*bp-0x4*/   int32_t loopCounter;
	/*bp-0x8*/   /*packed*/ struct RGVertex *pRGV;
	/*bp-0xc*/   /*packed*/ struct Edge *pEdge;
	/*bp-0x10*/  unsigned char yindex;
	/*bp-0x14*/  int32_t validTurn;
	/*bp-0x18*/  enum DirectionTypes tempDir;

// LINE 338:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    yindex, al;
// LINE 339:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    pRGV, eax;
// LINE 344:
	loopCounter = 0x0;
// LINE 350:
_T44:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 3;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ecx, pGoal;
	__asm        mov    [ecx+0xE], eax;
// LINE 353:
	__asm        mov    eax, loopCounter;
	__asm        mov    [ebp-0x24], eax;
	__asm        inc    loopCounter;
	__asm        cmp    dword ptr [ebp-0x24], 0x10;
	__asm        jle    _T92;
// LINE 354:
	__asm        push   0x162;
	__asm        push   0x5B8170;
	__asm        push   0x5B8194;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T92;

	__asm        jmp    _T92;
// LINE 356:
_T92:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0xE];
	__asm        mov    eax, IndexToType[0][eax*4];
	__asm        mov    tempDir, eax;
// LINE 357:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        and    ecx, tempDir;
	__asm        mov    validTurn, ecx;
// LINE 359:
	__asm        cmp    validTurn, 0;
	__asm        je     _T44;
// LINE 361:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0xE];
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, eax;
	__asm        add    eax, pRGV;
	__asm        add    eax, 4;
	__asm        mov    pEdge, eax;
// LINE 363:
	__asm        mov    eax, pEdge;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+4];
	__asm        test   ecx, ecx;
	__asm        je     _T275;
// LINE 366:
// Block start:
	/*bp-0x1c*/  /*packed*/ struct Road *pRoad;
	/*bp-0x20*/  int32_t i;
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0xE];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T116;
// LINE 368:
_Tf1:
	__asm        dec    y;
	__asm        jmp    _T13a;
// LINE 369:
_Tf9:
	__asm        inc    x;
	__asm        jmp    _T13a;
// LINE 370:
_T101:
	__asm        inc    y;
	__asm        jmp    _T13a;
// LINE 371:
_T109:
	__asm        dec    x;
	__asm        jmp    _T13a;
// LINE 372:
	__asm        jmp    _T13a;
_T116:
	__asm        cmp    dword ptr [ebp-0x2C], 3;
	__asm        ja     _T13a;

	__asm        mov    eax, [ebp-0x2C];
	__asm        jmp    _Switch_12a[0][eax*4];
// Switch pointers:
//   _Tf1
//   _Tf9
//   _T101
//   _T109
// LINE 375:
_T13a:
	__asm        call   rand;
	__asm        mov    ecx, pEdge;
	__asm        xor    ebx, ebx;
	__asm        mov    bx, [ecx+4];
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ebx;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+4], edx;
// LINE 378:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, eax;
	__asm        mov    ecx, pEdge;
	__asm        add    eax, [ecx+6];
	__asm        mov    pRoad, eax;
// LINE 382:
	__asm        mov    i, 0;
	__asm        jmp    _T174;
_T171:
	i++;
_T174:
	__asm        mov    eax, pGoal;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+4], ecx;
	__asm        jle    _T237;
// LINE 384:
	__asm        mov    eax, pEdge;
	__asm        mov    eax, [eax+6];
	__asm        mov    ecx, i;
	__asm        mov    al, [eax+ecx*2];
	__asm        and    al, 3;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    [ebp-0x30], ecx;
	__asm        jmp    _T20e;
// LINE 386:
_T19d:
	__asm        xor    eax, eax;
	__asm        mov    ecx, pEdge;
	__asm        mov    ecx, [ecx+6];
	__asm        mov    edx, i;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx*2+1];
	__asm        inc    ebx;
	__asm        sub    eax, ebx;
	__asm        neg    eax;
	__asm        sub    y, eax;
	__asm        jmp    _T232;
// LINE 387:
_T1bb:
	__asm        mov    eax, pEdge;
	__asm        mov    eax, [eax+6];
	__asm        mov    ecx, i;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx*2+1];
	__asm        inc    edx;
	__asm        add    x, edx;
	__asm        jmp    _T232;
// LINE 388:
_T1d3:
	__asm        mov    eax, pEdge;
	__asm        mov    eax, [eax+6];
	__asm        mov    ecx, i;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx*2+1];
	__asm        inc    edx;
	__asm        add    y, edx;
	__asm        jmp    _T232;
// LINE 389:
_T1eb:
	__asm        xor    eax, eax;
	__asm        mov    ecx, pEdge;
	__asm        mov    ecx, [ecx+6];
	__asm        mov    edx, i;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx*2+1];
	__asm        inc    ebx;
	__asm        sub    eax, ebx;
	__asm        neg    eax;
	__asm        sub    x, eax;
	__asm        jmp    _T232;
// LINE 390:
	__asm        jmp    _T232;
_T20e:
	__asm        cmp    dword ptr [ebp-0x30], 3;
	__asm        ja     _T232;

	__asm        mov    eax, [ebp-0x30];
	__asm        jmp    _Switch_222[0][eax*4];
// Switch pointers:
//   _T19d
//   _T1bb
//   _T1d3
//   _T1eb
// LINE 391:
_T232:
	__asm        jmp    _T171;
// LINE 395:
_T237:
	__asm        mov    eax, pRoad;
	__asm        mov    al, [eax];
	__asm        and    al, 3;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x12], ecx;
// LINE 396:
	__asm        mov    eax, pRoad;
	__asm        mov    al, [eax];
	__asm        shr    al, 4;
	__asm        and    al, 1;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x22], ecx;
// LINE 397:
	__asm        mov    eax, pRoad;
	__asm        mov    al, [eax];
	__asm        shr    al, 2;
	__asm        and    al, 3;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x26], ecx;
// LINE 399:
// Block end:
	__asm        jmp    _T2a3;
// LINE 401:
_T275:
	pGoal->direction = pGoal->edgeIndex;
// LINE 402:
	pGoal->elementIndex = 0x0;
// LINE 403:
	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+3];
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x22], ecx;
// LINE 404:
	pGoal->slope = 0x1;
// LINE 407:
_T2a3:
	pGoal->pRGV = pRGV;
// LINE 408:
	pGoal->gridIndex = 0x0;
// LINE 409:
	pGoal->gridLoc.x = reinterpret_cast<uint8_t>(x);
// LINE 410:
	pGoal->gridLoc.y = reinterpret_cast<uint8_t>(y);
// LINE 411:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x1A], ecx;
// LINE 412:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, pGoal;
	__asm        mov    [eax+0x1E], ecx;
// LINE 413:
	__asm        jmp    _T2f3;
_T2f3:
}

// FUNCTION: COPTER_D 0x0053c998
/*packed*/ struct Goal RoadGraph::FindIntersections(/*packed*/ struct _GridCoordinates startLoc, /*packed*/ struct _GridCoordinates destLoc, /*packed*/ struct Goal& goal1, /*packed*/ struct Goal& goal2) {
	/*bp-0x2c*/  /*packed*/ struct Goal resultGoal; // 0x2a bytes
	/*bp-0x30*/  unsigned short fromTile;
	/*bp-0x34*/  int32_t Offset;
	/*bp-0x38*/  int32_t stepSize;

// LINE 420:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        test   eax, eax;
	__asm        jl     _T46;

	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        test   eax, eax;
	__asm        jl     _T46;

	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T46;

	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T51;
_T46:
	__asm        mov    fromTile, 0;
	__asm        jmp    _T91;
_T51:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startLoc.y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startLoc.x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, startLoc.y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    fromTile, ax;
	__asm        jmp    _T91;
// LINE 426:
_T91:
	goal1.pRGV = 0x0;
// LINE 427:
	goal2.pRGV = 0x0;
// LINE 428:
	__asm        lea    edi, resultGoal.pRGV;
	__asm        mov    esi, goal1;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 431:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T1a1;
// LINE 435:
// Block start:
	/*bp-0x3c*/  /*packed*/ struct RGVertex *pRGV;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [eax+ecx*2];
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        mov    edx, this;
	__asm        add    ecx, [edx+eax*4];
	__asm        mov    pRGV, ecx;
	__asm        mov    eax, pRGV;
	__asm        mov    ecx, goal1;
	__asm        mov    [ecx], eax;
// LINE 436:
	goal1.elementIndex = 0x0;
// LINE 437:
	goal1.gridIndex = 0xffffffff;
// LINE 438:
	goal1.gridLoc.x = startLoc.x;
// LINE 439:
	goal1.gridLoc.y = startLoc.y;
// LINE 440:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, goal1;
	__asm        mov    [eax+0x1A], ecx;
// LINE 441:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, goal1;
	__asm        mov    [eax+0x1E], ecx;
// LINE 442:
	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+3];
	__asm        mov    eax, goal1;
	__asm        mov    [eax+0x22], ecx;
// LINE 443:
	goal1.slope = 0x1;
// LINE 446:
	goal1.distance = 0x0;
// LINE 447:
	goal1.direction = 0xfffffffe;
// LINE 448:
	goal1.edgeIndex = 0xfffffffe;
// LINE 450:
	__asm        mov    edi, __$ReturnUdt;
	__asm        mov    esi, goal1;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    _T68d;
// LINE 453:
// Block end:
_T1a1:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x69;
	__asm        jne    _T1c5;
// LINE 455:
	stepSize = 0x2;
// LINE 456:
	Offset = 0x1;
// LINE 458:
	__asm        jmp    _T1d3;
// LINE 460:
_T1c5:
	stepSize = 0x1;
// LINE 461:
	Offset = 0x0;
// LINE 469:
_T1d3:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        cmp    eax, Offset;
	__asm        jle    _T2bc;
// LINE 471:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        test   eax, eax;
	__asm        jl     _T21b;

	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        dec    eax;
	__asm        js     _T21b;

	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T21b;

	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T226;
_T21b:
	__asm        mov    word ptr [ebp-0x40], 0;
	__asm        jmp    _T268;
_T226:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startLoc.y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx-1];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startLoc.x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, startLoc.y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx-1];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x40], ax;
	__asm        jmp    _T268;
_T268:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   DoRoadTilesConnect;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     _T2bc;
// LINE 473:
	__asm        push   1;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        mov    eax, goal1;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindIntersection;
	__asm        test   eax, eax;
	__asm        je     _T2bc;
// LINE 474:
	__asm        lea    edi, resultGoal.pRGV;
	__asm        mov    esi, goal1;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 478:
_T2bc:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        mov    ecx, 0x7F;
	__asm        sub    ecx, Offset;
	__asm        cmp    eax, ecx;
	__asm        jge    _T401;
// LINE 480:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        add    eax, stepSize;
	__asm        js     _T30f;

	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        test   eax, eax;
	__asm        jl     _T30f;

	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        add    eax, stepSize;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T30f;

	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T31a;
_T30f:
	__asm        mov    word ptr [ebp-0x44], 0;
	__asm        jmp    _T360;
_T31a:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        add    eax, stepSize;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startLoc.y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startLoc.x;
	__asm        add    ecx, stepSize;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, startLoc.y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x44], ax;
	__asm        jmp    _T360;
_T360:
	__asm        push   2;
	__asm        push   2;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   DoRoadTilesConnect;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     _T401;
// LINE 482:
	__asm        mov    eax, goal1;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T3c7;
// LINE 484:
	__asm        push   2;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.y);
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        add    eax, stepSize;
	__asm        push   eax;
	__asm        mov    eax, goal2;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindIntersection;
	__asm        test   eax, eax;
	__asm        je     _T3c2;
// LINE 485:
	__asm        lea    edi, resultGoal.pRGV;
	__asm        mov    esi, goal2;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 487:
_T3c2:
	__asm        jmp    _T401;
// LINE 489:
_T3c7:
	__asm        push   2;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.y);
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        add    eax, stepSize;
	__asm        push   eax;
	__asm        mov    eax, goal1;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindIntersection;
	__asm        test   eax, eax;
	__asm        je     _T401;
// LINE 490:
	__asm        lea    edi, resultGoal.pRGV;
	__asm        mov    esi, goal1;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 495:
_T401:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        mov    ecx, 0x7F;
	__asm        sub    ecx, Offset;
	__asm        cmp    eax, ecx;
	__asm        jge    _T546;
// LINE 497:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        test   eax, eax;
	__asm        jl     _T454;

	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        add    eax, stepSize;
	__asm        js     _T454;

	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T454;

	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        add    eax, stepSize;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T45f;
_T454:
	__asm        mov    word ptr [ebp-0x48], 0;
	__asm        jmp    _T4a5;
_T45f:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        add    eax, stepSize;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startLoc.x;
	__asm        mov    ecx, BitsMap[ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startLoc.x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, startLoc.y;
	__asm        add    edx, stepSize;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x48], ax;
	__asm        jmp    _T4a5;
_T4a5:
	__asm        push   4;
	__asm        push   4;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   DoRoadTilesConnect;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     _T546;
// LINE 499:
	__asm        mov    eax, goal1;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T50c;
// LINE 501:
	__asm        push   4;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        add    eax, stepSize;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        mov    eax, goal2;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindIntersection;
	__asm        test   eax, eax;
	__asm        je     _T507;
// LINE 502:
	__asm        lea    edi, resultGoal.pRGV;
	__asm        mov    esi, goal2;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 504:
_T507:
	__asm        jmp    _T546;
// LINE 506:
_T50c:
	__asm        push   4;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        add    eax, stepSize;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        mov    eax, goal1;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindIntersection;
	__asm        test   eax, eax;
	__asm        je     _T546;
// LINE 507:
	__asm        lea    edi, resultGoal.pRGV;
	__asm        mov    esi, goal1;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 512:
_T546:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        cmp    eax, Offset;
	__asm        jle    _T676;
// LINE 514:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        dec    eax;
	__asm        js     _T58e;

	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        test   eax, eax;
	__asm        jl     _T58e;

	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T58e;

	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T599;
_T58e:
	__asm        mov    word ptr [ebp-0x4C], 0;
	__asm        jmp    _T5d9;
_T599:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        mov    eax, [eax*4+0x638F6C];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startLoc.y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startLoc.x;
	__asm        mov    ecx, NeighborFame[ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, startLoc.y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x4C], ax;
	__asm        jmp    _T5d9;
_T5d9:
	__asm        push   8;
	__asm        push   8;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   DoRoadTilesConnect;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     _T676;
// LINE 516:
	__asm        mov    eax, goal1;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T63e;
// LINE 518:
	__asm        push   8;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.y);
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, goal2;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindIntersection;
	__asm        test   eax, eax;
	__asm        je     _T639;
// LINE 519:
	__asm        lea    edi, resultGoal.pRGV;
	__asm        mov    esi, goal2;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 521:
_T639:
	__asm        jmp    _T676;
// LINE 523:
_T63e:
	__asm        push   8;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.y);
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, goal1;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindIntersection;
	__asm        test   eax, eax;
	__asm        je     _T676;
// LINE 524:
	__asm        lea    edi, resultGoal.pRGV;
	__asm        mov    esi, goal1;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 529:
_T676:
	__asm        lea    esi, resultGoal.pRGV;
	__asm        mov    edi, __$ReturnUdt;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    _T68d;
// LINE 530:
_T68d:
}

// FUNCTION: COPTER_D 0x0053d02c
void RoadGraph::SamePlaceOtherDirection(/*packed*/ struct Goal *pGoal) {
	/*bp-0x4*/   /*packed*/ struct _GridCoordinates here;
	/*bp-0x8*/   enum DirIndex2 prevDir;

// LINE 554:
	reinterpret_cast<uint16_t>(here.x) = reinterpret_cast<uint16_t>(pGoal->gridLoc.x);
// LINE 557:
	__asm        mov    eax, pGoal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD];
	__asm        push   ecx;
	__asm        mov    eax, pGoal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xC];
	__asm        push   ecx;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T62;
// LINE 560:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0x12];
	__asm        sub    eax, 2;
	__asm        and    eax, 3;
	__asm        mov    ecx, pGoal;
	__asm        mov    [ecx+0x12], eax;
// LINE 561:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0xE];
	__asm        sub    eax, 2;
	__asm        and    eax, 3;
	__asm        mov    ecx, pGoal;
	__asm        mov    [ecx+0xE], eax;
// LINE 562:
	__asm        jmp    _T134;
// LINE 567:
_T62:
	prevDir = pGoal->direction;
// LINE 570:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0x12];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _Taa;
// LINE 572:
_T79:
	__asm        mov    eax, pGoal;
	__asm        dec    byte ptr [eax+0xD];
	__asm        jmp    _Tce;
// LINE 573:
_T84:
	__asm        mov    eax, pGoal;
	__asm        inc    byte ptr [eax+0xC];
	__asm        jmp    _Tce;
// LINE 574:
_T8f:
	__asm        mov    eax, pGoal;
	__asm        inc    byte ptr [eax+0xD];
	__asm        jmp    _Tce;
// LINE 575:
_T9a:
	__asm        mov    eax, pGoal;
	__asm        dec    byte ptr [eax+0xC];
	__asm        jmp    _Tce;
// LINE 576:
	__asm        jmp    _Tce;
_Taa:
	__asm        cmp    dword ptr [ebp-0x10], 3;
	__asm        ja     _Tce;

	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    _Switch_be[0][eax*4];
// Switch pointers:
//   _T79
//   _T84
//   _T8f
//   _T9a
// LINE 578:
_Tce:
	__asm        mov    eax, pGoal;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::GetNextGoal;
// LINE 580:
	__asm        mov    eax, pGoal;
	__asm        cmp    dword ptr [eax+0xE], 0xFFFFFFFE;
	__asm        jne    _T105;
// LINE 582:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0x12];
	__asm        sub    eax, 2;
	__asm        and    eax, 3;
	__asm        mov    ecx, pGoal;
	__asm        mov    [ecx+0x12], eax;
// LINE 583:
	pGoal->edgeIndex = pGoal->direction;
// LINE 586:
_T105:
	__asm        mov    eax, pGoal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xC];
	__asm        xor    eax, eax;
	__asm        mov    al, here.x;
	__asm        cmp    ecx, eax;
	__asm        jne    _T62;

	__asm        mov    eax, pGoal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD];
	__asm        xor    eax, eax;
	__asm        mov    al, here.y;
	__asm        cmp    ecx, eax;
	__asm        jne    _T62;
// LINE 587:
	__asm        jmp    _T134;
_T134:
}

// FUNCTION: COPTER_D 0x0053d167
unsigned char RoadGraph::FindYIndexToVertex(int32_t x, int32_t y) {
	/*bp-0x4*/   unsigned char yindex;

// LINE 597:
	__asm        mov    yindex, 0;
	__asm        jmp    _T18;
_T15:
	yindex++;
_T18:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x200];
	__asm        xor    eax, eax;
	__asm        mov    al, yindex;
	__asm        cmp    edx, eax;
	__asm        jle    _T69;
// LINE 598:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+1];
	__asm        cmp    edx, y;
	__asm        jne    _T64;
// LINE 599:
	__asm        mov    al, yindex;
	__asm        jmp    _Tad;
// LINE 603:
_T64:
	__asm        jmp    _T15;
_T69:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x200];
	__asm        xor    eax, eax;
	__asm        mov    al, yindex;
	__asm        cmp    edx, eax;
	__asm        jg     _Ta1;

	__asm        push   0x25B;
	__asm        push   0x5B819C;
	__asm        push   0x5B81C0;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _Ta6;
_Ta1:
	__asm        jmp    _Ta6;
// LINE 605:
_Ta6:
	__asm        mov    al, 0xFF;
	__asm        jmp    _Tad;
// LINE 606:
_Tad:
}

// FUNCTION: COPTER_D 0x0053d21b
int32_t RoadGraph::FindIntersection(/*packed*/ struct Goal& goal, unsigned char x, unsigned char y, /*packed*/ struct _GridCoordinates startLoc, /*packed*/ struct _GridCoordinates destLoc, enum DirectionTypes currentDirType) {
	/*bp-0x4*/   enum DirIndex2 result;
	/*bp-0x8*/   enum DirIndex2 currentDir;
	/*bp-0xc*/   int32_t returnVal;
	/*bp-0x10*/  /*packed*/ struct _GridCoordinates here;
	/*bp-0x14*/  enum DirIndex2 returnDir;

// LINE 632:
	__asm        mov    eax, currentDirType;
	__asm        mov    eax, TypeToIndex2[0][eax*4];
	__asm        mov    currentDir, eax;
// LINE 634:
	returnVal = 0x0;
// LINE 636:
	here.x = x;
// LINE 637:
	here.y = y;
// LINE 639:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T58;
// LINE 641:
	returnDir = currentDir;
// LINE 642:
	__asm        jmp    _T1d9;

	__asm        jmp    KlugeFirstStepIsAnIntersection;
// LINE 647:
_T58:
	__asm        xor    eax, eax;
	__asm        mov    al, destLoc.x;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        cmp    eax, ecx;
	__asm        jne    _T83;

	__asm        xor    eax, eax;
	__asm        mov    al, destLoc.y;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        cmp    eax, ecx;
	__asm        jne    _T83;
// LINE 649:
	returnVal = 0x1;
// LINE 655:
_T83:
	__asm        mov    eax, reinterpret_cast<uint32_t>(here.y);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(here.x);
	__asm        push   eax;
	__asm        lea    eax, returnDir;
	__asm        push   eax;
	__asm        mov    eax, currentDir;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::WhatDirAmIConnectedTo;
	__asm        mov    result, eax;
// LINE 658:
	__asm        mov    eax, returnDir;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _Tce;
// LINE 660:
_Ta9:
	__asm        dec    here.y;
	__asm        jmp    _Tf2;
// LINE 661:
_Tb1:
	__asm        inc    here.x;
	__asm        jmp    _Tf2;
// LINE 662:
_Tb9:
	__asm        inc    here.y;
	__asm        jmp    _Tf2;
// LINE 663:
_Tc1:
	__asm        dec    here.x;
	__asm        jmp    _Tf2;
// LINE 664:
	__asm        jmp    _Tf2;
_Tce:
	__asm        cmp    dword ptr [ebp-0x20], 3;
	__asm        ja     _Tf2;

	__asm        mov    eax, [ebp-0x20];
	__asm        jmp    _Switch_e2[0][eax*4];
// Switch pointers:
//   _Ta9
//   _Tb1
//   _Tb9
//   _Tc1
// LINE 668:
_Tf2:
	__asm        xor    eax, eax;
	__asm        mov    al, here.x;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, destLoc.x;
	__asm        cmp    eax, ecx;
	__asm        jne    _T11d;

	__asm        xor    eax, eax;
	__asm        mov    al, here.y;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, destLoc.y;
	__asm        cmp    eax, ecx;
	__asm        jne    _T11d;
// LINE 670:
	returnVal = 0x1;
// LINE 674:
_T11d:
	currentDir = returnDir;
// LINE 677:
	__asm        cmp    result, 0xFFFFFFFE;
	__asm        jne    _T1ac;
// LINE 682:
KlugeFirstStepIsAnIntersection:
// Block start:
	/*bp-0x18*/  int32_t yindex;
	__asm        mov    eax, returnDir;
	__asm        sub    eax, 2;
	__asm        and    eax, 3;
	__asm        mov    ecx, goal;
	__asm        mov    [ecx+0x12], eax;
	__asm        mov    eax, goal;
	__asm        mov    eax, [eax+0x12];
	__asm        mov    ecx, goal;
	__asm        mov    [ecx+0xE], eax;
// LINE 683:
	__asm        xor    eax, eax;
	__asm        mov    al, here.y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, here.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    yindex, ecx;
// LINE 684:
	__asm        xor    eax, eax;
	__asm        mov    al, here.x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    ecx, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    ecx, goal;
	__asm        mov    [ecx], eax;
// LINE 685:
	goal.gridIndex = 0xffffffff;
// LINE 686:
	goal.elementIndex = 0x0;
// LINE 688:
	__asm        mov    eax, reinterpret_cast<uint32_t>(startLoc.x);
	__asm        push   eax;
	__asm        mov    eax, goal;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindPlaceOnRoad;
// LINE 689:
	__asm        jmp    _T1d1;
// LINE 694:
// Block end:
_T1ac:
	__asm        cmp    result, 0xFFFFFFFF;
	__asm        jne    _T1cc;
// LINE 696:
	__asm        mov    eax, goal;
	__asm        cmp    dword ptr [eax], 0;
	__asm        jne    _T1c7;

	__asm        jmp    _T1c7;
// LINE 697:
_T1c7:
	__asm        jmp    _T1d1;
// LINE 699:
_T1cc:
	__asm        jmp    _T83;
// LINE 701:
_T1d1:
	__asm        mov    eax, returnVal;
	__asm        jmp    _T1de;
// LINE 702:
_T1d9:
	__asm        jmp    KlugeFirstStepIsAnIntersection;
_T1de:
}

// FUNCTION: COPTER_D 0x0053d400
void RoadGraph::FindDeadEnds() {
	/*bp-0x4*/   int32_t x;
	/*bp-0x8*/   int32_t y;
	/*bp-0xc*/   int32_t Offset;
	/*bp-0x10*/  int32_t stepSize;

// LINE 713:
	__asm        mov    x, 0;
	__asm        jmp    _T1b;
_T18:
	x++;
_T1b:
	__asm        cmp    x, 0x80;
	__asm        jge    _T4cb;
// LINE 715:
// Block start:
	/*bp-0x14*/  int32_t yindex;
	__asm        mov    yindex, 0;
	__asm        jmp    _T37;
_T34:
	yindex++;
_T37:
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x200];
	__asm        cmp    edx, yindex;
	__asm        jle    _T4c6;
// LINE 717:
// Block start:
	/*bp-0x18*/  /*packed*/ struct RGVertex *pRGV;
	/*bp-0x1c*/  unsigned short fromTile;
	__asm        mov    eax, x;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    ecx, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    pRGV, eax;
// LINE 719:
	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        mov    y, ecx;
// LINE 720:
	__asm        cmp    x, 0;
	__asm        jl     _Ta4;

	__asm        cmp    y, 0;
	__asm        jl     _Ta4;

	__asm        cmp    x, 0x80;
	__asm        jge    _Ta4;

	__asm        cmp    y, 0x80;
	__asm        jl     _Taf;
_Ta4:
	__asm        mov    fromTile, 0;
	__asm        jmp    _Te7;
_Taf:
	__asm        mov    eax, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    fromTile, ax;
	__asm        jmp    _Te7;
// LINE 722:
_Te7:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x69;
	__asm        jne    _T10b;
// LINE 724:
	stepSize = 0x2;
// LINE 725:
	Offset = 0x1;
// LINE 727:
	__asm        jmp    _T119;
// LINE 729:
_T10b:
	stepSize = 0x1;
// LINE 730:
	Offset = 0x0;
// LINE 734:
_T119:
	__asm        mov    eax, Offset;
	__asm        cmp    y, eax;
	__asm        jle    _T1fd;

	__asm        cmp    x, 0;
	__asm        jl     _T155;

	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        js     _T155;

	__asm        cmp    x, 0x80;
	__asm        jge    _T155;

	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T160;
_T155:
	__asm        mov    word ptr [ebp-0x20], 0;
	__asm        jmp    _T19a;
_T160:
	__asm        mov    eax, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx-1];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx-1];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x20], ax;
	__asm        jmp    _T19a;
_T19a:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   DoRoadTilesConnect;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     _T1fd;

	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        dec    ecx;
	__asm        push   ecx;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::IsThisADeadEnd;
	__asm        test   eax, eax;
	__asm        je     _T1fd;
// LINE 736:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        or     ecx, 1;
	__asm        shl    cl, 4;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        or     cl, al;
	__asm        mov    eax, pRGV;
	__asm        mov    [eax+2], cl;
// LINE 740:
_T1fd:
	__asm        mov    eax, 0x7F;
	__asm        sub    eax, Offset;
	__asm        cmp    eax, x;
	__asm        jle    _T2ee;

	__asm        mov    eax, x;
	__asm        add    eax, stepSize;
	__asm        js     _T242;

	__asm        cmp    y, 0;
	__asm        jl     _T242;

	__asm        mov    eax, x;
	__asm        add    eax, stepSize;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T242;

	__asm        cmp    y, 0x80;
	__asm        jl     _T24d;
_T242:
	__asm        mov    word ptr [ebp-0x24], 0;
	__asm        jmp    _T28b;
_T24d:
	__asm        mov    eax, x;
	__asm        add    eax, stepSize;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        add    ecx, stepSize;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x24], ax;
	__asm        jmp    _T28b;
_T28b:
	__asm        push   2;
	__asm        push   2;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   DoRoadTilesConnect;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     _T2ee;

	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+1];
	__asm        push   eax;
	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        inc    ecx;
	__asm        push   ecx;
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::IsThisADeadEnd;
	__asm        test   eax, eax;
	__asm        je     _T2ee;
// LINE 742:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        or     ecx, 2;
	__asm        shl    cl, 4;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        or     cl, al;
	__asm        mov    eax, pRGV;
	__asm        mov    [eax+2], cl;
// LINE 746:
_T2ee:
	__asm        mov    eax, 0x7F;
	__asm        sub    eax, Offset;
	__asm        cmp    eax, y;
	__asm        jle    _T3df;

	__asm        cmp    x, 0;
	__asm        jl     _T333;

	__asm        mov    eax, y;
	__asm        add    eax, stepSize;
	__asm        js     _T333;

	__asm        cmp    x, 0x80;
	__asm        jge    _T333;

	__asm        mov    eax, y;
	__asm        add    eax, stepSize;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T33e;
_T333:
	__asm        mov    word ptr [ebp-0x28], 0;
	__asm        jmp    _T37c;
_T33e:
	__asm        mov    eax, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, y;
	__asm        add    ecx, stepSize;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, y;
	__asm        add    edx, stepSize;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x28], ax;
	__asm        jmp    _T37c;
_T37c:
	__asm        push   4;
	__asm        push   4;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   DoRoadTilesConnect;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     _T3df;

	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        inc    ecx;
	__asm        push   ecx;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax];
	__asm        push   eax;
	__asm        push   2;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::IsThisADeadEnd;
	__asm        test   eax, eax;
	__asm        je     _T3df;
// LINE 748:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        or     ecx, 4;
	__asm        shl    cl, 4;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        or     cl, al;
	__asm        mov    eax, pRGV;
	__asm        mov    [eax+2], cl;
// LINE 752:
_T3df:
	__asm        mov    eax, Offset;
	__asm        cmp    x, eax;
	__asm        jle    _T4c1;

	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        js     _T41b;

	__asm        cmp    y, 0;
	__asm        jl     _T41b;

	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T41b;

	__asm        cmp    y, 0x80;
	__asm        jl     _T426;
_T41b:
	__asm        mov    word ptr [ebp-0x2C], 0;
	__asm        jmp    _T45e;
_T426:
	__asm        mov    eax, x;
	__asm        mov    eax, [eax*4+0x638F6C];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, NeighborFame[ecx*4];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x2C], ax;
	__asm        jmp    _T45e;
_T45e:
	__asm        push   8;
	__asm        push   8;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   DoRoadTilesConnect;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     _T4c1;

	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+1];
	__asm        push   eax;
	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        dec    ecx;
	__asm        push   ecx;
	__asm        push   3;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::IsThisADeadEnd;
	__asm        test   eax, eax;
	__asm        je     _T4c1;
// LINE 754:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        or     ecx, 8;
	__asm        shl    cl, 4;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        or     cl, al;
	__asm        mov    eax, pRGV;
	__asm        mov    [eax+2], cl;
// LINE 756:
// Block end:
_T4c1:
	__asm        jmp    _T34;
// LINE 757:
// Block end:
_T4c6:
	__asm        jmp    _T18;
// LINE 758:
_T4cb:
	__asm        jmp    _T4d0;
_T4d0:
}

// FUNCTION: COPTER_D 0x0053d8d5
int32_t RoadGraph::IsThisADeadEnd(enum DirIndex2 currentDir, unsigned char x, unsigned char y) {
	/*bp-0x4*/   enum DirIndex2 startingDir;
	/*bp-0x8*/   enum DirIndex2 returnDir;
	/*bp-0xc*/   enum DirIndex2 returnStatus;
	/*bp-0x10*/  int32_t repeatCount;

// LINE 763:
	repeatCount = 0x0;
// LINE 766:
	startingDir = currentDir;
// LINE 769:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T3c;
// LINE 771:
	__asm        xor    eax, eax;
	__asm        jmp    _Tf6;
// LINE 776:
_T3c:
	__asm        mov    eax, reinterpret_cast<uint32_t>(y);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(x);
	__asm        push   eax;
	__asm        lea    eax, returnDir;
	__asm        push   eax;
	__asm        mov    eax, currentDir;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::WhatDirAmIConnectedTo;
	__asm        mov    returnStatus, eax;
// LINE 778:
	__asm        cmp    returnStatus, 0xFFFFFFFF;
	__asm        jne    _T6b;
// LINE 779:
	__asm        mov    eax, 1;
	__asm        jmp    _Tf6;
// LINE 781:
_T6b:
	__asm        cmp    returnStatus, 0xFFFFFFFE;
	__asm        jne    _T7c;
// LINE 782:
	__asm        xor    eax, eax;
	__asm        jmp    _Tf6;
// LINE 785:
_T7c:
	__asm        mov    eax, currentDir;
	__asm        cmp    returnDir, eax;
	__asm        jne    _T90;
// LINE 787:
	repeatCount++;
// LINE 789:
	__asm        jmp    _T9d;
// LINE 791:
_T90:
	repeatCount = 0x0;
// LINE 792:
	currentDir = returnDir;
// LINE 795:
_T9d:
	__asm        mov    eax, currentDir;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _Tcd;
// LINE 797:
_Ta8:
	__asm        dec    y;
	__asm        jmp    _Tf1;
// LINE 798:
_Tb0:
	__asm        inc    x;
	__asm        jmp    _Tf1;
// LINE 799:
_Tb8:
	__asm        inc    y;
	__asm        jmp    _Tf1;
// LINE 800:
_Tc0:
	__asm        dec    x;
	__asm        jmp    _Tf1;
// LINE 801:
	__asm        jmp    _Tf1;
_Tcd:
	__asm        cmp    dword ptr [ebp-0x18], 3;
	__asm        ja     _Tf1;

	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    _Switch_e1[0][eax*4];
// Switch pointers:
//   _Ta8
//   _Tb0
//   _Tb8
//   _Tc0
// LINE 802:
_Tf1:
	__asm        jmp    _T3c;
// LINE 803:
_Tf6:
}

// FUNCTION: COPTER_D 0x0053d9d2
void RoadGraph::FindEdges(int32_t x, int32_t y, /*packed*/ struct RGVertex *pRGV) {
	/*bp-0x4*/   unsigned short fromTile;
	/*bp-0x8*/   /*packed*/ struct Edge *pEdge;
	/*bp-0xc*/   int32_t Offset;
	/*bp-0x10*/  int32_t stepSize;

// LINE 810:
	__asm        cmp    x, 0;
	__asm        jl     _T3a;

	__asm        cmp    y, 0;
	__asm        jl     _T3a;

	__asm        cmp    x, 0x80;
	__asm        jge    _T3a;

	__asm        cmp    y, 0x80;
	__asm        jl     _T45;
_T3a:
	__asm        mov    fromTile, 0;
	__asm        jmp    _T7d;
_T45:
	__asm        mov    eax, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    fromTile, ax;
	__asm        jmp    _T7d;
// LINE 815:
_T7d:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _Taa;
_T8d:
	__asm        mov    eax, pRGV;
	__asm        mov    byte ptr [eax+3], 1;
	__asm        jmp    _Tff;
_T99:
	__asm        mov    eax, pRGV;
	__asm        mov    byte ptr [eax+3], 0;
	__asm        jmp    _Tff;

	__asm        jmp    _Tf6;
_Taa:
	__asm        cmp    dword ptr [ebp-0x34], 0x6B;
	__asm        jg     _Td7;

	__asm        cmp    dword ptr [ebp-0x34], 0x61;
	__asm        jge    _T8d;

	__asm        cmp    dword ptr [ebp-0x34], 0x49;
	__asm        jl     _T99;

	__asm        cmp    dword ptr [ebp-0x34], 0x50;
	__asm        jle    _T8d;

	__asm        jmp    _T99;
_Td7:
	__asm        cmp    dword ptr [ebp-0x34], 0x806A;
	__asm        jl     _T99;

	__asm        cmp    dword ptr [ebp-0x34], 0x806B;
	__asm        jle    _T8d;

	__asm        jmp    _T99;
_Tf6:
	__asm        mov    al, [ebp-0x14];
	__asm        mov    ecx, pRGV;
	__asm        mov    [ecx+3], al;
// LINE 817:
_Tff:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x69;
	__asm        jne    _T123;
// LINE 819:
	stepSize = 0x2;
// LINE 820:
	Offset = 0x1;
// LINE 822:
	__asm        jmp    _T131;
// LINE 824:
_T123:
	stepSize = 0x1;
// LINE 825:
	Offset = 0x0;
// LINE 833:
_T131:
	__asm        mov    eax, y;
	__asm        cmp    Offset, eax;
	__asm        jge    _T40c;
// LINE 835:
	__asm        cmp    x, 0;
	__asm        jl     _T16d;

	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        js     _T16d;

	__asm        cmp    x, 0x80;
	__asm        jge    _T16d;

	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T178;
_T16d:
	__asm        mov    word ptr [ebp-0x18], 0;
	__asm        jmp    _T1b2;
_T178:
	__asm        mov    eax, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx-1];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx-1];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x18], ax;
	__asm        jmp    _T1b2;
_T1b2:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   DoRoadTilesConnect;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     _T40c;
// LINE 837:
	__asm        mov    eax, pRGV;
	__asm        add    eax, 4;
	__asm        mov    pEdge, eax;
// LINE 838:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T270;
_T1e7:
	__asm        mov    dword ptr [ebp-0x28], 8;
	__asm        jmp    _T3a9;
_T1f3:
	__asm        mov    dword ptr [ebp-0x28], 0xA;
	__asm        jmp    _T3a9;
_T1ff:
	__asm        mov    dword ptr [ebp-0x28], 8;
	__asm        jmp    _T3a9;
_T20b:
	__asm        mov    dword ptr [ebp-0x28], 4;
	__asm        jmp    _T3a9;
_T217:
	__asm        mov    dword ptr [ebp-0x28], 8;
	__asm        jmp    _T3a9;
_T223:
	__asm        mov    dword ptr [ebp-0x28], 8;
	__asm        jmp    _T3a9;
_T22f:
	__asm        mov    dword ptr [ebp-0x28], 0xA;
	__asm        jmp    _T3a9;
_T23b:
	__asm        mov    dword ptr [ebp-0x28], 8;
	__asm        jmp    _T3a9;
_T247:
	__asm        mov    dword ptr [ebp-0x28], 0xA;
	__asm        jmp    _T3a9;
_T253:
	__asm        mov    dword ptr [ebp-0x28], 4;
	__asm        jmp    _T3a9;
_T25f:
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    _T3a9;

	__asm        jmp    _T3a9;
_T270:
	__asm        cmp    dword ptr [ebp-0x38], 0x2B;
	__asm        jg     _T29d;

	__asm        cmp    dword ptr [ebp-0x38], 0x27;
	__asm        jge    _T1f3;

	__asm        cmp    dword ptr [ebp-0x38], 0x1D;
	__asm        jl     _T25f;

	__asm        cmp    dword ptr [ebp-0x38], 0x26;
	__asm        jle    _T1e7;

	__asm        jmp    _T25f;
_T29d:
	__asm        cmp    dword ptr [ebp-0x38], 0x50;
	__asm        jg     _T2ca;

	__asm        cmp    dword ptr [ebp-0x38], 0x49;
	__asm        jge    _T20b;

	__asm        cmp    dword ptr [ebp-0x38], 0x3F;
	__asm        jl     _T25f;

	__asm        cmp    dword ptr [ebp-0x38], 0x46;
	__asm        jle    _T1ff;

	__asm        jmp    _T25f;
_T2ca:
	__asm        cmp    dword ptr [ebp-0x38], 0x59;
	__asm        jg     _T2f7;

	__asm        cmp    dword ptr [ebp-0x38], 0x57;
	__asm        jge    _T223;

	__asm        cmp    dword ptr [ebp-0x38], 0x51;
	__asm        jl     _T25f;

	__asm        cmp    dword ptr [ebp-0x38], 0x56;
	__asm        jle    _T217;

	__asm        jmp    _T25f;
_T2f7:
	__asm        cmp    dword ptr [ebp-0x38], 0x68;
	__asm        jg     _T324;

	__asm        cmp    dword ptr [ebp-0x38], 0x61;
	__asm        jge    _T23b;

	__asm        cmp    dword ptr [ebp-0x38], 0x5D;
	__asm        jl     _T25f;

	__asm        cmp    dword ptr [ebp-0x38], 0x60;
	__asm        jle    _T22f;

	__asm        jmp    _T25f;
_T324:
	__asm        cmp    dword ptr [ebp-0x38], 0x8056;
	__asm        jg     _T361;

	__asm        cmp    dword ptr [ebp-0x38], 0x8051;
	__asm        jge    _T217;

	__asm        cmp    dword ptr [ebp-0x38], 0x69;
	__asm        je     _T247;

	__asm        cmp    dword ptr [ebp-0x38], 0x6A;
	__asm        jl     _T25f;

	__asm        cmp    dword ptr [ebp-0x38], 0x6B;
	__asm        jle    _T253;

	__asm        jmp    _T25f;
_T361:
	__asm        sub    dword ptr [ebp-0x38], 0x8057;
	__asm        cmp    dword ptr [ebp-0x38], 0x14;
	__asm        ja     _T25f;

	__asm        mov    eax, [ebp-0x38];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, _SwitchTable_394[0][eax];
	__asm        jmp    _Switch_384[0][ecx*4];
// Switch pointers:
//   _T223
//   _T22f
//   _T253
//   _T25f
// Switch table
_T3a9:
	__asm        mov    eax, pEdge;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+2];
	__asm        add    ecx, [ebp-0x28];
	__asm        mov    eax, pEdge;
	__asm        mov    [eax+2], cx;
// LINE 839:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        or     ecx, 1;
	__asm        and    cl, 0xF;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF0;
	__asm        or     cl, al;
	__asm        mov    eax, pRGV;
	__asm        mov    [eax+2], cl;
// LINE 840:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        and    ecx, 1;
	__asm        push   ecx;
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, pEdge;
	__asm        push   eax;
	__asm        mov    eax, pRGV;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindNumRoadElements;
// LINE 844:
_T40c:
	__asm        mov    eax, 0x7F;
	__asm        sub    eax, Offset;
	__asm        cmp    eax, x;
	__asm        jle    _T6f4;
// LINE 846:
	__asm        mov    eax, stepSize;
	__asm        add    eax, x;
	__asm        js     _T451;

	__asm        cmp    y, 0;
	__asm        jl     _T451;

	__asm        mov    eax, stepSize;
	__asm        add    eax, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T451;

	__asm        cmp    y, 0x80;
	__asm        jl     _T45c;
_T451:
	__asm        mov    word ptr [ebp-0x1C], 0;
	__asm        jmp    _T49a;
_T45c:
	__asm        mov    eax, stepSize;
	__asm        add    eax, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, stepSize;
	__asm        add    ecx, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x1C], ax;
	__asm        jmp    _T49a;
_T49a:
	__asm        push   2;
	__asm        push   2;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   DoRoadTilesConnect;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     _T6f4;
// LINE 848:
	__asm        mov    eax, pRGV;
	__asm        add    eax, 0xE;
	__asm        mov    pEdge, eax;
// LINE 849:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T558;
_T4cf:
	__asm        mov    dword ptr [ebp-0x2C], 8;
	__asm        jmp    _T691;
_T4db:
	__asm        mov    dword ptr [ebp-0x2C], 0xA;
	__asm        jmp    _T691;
_T4e7:
	__asm        mov    dword ptr [ebp-0x2C], 8;
	__asm        jmp    _T691;
_T4f3:
	__asm        mov    dword ptr [ebp-0x2C], 4;
	__asm        jmp    _T691;
_T4ff:
	__asm        mov    dword ptr [ebp-0x2C], 8;
	__asm        jmp    _T691;
_T50b:
	__asm        mov    dword ptr [ebp-0x2C], 8;
	__asm        jmp    _T691;
_T517:
	__asm        mov    dword ptr [ebp-0x2C], 0xA;
	__asm        jmp    _T691;
_T523:
	__asm        mov    dword ptr [ebp-0x2C], 8;
	__asm        jmp    _T691;
_T52f:
	__asm        mov    dword ptr [ebp-0x2C], 0xA;
	__asm        jmp    _T691;
_T53b:
	__asm        mov    dword ptr [ebp-0x2C], 4;
	__asm        jmp    _T691;
_T547:
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    _T691;

	__asm        jmp    _T691;
_T558:
	__asm        cmp    dword ptr [ebp-0x3C], 0x2B;
	__asm        jg     _T585;

	__asm        cmp    dword ptr [ebp-0x3C], 0x27;
	__asm        jge    _T4db;

	__asm        cmp    dword ptr [ebp-0x3C], 0x1D;
	__asm        jl     _T547;

	__asm        cmp    dword ptr [ebp-0x3C], 0x26;
	__asm        jle    _T4cf;

	__asm        jmp    _T547;
_T585:
	__asm        cmp    dword ptr [ebp-0x3C], 0x50;
	__asm        jg     _T5b2;

	__asm        cmp    dword ptr [ebp-0x3C], 0x49;
	__asm        jge    _T4f3;

	__asm        cmp    dword ptr [ebp-0x3C], 0x3F;
	__asm        jl     _T547;

	__asm        cmp    dword ptr [ebp-0x3C], 0x46;
	__asm        jle    _T4e7;

	__asm        jmp    _T547;
_T5b2:
	__asm        cmp    dword ptr [ebp-0x3C], 0x59;
	__asm        jg     _T5df;

	__asm        cmp    dword ptr [ebp-0x3C], 0x57;
	__asm        jge    _T50b;

	__asm        cmp    dword ptr [ebp-0x3C], 0x51;
	__asm        jl     _T547;

	__asm        cmp    dword ptr [ebp-0x3C], 0x56;
	__asm        jle    _T4ff;

	__asm        jmp    _T547;
_T5df:
	__asm        cmp    dword ptr [ebp-0x3C], 0x68;
	__asm        jg     _T60c;

	__asm        cmp    dword ptr [ebp-0x3C], 0x61;
	__asm        jge    _T523;

	__asm        cmp    dword ptr [ebp-0x3C], 0x5D;
	__asm        jl     _T547;

	__asm        cmp    dword ptr [ebp-0x3C], 0x60;
	__asm        jle    _T517;

	__asm        jmp    _T547;
_T60c:
	__asm        cmp    dword ptr [ebp-0x3C], 0x8056;
	__asm        jg     _T649;

	__asm        cmp    dword ptr [ebp-0x3C], 0x8051;
	__asm        jge    _T4ff;

	__asm        cmp    dword ptr [ebp-0x3C], 0x69;
	__asm        je     _T52f;

	__asm        cmp    dword ptr [ebp-0x3C], 0x6A;
	__asm        jl     _T547;

	__asm        cmp    dword ptr [ebp-0x3C], 0x6B;
	__asm        jle    _T53b;

	__asm        jmp    _T547;
_T649:
	__asm        sub    dword ptr [ebp-0x3C], 0x8057;
	__asm        cmp    dword ptr [ebp-0x3C], 0x14;
	__asm        ja     _T547;

	__asm        mov    eax, [ebp-0x3C];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, _SwitchTable_67c[0][eax];
	__asm        jmp    _Switch_66c[0][ecx*4];
// Switch pointers:
//   _T50b
//   _T517
//   _T53b
//   _T547
// Switch table
_T691:
	__asm        mov    eax, pEdge;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+2];
	__asm        add    ecx, [ebp-0x2C];
	__asm        mov    eax, pEdge;
	__asm        mov    [eax+2], cx;
// LINE 850:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        or     ecx, 2;
	__asm        and    cl, 0xF;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF0;
	__asm        or     cl, al;
	__asm        mov    eax, pRGV;
	__asm        mov    [eax+2], cl;
// LINE 851:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        and    ecx, 2;
	__asm        push   ecx;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, pEdge;
	__asm        push   eax;
	__asm        mov    eax, pRGV;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindNumRoadElements;
// LINE 855:
_T6f4:
	__asm        mov    eax, 0x7F;
	__asm        sub    eax, Offset;
	__asm        cmp    eax, y;
	__asm        jle    _T815;
// LINE 857:
	__asm        cmp    x, 0;
	__asm        jl     _T739;

	__asm        mov    eax, stepSize;
	__asm        add    eax, y;
	__asm        js     _T739;

	__asm        cmp    x, 0x80;
	__asm        jge    _T739;

	__asm        mov    eax, stepSize;
	__asm        add    eax, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T744;
_T739:
	__asm        mov    word ptr [ebp-0x20], 0;
	__asm        jmp    _T782;
_T744:
	__asm        mov    eax, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, stepSize;
	__asm        add    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, stepSize;
	__asm        add    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x20], ax;
	__asm        jmp    _T782;
_T782:
	__asm        push   4;
	__asm        push   4;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   DoRoadTilesConnect;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     _T815;
// LINE 859:
	__asm        mov    eax, pRGV;
	__asm        add    eax, 0x18;
	__asm        mov    pEdge, eax;
// LINE 860:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   TimeOfTravelTable;
	__asm        add    esp, 4;
	__asm        mov    ecx, pEdge;
	__asm        xor    edx, edx;
	__asm        mov    dx, [ecx+2];
	__asm        add    eax, edx;
	__asm        mov    ecx, pEdge;
	__asm        mov    [ecx+2], ax;
// LINE 861:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        or     ecx, 4;
	__asm        and    cl, 0xF;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF0;
	__asm        or     cl, al;
	__asm        mov    eax, pRGV;
	__asm        mov    [eax+2], cl;
// LINE 862:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        and    ecx, 4;
	__asm        push   ecx;
	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        push   2;
	__asm        mov    eax, pEdge;
	__asm        push   eax;
	__asm        mov    eax, pRGV;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindNumRoadElements;
// LINE 866:
_T815:
	__asm        mov    eax, x;
	__asm        cmp    Offset, eax;
	__asm        jge    _T927;
// LINE 868:
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        js     _T851;

	__asm        cmp    y, 0;
	__asm        jl     _T851;

	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T851;

	__asm        cmp    y, 0x80;
	__asm        jl     _T85c;
_T851:
	__asm        mov    word ptr [ebp-0x24], 0;
	__asm        jmp    _T894;
_T85c:
	__asm        mov    eax, x;
	__asm        mov    eax, [eax*4+0x638F6C];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, NeighborFame[ecx*4];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x24], ax;
	__asm        jmp    _T894;
_T894:
	__asm        push   8;
	__asm        push   8;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   DoRoadTilesConnect;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     _T927;
// LINE 870:
	__asm        mov    eax, pRGV;
	__asm        add    eax, 0x22;
	__asm        mov    pEdge, eax;
// LINE 871:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        push   eax;
	__asm        call   TimeOfTravelTable;
	__asm        add    esp, 4;
	__asm        mov    ecx, pEdge;
	__asm        xor    edx, edx;
	__asm        mov    dx, [ecx+2];
	__asm        add    eax, edx;
	__asm        mov    ecx, pEdge;
	__asm        mov    [ecx+2], ax;
// LINE 872:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        or     ecx, 8;
	__asm        and    cl, 0xF;
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF0;
	__asm        or     cl, al;
	__asm        mov    eax, pRGV;
	__asm        mov    [eax+2], cl;
// LINE 873:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        and    ecx, 8;
	__asm        push   ecx;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        push   3;
	__asm        mov    eax, pEdge;
	__asm        push   eax;
	__asm        mov    eax, pRGV;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindNumRoadElements;
// LINE 876:
_T927:
	__asm        jmp    _T92c;
_T92c:
}

// FUNCTION: COPTER_D 0x0053e305
void RoadGraph::FindNumRoadElements(/*packed*/ struct RGVertex *pRGV, /*packed*/ struct Edge *pEdge, enum DirIndex2 currentDir, unsigned char x, unsigned char y, int32_t fDeadEnd) {
	/*bp-0x4*/   enum DirIndex2 startingDir;
	/*bp-0x8*/   enum DirIndex2 returnDir;
	/*bp-0xc*/   enum DirIndex2 returnStatus;
	/*bp-0x10*/  int32_t repeatCount;

// LINE 881:
	repeatCount = 0x0;
// LINE 884:
	startingDir = currentDir;
// LINE 887:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T65;
// LINE 889:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    ecx, pEdge;
	__asm        mov    [ecx], al;
// LINE 890:
	pEdge->x = x;
// LINE 891:
	pEdge->numElementsToPath = 0x0;
// LINE 892:
	__asm        jmp    _T5a4;
// LINE 895:
_T65:
	__asm        cmp    fDeadEnd, 0;
	__asm        je     _T76;
// LINE 896:
	pEdge->numElementsToPath++;
// LINE 900:
_T76:
	__asm        mov    eax, reinterpret_cast<uint32_t>(y);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(x);
	__asm        push   eax;
	__asm        lea    eax, returnDir;
	__asm        push   eax;
	__asm        mov    eax, currentDir;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::WhatDirAmIConnectedTo;
	__asm        mov    returnStatus, eax;
// LINE 901:
	__asm        cmp    returnStatus, 0xFFFFFFFF;
	__asm        jne    _Ta0;
// LINE 902:
	__asm        jmp    _T13a;
// LINE 904:
_Ta0:
	__asm        cmp    returnStatus, 0xFFFFFFFE;
	__asm        jne    _Taf;
// LINE 905:
	__asm        jmp    _T13a;
// LINE 907:
_Taf:
	__asm        mov    eax, currentDir;
	__asm        cmp    returnDir, eax;
	__asm        jne    _Tc3;
// LINE 909:
	repeatCount++;
// LINE 911:
	__asm        jmp    _Te1;
// LINE 913:
_Tc3:
	repeatCount = 0x0;
// LINE 914:
	currentDir = returnDir;
// LINE 918:
	__asm        cmp    fDeadEnd, 0;
	__asm        je     _Te1;
// LINE 920:
	pEdge->numElementsToPath++;
// LINE 924:
_Te1:
	__asm        mov    eax, returnDir;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T111;
// LINE 926:
_Tec:
	__asm        dec    y;
	__asm        jmp    _T135;
// LINE 927:
_Tf4:
	__asm        inc    x;
	__asm        jmp    _T135;
// LINE 928:
_Tfc:
	__asm        inc    y;
	__asm        jmp    _T135;
// LINE 929:
_T104:
	__asm        dec    x;
	__asm        jmp    _T135;
// LINE 930:
	__asm        jmp    _T135;
_T111:
	__asm        cmp    dword ptr [ebp-0x28], 3;
	__asm        ja     _T135;

	__asm        mov    eax, [ebp-0x28];
	__asm        jmp    _Switch_125[0][eax*4];
// Switch pointers:
//   _Tec
//   _Tf4
//   _Tfc
//   _T104
// LINE 931:
_T135:
	__asm        jmp    _T76;
// LINE 936:
_T13a:
	__asm        cmp    returnStatus, 0xFFFFFFFE;
	__asm        jne    _T1cb;
// LINE 940:
// Block start:
	/*bp-0x14*/  unsigned char tempx;
	/*bp-0x18*/  unsigned char tempy;
	tempx = x;
// LINE 941:
	tempy = y;
// LINE 943:
	__asm        mov    eax, returnDir;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T180;
// LINE 945:
_T15b:
	__asm        dec    tempy;
	__asm        jmp    _T1a4;
// LINE 946:
_T163:
	__asm        inc    tempx;
	__asm        jmp    _T1a4;
// LINE 947:
_T16b:
	__asm        inc    tempy;
	__asm        jmp    _T1a4;
// LINE 948:
_T173:
	__asm        dec    tempx;
	__asm        jmp    _T1a4;
// LINE 949:
	__asm        jmp    _T1a4;
_T180:
	__asm        cmp    dword ptr [ebp-0x2C], 3;
	__asm        ja     _T1a4;

	__asm        mov    eax, [ebp-0x2C];
	__asm        jmp    _Switch_194[0][eax*4];
// Switch pointers:
//   _T15b
//   _T163
//   _T16b
//   _T173
// LINE 951:
_T1a4:
	__asm        xor    eax, eax;
	__asm        mov    al, tempy;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, tempx;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    ecx, pEdge;
	__asm        mov    [ecx], al;
// LINE 952:
	pEdge->x = tempx;
// LINE 954:
// Block end:
	__asm        jmp    _T1fe;
_T1cb:
	__asm        cmp    returnStatus, 0xFFFFFFFF;
	__asm        jne    _T1fe;
// LINE 956:
	pEdge->x = pRGV->x;
// LINE 957:
	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        push   ecx;
	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        push   ecx;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    ecx, pEdge;
	__asm        mov    [ecx], al;
// LINE 962:
_T1fe:
	__asm        mov    eax, returnDir;
	__asm        sub    eax, 2;
	__asm        and    eax, 3;
	__asm        mov    currentDir, eax;
// LINE 963:
	pEdge->numElementsToPath++;
// LINE 965:
	repeatCount = 0x0;
// LINE 969:
_T218:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     _T252;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     _T252;

	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T252;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T25d;
_T252:
	__asm        mov    word ptr [ebp-0x1C], 0;
	__asm        jmp    _T29d;
_T25d:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x1C], ax;
	__asm        jmp    _T29d;
_T29d:
	__asm        mov    eax, [ebp-0x1C];
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T336;
_T2ad:
	__asm        mov    dword ptr [ebp-0x20], 8;
	__asm        jmp    _T46f;
_T2b9:
	__asm        mov    dword ptr [ebp-0x20], 0xA;
	__asm        jmp    _T46f;
_T2c5:
	__asm        mov    dword ptr [ebp-0x20], 8;
	__asm        jmp    _T46f;
_T2d1:
	__asm        mov    dword ptr [ebp-0x20], 4;
	__asm        jmp    _T46f;
_T2dd:
	__asm        mov    dword ptr [ebp-0x20], 8;
	__asm        jmp    _T46f;
_T2e9:
	__asm        mov    dword ptr [ebp-0x20], 8;
	__asm        jmp    _T46f;
_T2f5:
	__asm        mov    dword ptr [ebp-0x20], 0xA;
	__asm        jmp    _T46f;
_T301:
	__asm        mov    dword ptr [ebp-0x20], 8;
	__asm        jmp    _T46f;
_T30d:
	__asm        mov    dword ptr [ebp-0x20], 0xA;
	__asm        jmp    _T46f;
_T319:
	__asm        mov    dword ptr [ebp-0x20], 4;
	__asm        jmp    _T46f;
_T325:
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    _T46f;

	__asm        jmp    _T46f;
_T336:
	__asm        cmp    dword ptr [ebp-0x30], 0x2B;
	__asm        jg     _T363;

	__asm        cmp    dword ptr [ebp-0x30], 0x27;
	__asm        jge    _T2b9;

	__asm        cmp    dword ptr [ebp-0x30], 0x1D;
	__asm        jl     _T325;

	__asm        cmp    dword ptr [ebp-0x30], 0x26;
	__asm        jle    _T2ad;

	__asm        jmp    _T325;
_T363:
	__asm        cmp    dword ptr [ebp-0x30], 0x50;
	__asm        jg     _T390;

	__asm        cmp    dword ptr [ebp-0x30], 0x49;
	__asm        jge    _T2d1;

	__asm        cmp    dword ptr [ebp-0x30], 0x3F;
	__asm        jl     _T325;

	__asm        cmp    dword ptr [ebp-0x30], 0x46;
	__asm        jle    _T2c5;

	__asm        jmp    _T325;
_T390:
	__asm        cmp    dword ptr [ebp-0x30], 0x59;
	__asm        jg     _T3bd;

	__asm        cmp    dword ptr [ebp-0x30], 0x57;
	__asm        jge    _T2e9;

	__asm        cmp    dword ptr [ebp-0x30], 0x51;
	__asm        jl     _T325;

	__asm        cmp    dword ptr [ebp-0x30], 0x56;
	__asm        jle    _T2dd;

	__asm        jmp    _T325;
_T3bd:
	__asm        cmp    dword ptr [ebp-0x30], 0x68;
	__asm        jg     _T3ea;

	__asm        cmp    dword ptr [ebp-0x30], 0x61;
	__asm        jge    _T301;

	__asm        cmp    dword ptr [ebp-0x30], 0x5D;
	__asm        jl     _T325;

	__asm        cmp    dword ptr [ebp-0x30], 0x60;
	__asm        jle    _T2f5;

	__asm        jmp    _T325;
_T3ea:
	__asm        cmp    dword ptr [ebp-0x30], 0x8056;
	__asm        jg     _T427;

	__asm        cmp    dword ptr [ebp-0x30], 0x8051;
	__asm        jge    _T2dd;

	__asm        cmp    dword ptr [ebp-0x30], 0x69;
	__asm        je     _T30d;

	__asm        cmp    dword ptr [ebp-0x30], 0x6A;
	__asm        jl     _T325;

	__asm        cmp    dword ptr [ebp-0x30], 0x6B;
	__asm        jle    _T319;

	__asm        jmp    _T325;
_T427:
	__asm        sub    dword ptr [ebp-0x30], 0x8057;
	__asm        cmp    dword ptr [ebp-0x30], 0x14;
	__asm        ja     _T325;

	__asm        mov    eax, [ebp-0x30];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, _SwitchTable_45a[0][eax];
	__asm        jmp    _Switch_44a[0][ecx*4];
// Switch pointers:
//   _T2e9
//   _T2f5
//   _T319
//   _T325
// Switch table
_T46f:
	__asm        mov    eax, pEdge;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+2];
	__asm        add    ecx, [ebp-0x20];
	__asm        mov    eax, pEdge;
	__asm        mov    [eax+2], cx;
// LINE 970:
	__asm        mov    eax, pEdge;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+2];
	__asm        cmp    ecx, 0x7D00;
	__asm        jl     _T4b3;

	__asm        push   0x3CA;
	__asm        push   0x5B81D8;
	__asm        push   0x5B81FC;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T4b8;
_T4b3:
	__asm        jmp    _T4b8;
// LINE 972:
_T4b8:
	__asm        mov    eax, reinterpret_cast<uint32_t>(y);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(x);
	__asm        push   eax;
	__asm        lea    eax, returnDir;
	__asm        push   eax;
	__asm        mov    eax, currentDir;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::WhatDirAmIConnectedTo;
	__asm        mov    returnStatus, eax;
// LINE 973:
	__asm        cmp    returnStatus, 0xFFFFFFFF;
	__asm        jne    _T4e2;
// LINE 974:
	__asm        jmp    _T572;
// LINE 977:
_T4e2:
	__asm        cmp    returnStatus, 0xFFFFFFFE;
	__asm        jne    _T4f1;
// LINE 978:
	__asm        jmp    _T572;
// LINE 980:
_T4f1:
	__asm        mov    eax, currentDir;
	__asm        cmp    returnDir, eax;
	__asm        jne    _T505;
// LINE 982:
	repeatCount++;
// LINE 984:
	__asm        jmp    _T519;
// LINE 986:
_T505:
	repeatCount = 0x0;
// LINE 987:
	currentDir = returnDir;
// LINE 988:
	pEdge->numElementsToPath++;
// LINE 991:
_T519:
	__asm        mov    eax, currentDir;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T549;
// LINE 993:
_T524:
	__asm        dec    y;
	__asm        jmp    _T56d;
// LINE 994:
_T52c:
	__asm        inc    x;
	__asm        jmp    _T56d;
// LINE 995:
_T534:
	__asm        inc    y;
	__asm        jmp    _T56d;
// LINE 996:
_T53c:
	__asm        dec    x;
	__asm        jmp    _T56d;
// LINE 997:
	__asm        jmp    _T56d;
_T549:
	__asm        cmp    dword ptr [ebp-0x34], 3;
	__asm        ja     _T56d;

	__asm        mov    eax, [ebp-0x34];
	__asm        jmp    _Switch_55d[0][eax*4];
// Switch pointers:
//   _T524
//   _T52c
//   _T534
//   _T53c
// LINE 998:
_T56d:
	__asm        jmp    _T218;
// LINE 1007:
_T572:
	__asm        cmp    fDeadEnd, 0;
	__asm        je     _T59f;

	__asm        mov    eax, pEdge;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+4];
	__asm        cmp    ecx, 2;
	__asm        jne    _T59f;

	__asm        cmp    repeatCount, 0;
	__asm        jne    _T59f;
// LINE 1008:
	pEdge->numElementsToPath--;
// LINE 1009:
_T59f:
	__asm        jmp    _T5a4;
_T5a4:
}

// FUNCTION: COPTER_D 0x0053e8b0
enum DirIndex2 RoadGraph::WhatDirAmIConnectedTo(enum DirIndex2 currentDir, enum DirIndex2 *pNextDir, unsigned char x, unsigned char y) {
	/*bp-0x4*/   unsigned short LocalTile;
	/*bp-0x8*/   int32_t Offset;
	/*bp-0xc*/   int32_t stepSize;

// LINE 1014:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     _T46;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     _T46;

	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T46;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T51;
_T46:
	__asm        mov    LocalTile, 0;
	__asm        jmp    _T91;
_T51:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    LocalTile, ax;
	__asm        jmp    _T91;
// LINE 1021:
_T91:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, AltMap[eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dx, [eax+ecx*2];
	__asm        shr    edx, 0xA;
	__asm        test   dl, 0x1F;
	__asm        je     _Tc4;
// LINE 1023:
	pNextDir-> = currentDir;
// LINE 1024:
	__asm        mov    eax, currentDir;
	__asm        jmp    _T61f;
// LINE 1029:
_Tc4:
	__asm        mov    eax, reinterpret_cast<uint32_t>(LocalTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _Te8;

	__asm        jmp    _T12a;

	__asm        jmp    _T151;

	__asm        jmp    _T12a;

	__asm        jmp    _T120;
_Te8:
	__asm        cmp    dword ptr [ebp-0x28], 0x806B;
	__asm        jg     _T151;

	__asm        cmp    dword ptr [ebp-0x28], 0x806A;
	__asm        jge    _T12a;

	__asm        cmp    dword ptr [ebp-0x28], 0x61;
	__asm        jl     _T151;

	__asm        cmp    dword ptr [ebp-0x28], 0x6B;
	__asm        jle    _T12a;

	__asm        jmp    _T151;

	__asm        jmp    _T151;
_T120:
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T151;
// LINE 1031:
_T12a:
	stepSize = 0x2;
// LINE 1032:
	Offset = 0x1;
// LINE 1033:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        and    al, 0xFE;
	__asm        mov    x, al;
// LINE 1034:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        and    al, 0xFE;
	__asm        mov    y, al;
// LINE 1036:
	__asm        jmp    _T15f;
// LINE 1038:
_T151:
	stepSize = 0x1;
// LINE 1039:
	Offset = 0x0;
// LINE 1043:
_T15f:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     _T199;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     _T199;

	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T199;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T1a4;
_T199:
	__asm        mov    LocalTile, 0;
	__asm        jmp    _T1e4;
_T1a4:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    LocalTile, ax;
	__asm        jmp    _T1e4;
// LINE 1047:
_T1e4:
	__asm        cmp    currentDir, 2;
	__asm        je     _T2e4;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, Offset;
	__asm        jl     _T2e4;
// LINE 1048:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     _T236;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        dec    eax;
	__asm        js     _T236;

	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T236;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T241;
_T236:
	__asm        mov    word ptr [ebp-0x14], 0;
	__asm        jmp    _T283;
_T241:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx-1];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx-1];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x14], ax;
	__asm        jmp    _T283;
_T283:
	__asm        push   1;
	__asm        mov    eax, currentDir;
	__asm        mov    eax, IndexToType[0][eax*4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(LocalTile);
	__asm        push   eax;
	__asm        call   DoRoadTilesConnect;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     _T2e4;
// LINE 1050:
	pNextDir-> = 0x0;
// LINE 1051:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T2dd;
// LINE 1052:
	__asm        mov    eax, 0xFFFFFFFE;
	__asm        jmp    _T61f;
// LINE 1053:
	__asm        jmp    _T2e4;
// LINE 1054:
_T2dd:
	__asm        xor    eax, eax;
	__asm        jmp    _T61f;
// LINE 1057:
_T2e4:
	__asm        cmp    currentDir, 3;
	__asm        je     _T3f8;

	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    ecx, 0x7F;
	__asm        sub    ecx, Offset;
	__asm        cmp    eax, ecx;
	__asm        jg     _T3f8;
// LINE 1058:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        add    eax, stepSize;
	__asm        js     _T341;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     _T341;

	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        add    eax, stepSize;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T341;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T34c;
_T341:
	__asm        mov    word ptr [ebp-0x18], 0;
	__asm        jmp    _T392;
_T34c:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        add    eax, stepSize;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        add    ecx, stepSize;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x18], ax;
	__asm        jmp    _T392;
_T392:
	__asm        push   2;
	__asm        mov    eax, currentDir;
	__asm        mov    eax, IndexToType[0][eax*4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(LocalTile);
	__asm        push   eax;
	__asm        call   DoRoadTilesConnect;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     _T3f8;
// LINE 1060:
	pNextDir-> = 0x1;
// LINE 1061:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        add    eax, stepSize;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T3ee;
// LINE 1062:
	__asm        mov    eax, 0xFFFFFFFE;
	__asm        jmp    _T61f;
// LINE 1063:
	__asm        jmp    _T3f8;
// LINE 1064:
_T3ee:
	__asm        mov    eax, 1;
	__asm        jmp    _T61f;
// LINE 1067:
_T3f8:
	__asm        cmp    currentDir, 1;
	__asm        je     _T4f9;

	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, Offset;
	__asm        jl     _T4f9;
// LINE 1068:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        dec    eax;
	__asm        js     _T44a;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     _T44a;

	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T44a;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T455;
_T44a:
	__asm        mov    word ptr [ebp-0x1C], 0;
	__asm        jmp    _T495;
_T455:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, [eax*4+0x638F6C];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        mov    ecx, NeighborFame[ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x1C], ax;
	__asm        jmp    _T495;
_T495:
	__asm        push   8;
	__asm        mov    eax, currentDir;
	__asm        mov    eax, IndexToType[0][eax*4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(LocalTile);
	__asm        push   eax;
	__asm        call   DoRoadTilesConnect;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     _T4f9;
// LINE 1070:
	pNextDir-> = 0x3;
// LINE 1071:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T4ef;
// LINE 1072:
	__asm        mov    eax, 0xFFFFFFFE;
	__asm        jmp    _T61f;
// LINE 1073:
	__asm        jmp    _T4f9;
// LINE 1074:
_T4ef:
	__asm        mov    eax, 3;
	__asm        jmp    _T61f;
// LINE 1077:
_T4f9:
	__asm        cmp    currentDir, 0;
	__asm        je     _T60d;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        mov    ecx, 0x7F;
	__asm        sub    ecx, Offset;
	__asm        cmp    eax, ecx;
	__asm        jg     _T60d;
// LINE 1078:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     _T556;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        add    eax, stepSize;
	__asm        js     _T556;

	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T556;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        add    eax, stepSize;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T561;
_T556:
	__asm        mov    word ptr [ebp-0x20], 0;
	__asm        jmp    _T5a7;
_T561:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        add    ecx, stepSize;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        add    edx, stepSize;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x20], ax;
	__asm        jmp    _T5a7;
_T5a7:
	__asm        push   4;
	__asm        mov    eax, currentDir;
	__asm        mov    eax, IndexToType[0][eax*4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(LocalTile);
	__asm        push   eax;
	__asm        call   DoRoadTilesConnect;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     _T60d;
// LINE 1080:
	pNextDir-> = 0x2;
// LINE 1081:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        add    eax, stepSize;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T603;
// LINE 1082:
	__asm        mov    eax, 0xFFFFFFFE;
	__asm        jmp    _T61f;
// LINE 1083:
	__asm        jmp    _T60d;
// LINE 1084:
_T603:
	__asm        mov    eax, 2;
	__asm        jmp    _T61f;
// LINE 1088:
_T60d:
	pNextDir-> = currentDir;
// LINE 1089:
	__asm        mov    eax, 0xFFFFFFFF;
	__asm        jmp    _T61f;
// LINE 1090:
_T61f:
}

// FUNCTION: COPTER_D 0x0053eed6
void RoadGraph::ConnectHiwayRamp(int32_t x, int32_t y, unsigned short RampTile) {
	/*bp-0x4*/   unsigned char yindex;

// LINE 1099:
	__asm        mov    eax, reinterpret_cast<uint32_t>(RampTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T1544;
// LINE 1102:
_T1c:
	__asm        cmp    x, 1;
	__asm        jle    _T2b8;

	__asm        cmp    y, 0x7F;
	__asm        jge    _T2b8;
// LINE 1103:
	__asm        mov    eax, y;
	__asm        sub    eax, 2;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T2b8;

	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T2b8;
// LINE 1105:
	__asm        mov    eax, y;
	__asm        sub    eax, 2;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    yindex, al;
// LINE 1106:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x18], al;
// LINE 1107:
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x19], al;
// LINE 1108:
	__asm        mov    dword ptr [ebp-0x30], 0x5D;
	__asm        jmp    _T15e;
_Td5:
	__asm        mov    dword ptr [ebp-8], 8;
	__asm        jmp    _T297;
_Te1:
	__asm        mov    dword ptr [ebp-8], 0xA;
	__asm        jmp    _T297;
_Ted:
	__asm        mov    dword ptr [ebp-8], 8;
	__asm        jmp    _T297;
_Tf9:
	__asm        mov    dword ptr [ebp-8], 4;
	__asm        jmp    _T297;
_T105:
	__asm        mov    dword ptr [ebp-8], 8;
	__asm        jmp    _T297;
_T111:
	__asm        mov    dword ptr [ebp-8], 8;
	__asm        jmp    _T297;
_T11d:
	__asm        mov    dword ptr [ebp-8], 0xA;
	__asm        jmp    _T297;
_T129:
	__asm        mov    dword ptr [ebp-8], 8;
	__asm        jmp    _T297;
_T135:
	__asm        mov    dword ptr [ebp-8], 0xA;
	__asm        jmp    _T297;
_T141:
	__asm        mov    dword ptr [ebp-8], 4;
	__asm        jmp    _T297;
_T14d:
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        jmp    _T297;

	__asm        jmp    _T297;
_T15e:
	__asm        cmp    dword ptr [ebp-0x30], 0x2B;
	__asm        jg     _T18b;

	__asm        cmp    dword ptr [ebp-0x30], 0x27;
	__asm        jge    _Te1;

	__asm        cmp    dword ptr [ebp-0x30], 0x1D;
	__asm        jl     _T14d;

	__asm        cmp    dword ptr [ebp-0x30], 0x26;
	__asm        jle    _Td5;

	__asm        jmp    _T14d;
_T18b:
	__asm        cmp    dword ptr [ebp-0x30], 0x50;
	__asm        jg     _T1b8;

	__asm        cmp    dword ptr [ebp-0x30], 0x49;
	__asm        jge    _Tf9;

	__asm        cmp    dword ptr [ebp-0x30], 0x3F;
	__asm        jl     _T14d;

	__asm        cmp    dword ptr [ebp-0x30], 0x46;
	__asm        jle    _Ted;

	__asm        jmp    _T14d;
_T1b8:
	__asm        cmp    dword ptr [ebp-0x30], 0x59;
	__asm        jg     _T1e5;

	__asm        cmp    dword ptr [ebp-0x30], 0x57;
	__asm        jge    _T111;

	__asm        cmp    dword ptr [ebp-0x30], 0x51;
	__asm        jl     _T14d;

	__asm        cmp    dword ptr [ebp-0x30], 0x56;
	__asm        jle    _T105;

	__asm        jmp    _T14d;
_T1e5:
	__asm        cmp    dword ptr [ebp-0x30], 0x68;
	__asm        jg     _T212;

	__asm        cmp    dword ptr [ebp-0x30], 0x61;
	__asm        jge    _T129;

	__asm        cmp    dword ptr [ebp-0x30], 0x5D;
	__asm        jl     _T14d;

	__asm        cmp    dword ptr [ebp-0x30], 0x60;
	__asm        jle    _T11d;

	__asm        jmp    _T14d;
_T212:
	__asm        cmp    dword ptr [ebp-0x30], 0x8056;
	__asm        jg     _T24f;

	__asm        cmp    dword ptr [ebp-0x30], 0x8051;
	__asm        jge    _T105;

	__asm        cmp    dword ptr [ebp-0x30], 0x69;
	__asm        je     _T135;

	__asm        cmp    dword ptr [ebp-0x30], 0x6A;
	__asm        jl     _T14d;

	__asm        cmp    dword ptr [ebp-0x30], 0x6B;
	__asm        jle    _T141;

	__asm        jmp    _T14d;
_T24f:
	__asm        sub    dword ptr [ebp-0x30], 0x8057;
	__asm        cmp    dword ptr [ebp-0x30], 0x14;
	__asm        ja     _T14d;

	__asm        mov    eax, [ebp-0x30];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, _SwitchTable_282[0][eax];
	__asm        jmp    _Switch_272[0][ecx*4];
// Switch pointers:
//   _T111
//   _T11d
//   _T141
//   _T14d
// Switch table
_T297:
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x1A], ax;
// LINE 1110:
_T2b8:
	__asm        jmp    _T15ab;
// LINE 1113:
_T2bd:
	__asm        cmp    x, 1;
	__asm        jle    _T55b;

	__asm        cmp    y, 0x7F;
	__asm        jge    _T55b;
// LINE 1114:
	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T55b;

	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        sub    eax, 2;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T55b;
// LINE 1116:
	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    yindex, al;
// LINE 1117:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        sub    eax, 2;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+4], al;
// LINE 1118:
	__asm        mov    eax, x;
	__asm        sub    eax, 2;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+5], al;
// LINE 1119:
	__asm        mov    dword ptr [ebp-0x34], 0x805D;
	__asm        jmp    _T401;
_T378:
	__asm        mov    dword ptr [ebp-0xC], 8;
	__asm        jmp    _T53a;
_T384:
	__asm        mov    dword ptr [ebp-0xC], 0xA;
	__asm        jmp    _T53a;
_T390:
	__asm        mov    dword ptr [ebp-0xC], 8;
	__asm        jmp    _T53a;
_T39c:
	__asm        mov    dword ptr [ebp-0xC], 4;
	__asm        jmp    _T53a;
_T3a8:
	__asm        mov    dword ptr [ebp-0xC], 8;
	__asm        jmp    _T53a;
_T3b4:
	__asm        mov    dword ptr [ebp-0xC], 8;
	__asm        jmp    _T53a;
_T3c0:
	__asm        mov    dword ptr [ebp-0xC], 0xA;
	__asm        jmp    _T53a;
_T3cc:
	__asm        mov    dword ptr [ebp-0xC], 8;
	__asm        jmp    _T53a;
_T3d8:
	__asm        mov    dword ptr [ebp-0xC], 0xA;
	__asm        jmp    _T53a;
_T3e4:
	__asm        mov    dword ptr [ebp-0xC], 4;
	__asm        jmp    _T53a;
_T3f0:
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        jmp    _T53a;

	__asm        jmp    _T53a;
_T401:
	__asm        cmp    dword ptr [ebp-0x34], 0x2B;
	__asm        jg     _T42e;

	__asm        cmp    dword ptr [ebp-0x34], 0x27;
	__asm        jge    _T384;

	__asm        cmp    dword ptr [ebp-0x34], 0x1D;
	__asm        jl     _T3f0;

	__asm        cmp    dword ptr [ebp-0x34], 0x26;
	__asm        jle    _T378;

	__asm        jmp    _T3f0;
_T42e:
	__asm        cmp    dword ptr [ebp-0x34], 0x50;
	__asm        jg     _T45b;

	__asm        cmp    dword ptr [ebp-0x34], 0x49;
	__asm        jge    _T39c;

	__asm        cmp    dword ptr [ebp-0x34], 0x3F;
	__asm        jl     _T3f0;

	__asm        cmp    dword ptr [ebp-0x34], 0x46;
	__asm        jle    _T390;

	__asm        jmp    _T3f0;
_T45b:
	__asm        cmp    dword ptr [ebp-0x34], 0x59;
	__asm        jg     _T488;

	__asm        cmp    dword ptr [ebp-0x34], 0x57;
	__asm        jge    _T3b4;

	__asm        cmp    dword ptr [ebp-0x34], 0x51;
	__asm        jl     _T3f0;

	__asm        cmp    dword ptr [ebp-0x34], 0x56;
	__asm        jle    _T3a8;

	__asm        jmp    _T3f0;
_T488:
	__asm        cmp    dword ptr [ebp-0x34], 0x68;
	__asm        jg     _T4b5;

	__asm        cmp    dword ptr [ebp-0x34], 0x61;
	__asm        jge    _T3cc;

	__asm        cmp    dword ptr [ebp-0x34], 0x5D;
	__asm        jl     _T3f0;

	__asm        cmp    dword ptr [ebp-0x34], 0x60;
	__asm        jle    _T3c0;

	__asm        jmp    _T3f0;
_T4b5:
	__asm        cmp    dword ptr [ebp-0x34], 0x8056;
	__asm        jg     _T4f2;

	__asm        cmp    dword ptr [ebp-0x34], 0x8051;
	__asm        jge    _T3a8;

	__asm        cmp    dword ptr [ebp-0x34], 0x69;
	__asm        je     _T3d8;

	__asm        cmp    dword ptr [ebp-0x34], 0x6A;
	__asm        jl     _T3f0;

	__asm        cmp    dword ptr [ebp-0x34], 0x6B;
	__asm        jle    _T3e4;

	__asm        jmp    _T3f0;
_T4f2:
	__asm        sub    dword ptr [ebp-0x34], 0x8057;
	__asm        cmp    dword ptr [ebp-0x34], 0x14;
	__asm        ja     _T3f0;

	__asm        mov    eax, [ebp-0x34];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, _SwitchTable_525[0][eax];
	__asm        jmp    _Switch_515[0][ecx*4];
// Switch pointers:
//   _T3b4
//   _T3c0
//   _T3e4
//   _T3f0
// Switch table
_T53a:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+6], ax;
// LINE 1121:
_T55b:
	__asm        jmp    _T15ab;
// LINE 1124:
_T560:
	__asm        cmp    x, 0;
	__asm        jle    _T7fe;

	__asm        cmp    y, 1;
	__asm        jle    _T7fe;
// LINE 1125:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T7fe;

	__asm        mov    eax, y;
	__asm        sub    eax, 2;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T7fe;
// LINE 1127:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    yindex, al;
// LINE 1128:
	__asm        mov    eax, y;
	__asm        sub    eax, 2;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4-4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0xE], al;
// LINE 1129:
	__asm        mov    al, reinterpret_cast<uint8_t>(x);
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4-4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0xF], al;
// LINE 1130:
	__asm        mov    dword ptr [ebp-0x38], 0x5E;
	__asm        jmp    _T6a3;
_T61a:
	__asm        mov    dword ptr [ebp-0x10], 8;
	__asm        jmp    _T7dc;
_T626:
	__asm        mov    dword ptr [ebp-0x10], 0xA;
	__asm        jmp    _T7dc;
_T632:
	__asm        mov    dword ptr [ebp-0x10], 8;
	__asm        jmp    _T7dc;
_T63e:
	__asm        mov    dword ptr [ebp-0x10], 4;
	__asm        jmp    _T7dc;
_T64a:
	__asm        mov    dword ptr [ebp-0x10], 8;
	__asm        jmp    _T7dc;
_T656:
	__asm        mov    dword ptr [ebp-0x10], 8;
	__asm        jmp    _T7dc;
_T662:
	__asm        mov    dword ptr [ebp-0x10], 0xA;
	__asm        jmp    _T7dc;
_T66e:
	__asm        mov    dword ptr [ebp-0x10], 8;
	__asm        jmp    _T7dc;
_T67a:
	__asm        mov    dword ptr [ebp-0x10], 0xA;
	__asm        jmp    _T7dc;
_T686:
	__asm        mov    dword ptr [ebp-0x10], 4;
	__asm        jmp    _T7dc;
_T692:
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        jmp    _T7dc;

	__asm        jmp    _T7dc;
_T6a3:
	__asm        cmp    dword ptr [ebp-0x38], 0x2B;
	__asm        jg     _T6d0;

	__asm        cmp    dword ptr [ebp-0x38], 0x27;
	__asm        jge    _T626;

	__asm        cmp    dword ptr [ebp-0x38], 0x1D;
	__asm        jl     _T692;

	__asm        cmp    dword ptr [ebp-0x38], 0x26;
	__asm        jle    _T61a;

	__asm        jmp    _T692;
_T6d0:
	__asm        cmp    dword ptr [ebp-0x38], 0x50;
	__asm        jg     _T6fd;

	__asm        cmp    dword ptr [ebp-0x38], 0x49;
	__asm        jge    _T63e;

	__asm        cmp    dword ptr [ebp-0x38], 0x3F;
	__asm        jl     _T692;

	__asm        cmp    dword ptr [ebp-0x38], 0x46;
	__asm        jle    _T632;

	__asm        jmp    _T692;
_T6fd:
	__asm        cmp    dword ptr [ebp-0x38], 0x59;
	__asm        jg     _T72a;

	__asm        cmp    dword ptr [ebp-0x38], 0x57;
	__asm        jge    _T656;

	__asm        cmp    dword ptr [ebp-0x38], 0x51;
	__asm        jl     _T692;

	__asm        cmp    dword ptr [ebp-0x38], 0x56;
	__asm        jle    _T64a;

	__asm        jmp    _T692;
_T72a:
	__asm        cmp    dword ptr [ebp-0x38], 0x68;
	__asm        jg     _T757;

	__asm        cmp    dword ptr [ebp-0x38], 0x61;
	__asm        jge    _T66e;

	__asm        cmp    dword ptr [ebp-0x38], 0x5D;
	__asm        jl     _T692;

	__asm        cmp    dword ptr [ebp-0x38], 0x60;
	__asm        jle    _T662;

	__asm        jmp    _T692;
_T757:
	__asm        cmp    dword ptr [ebp-0x38], 0x8056;
	__asm        jg     _T794;

	__asm        cmp    dword ptr [ebp-0x38], 0x8051;
	__asm        jge    _T64a;

	__asm        cmp    dword ptr [ebp-0x38], 0x69;
	__asm        je     _T67a;

	__asm        cmp    dword ptr [ebp-0x38], 0x6A;
	__asm        jl     _T692;

	__asm        cmp    dword ptr [ebp-0x38], 0x6B;
	__asm        jle    _T686;

	__asm        jmp    _T692;
_T794:
	__asm        sub    dword ptr [ebp-0x38], 0x8057;
	__asm        cmp    dword ptr [ebp-0x38], 0x14;
	__asm        ja     _T692;

	__asm        mov    eax, [ebp-0x38];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, _SwitchTable_7c7[0][eax];
	__asm        jmp    _Switch_7b7[0][ecx*4];
// Switch pointers:
//   _T656
//   _T662
//   _T686
//   _T692
// Switch table
_T7dc:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4-4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x10], ax;
// LINE 1132:
_T7fe:
	__asm        jmp    _T15ab;
// LINE 1135:
_T803:
	__asm        cmp    x, 1;
	__asm        jle    _Taa1;

	__asm        cmp    y, 0;
	__asm        jle    _Taa1;
// LINE 1136:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        sub    eax, 2;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _Taa1;

	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _Taa1;
// LINE 1138:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        sub    eax, 2;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    yindex, al;
// LINE 1139:
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4-8];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0xE], al;
// LINE 1140:
	__asm        mov    al, reinterpret_cast<uint8_t>(x);
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4-8];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0xF], al;
// LINE 1141:
	__asm        mov    dword ptr [ebp-0x3C], 0x805E;
	__asm        jmp    _T946;
_T8bd:
	__asm        mov    dword ptr [ebp-0x14], 8;
	__asm        jmp    _Ta7f;
_T8c9:
	__asm        mov    dword ptr [ebp-0x14], 0xA;
	__asm        jmp    _Ta7f;
_T8d5:
	__asm        mov    dword ptr [ebp-0x14], 8;
	__asm        jmp    _Ta7f;
_T8e1:
	__asm        mov    dword ptr [ebp-0x14], 4;
	__asm        jmp    _Ta7f;
_T8ed:
	__asm        mov    dword ptr [ebp-0x14], 8;
	__asm        jmp    _Ta7f;
_T8f9:
	__asm        mov    dword ptr [ebp-0x14], 8;
	__asm        jmp    _Ta7f;
_T905:
	__asm        mov    dword ptr [ebp-0x14], 0xA;
	__asm        jmp    _Ta7f;
_T911:
	__asm        mov    dword ptr [ebp-0x14], 8;
	__asm        jmp    _Ta7f;
_T91d:
	__asm        mov    dword ptr [ebp-0x14], 0xA;
	__asm        jmp    _Ta7f;
_T929:
	__asm        mov    dword ptr [ebp-0x14], 4;
	__asm        jmp    _Ta7f;
_T935:
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    _Ta7f;

	__asm        jmp    _Ta7f;
_T946:
	__asm        cmp    dword ptr [ebp-0x3C], 0x2B;
	__asm        jg     _T973;

	__asm        cmp    dword ptr [ebp-0x3C], 0x27;
	__asm        jge    _T8c9;

	__asm        cmp    dword ptr [ebp-0x3C], 0x1D;
	__asm        jl     _T935;

	__asm        cmp    dword ptr [ebp-0x3C], 0x26;
	__asm        jle    _T8bd;

	__asm        jmp    _T935;
_T973:
	__asm        cmp    dword ptr [ebp-0x3C], 0x50;
	__asm        jg     _T9a0;

	__asm        cmp    dword ptr [ebp-0x3C], 0x49;
	__asm        jge    _T8e1;

	__asm        cmp    dword ptr [ebp-0x3C], 0x3F;
	__asm        jl     _T935;

	__asm        cmp    dword ptr [ebp-0x3C], 0x46;
	__asm        jle    _T8d5;

	__asm        jmp    _T935;
_T9a0:
	__asm        cmp    dword ptr [ebp-0x3C], 0x59;
	__asm        jg     _T9cd;

	__asm        cmp    dword ptr [ebp-0x3C], 0x57;
	__asm        jge    _T8f9;

	__asm        cmp    dword ptr [ebp-0x3C], 0x51;
	__asm        jl     _T935;

	__asm        cmp    dword ptr [ebp-0x3C], 0x56;
	__asm        jle    _T8ed;

	__asm        jmp    _T935;
_T9cd:
	__asm        cmp    dword ptr [ebp-0x3C], 0x68;
	__asm        jg     _T9fa;

	__asm        cmp    dword ptr [ebp-0x3C], 0x61;
	__asm        jge    _T911;

	__asm        cmp    dword ptr [ebp-0x3C], 0x5D;
	__asm        jl     _T935;

	__asm        cmp    dword ptr [ebp-0x3C], 0x60;
	__asm        jle    _T905;

	__asm        jmp    _T935;
_T9fa:
	__asm        cmp    dword ptr [ebp-0x3C], 0x8056;
	__asm        jg     _Ta37;

	__asm        cmp    dword ptr [ebp-0x3C], 0x8051;
	__asm        jge    _T8ed;

	__asm        cmp    dword ptr [ebp-0x3C], 0x69;
	__asm        je     _T91d;

	__asm        cmp    dword ptr [ebp-0x3C], 0x6A;
	__asm        jl     _T935;

	__asm        cmp    dword ptr [ebp-0x3C], 0x6B;
	__asm        jle    _T929;

	__asm        jmp    _T935;
_Ta37:
	__asm        sub    dword ptr [ebp-0x3C], 0x8057;
	__asm        cmp    dword ptr [ebp-0x3C], 0x14;
	__asm        ja     _T935;

	__asm        mov    eax, [ebp-0x3C];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, _SwitchTable_a6a[0][eax];
	__asm        jmp    _Switch_a5a[0][ecx*4];
// Switch pointers:
//   _T8f9
//   _T905
//   _T929
//   _T935
// Switch table
_Ta7f:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4-8];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x10], ax;
// LINE 1143:
_Taa1:
	__asm        jmp    _T15ab;
// LINE 1146:
_Taa6:
	__asm        cmp    x, 0;
	__asm        jle    _Td3e;

	__asm        cmp    y, 0x7F;
	__asm        jge    _Td3e;
// LINE 1147:
	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _Td3e;

	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _Td3e;
// LINE 1149:
	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    yindex, al;
// LINE 1150:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+4], al;
// LINE 1151:
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+5], al;
// LINE 1152:
	__asm        mov    dword ptr [ebp-0x40], 0x5F;
	__asm        jmp    _Tbe4;
_Tb5b:
	__asm        mov    dword ptr [ebp-0x18], 8;
	__asm        jmp    _Td1d;
_Tb67:
	__asm        mov    dword ptr [ebp-0x18], 0xA;
	__asm        jmp    _Td1d;
_Tb73:
	__asm        mov    dword ptr [ebp-0x18], 8;
	__asm        jmp    _Td1d;
_Tb7f:
	__asm        mov    dword ptr [ebp-0x18], 4;
	__asm        jmp    _Td1d;
_Tb8b:
	__asm        mov    dword ptr [ebp-0x18], 8;
	__asm        jmp    _Td1d;
_Tb97:
	__asm        mov    dword ptr [ebp-0x18], 8;
	__asm        jmp    _Td1d;
_Tba3:
	__asm        mov    dword ptr [ebp-0x18], 0xA;
	__asm        jmp    _Td1d;
_Tbaf:
	__asm        mov    dword ptr [ebp-0x18], 8;
	__asm        jmp    _Td1d;
_Tbbb:
	__asm        mov    dword ptr [ebp-0x18], 0xA;
	__asm        jmp    _Td1d;
_Tbc7:
	__asm        mov    dword ptr [ebp-0x18], 4;
	__asm        jmp    _Td1d;
_Tbd3:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _Td1d;

	__asm        jmp    _Td1d;
_Tbe4:
	__asm        cmp    dword ptr [ebp-0x40], 0x2B;
	__asm        jg     _Tc11;

	__asm        cmp    dword ptr [ebp-0x40], 0x27;
	__asm        jge    _Tb67;

	__asm        cmp    dword ptr [ebp-0x40], 0x1D;
	__asm        jl     _Tbd3;

	__asm        cmp    dword ptr [ebp-0x40], 0x26;
	__asm        jle    _Tb5b;

	__asm        jmp    _Tbd3;
_Tc11:
	__asm        cmp    dword ptr [ebp-0x40], 0x50;
	__asm        jg     _Tc3e;

	__asm        cmp    dword ptr [ebp-0x40], 0x49;
	__asm        jge    _Tb7f;

	__asm        cmp    dword ptr [ebp-0x40], 0x3F;
	__asm        jl     _Tbd3;

	__asm        cmp    dword ptr [ebp-0x40], 0x46;
	__asm        jle    _Tb73;

	__asm        jmp    _Tbd3;
_Tc3e:
	__asm        cmp    dword ptr [ebp-0x40], 0x59;
	__asm        jg     _Tc6b;

	__asm        cmp    dword ptr [ebp-0x40], 0x57;
	__asm        jge    _Tb97;

	__asm        cmp    dword ptr [ebp-0x40], 0x51;
	__asm        jl     _Tbd3;

	__asm        cmp    dword ptr [ebp-0x40], 0x56;
	__asm        jle    _Tb8b;

	__asm        jmp    _Tbd3;
_Tc6b:
	__asm        cmp    dword ptr [ebp-0x40], 0x68;
	__asm        jg     _Tc98;

	__asm        cmp    dword ptr [ebp-0x40], 0x61;
	__asm        jge    _Tbaf;

	__asm        cmp    dword ptr [ebp-0x40], 0x5D;
	__asm        jl     _Tbd3;

	__asm        cmp    dword ptr [ebp-0x40], 0x60;
	__asm        jle    _Tba3;

	__asm        jmp    _Tbd3;
_Tc98:
	__asm        cmp    dword ptr [ebp-0x40], 0x8056;
	__asm        jg     _Tcd5;

	__asm        cmp    dword ptr [ebp-0x40], 0x8051;
	__asm        jge    _Tb8b;

	__asm        cmp    dword ptr [ebp-0x40], 0x69;
	__asm        je     _Tbbb;

	__asm        cmp    dword ptr [ebp-0x40], 0x6A;
	__asm        jl     _Tbd3;

	__asm        cmp    dword ptr [ebp-0x40], 0x6B;
	__asm        jle    _Tbc7;

	__asm        jmp    _Tbd3;
_Tcd5:
	__asm        sub    dword ptr [ebp-0x40], 0x8057;
	__asm        cmp    dword ptr [ebp-0x40], 0x14;
	__asm        ja     _Tbd3;

	__asm        mov    eax, [ebp-0x40];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, _SwitchTable_d08[0][eax];
	__asm        jmp    _Switch_cf8[0][ecx*4];
// Switch pointers:
//   _Tb97
//   _Tba3
//   _Tbc7
//   _Tbd3
// Switch table
_Td1d:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+6], ax;
// LINE 1154:
_Td3e:
	__asm        jmp    _T15ab;
// LINE 1157:
_Td43:
	__asm        cmp    x, 0;
	__asm        jle    _Tfdb;

	__asm        cmp    y, 0x7F;
	__asm        jge    _Tfdb;
// LINE 1158:
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _Tfdb;

	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _Tfdb;
// LINE 1160:
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    yindex, al;
// LINE 1161:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x18], al;
// LINE 1162:
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x19], al;
// LINE 1163:
	__asm        mov    dword ptr [ebp-0x44], 0x805F;
	__asm        jmp    _Te81;
_Tdf8:
	__asm        mov    dword ptr [ebp-0x1C], 8;
	__asm        jmp    _Tfba;
_Te04:
	__asm        mov    dword ptr [ebp-0x1C], 0xA;
	__asm        jmp    _Tfba;
_Te10:
	__asm        mov    dword ptr [ebp-0x1C], 8;
	__asm        jmp    _Tfba;
_Te1c:
	__asm        mov    dword ptr [ebp-0x1C], 4;
	__asm        jmp    _Tfba;
_Te28:
	__asm        mov    dword ptr [ebp-0x1C], 8;
	__asm        jmp    _Tfba;
_Te34:
	__asm        mov    dword ptr [ebp-0x1C], 8;
	__asm        jmp    _Tfba;
_Te40:
	__asm        mov    dword ptr [ebp-0x1C], 0xA;
	__asm        jmp    _Tfba;
_Te4c:
	__asm        mov    dword ptr [ebp-0x1C], 8;
	__asm        jmp    _Tfba;
_Te58:
	__asm        mov    dword ptr [ebp-0x1C], 0xA;
	__asm        jmp    _Tfba;
_Te64:
	__asm        mov    dword ptr [ebp-0x1C], 4;
	__asm        jmp    _Tfba;
_Te70:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    _Tfba;

	__asm        jmp    _Tfba;
_Te81:
	__asm        cmp    dword ptr [ebp-0x44], 0x2B;
	__asm        jg     _Teae;

	__asm        cmp    dword ptr [ebp-0x44], 0x27;
	__asm        jge    _Te04;

	__asm        cmp    dword ptr [ebp-0x44], 0x1D;
	__asm        jl     _Te70;

	__asm        cmp    dword ptr [ebp-0x44], 0x26;
	__asm        jle    _Tdf8;

	__asm        jmp    _Te70;
_Teae:
	__asm        cmp    dword ptr [ebp-0x44], 0x50;
	__asm        jg     _Tedb;

	__asm        cmp    dword ptr [ebp-0x44], 0x49;
	__asm        jge    _Te1c;

	__asm        cmp    dword ptr [ebp-0x44], 0x3F;
	__asm        jl     _Te70;

	__asm        cmp    dword ptr [ebp-0x44], 0x46;
	__asm        jle    _Te10;

	__asm        jmp    _Te70;
_Tedb:
	__asm        cmp    dword ptr [ebp-0x44], 0x59;
	__asm        jg     _Tf08;

	__asm        cmp    dword ptr [ebp-0x44], 0x57;
	__asm        jge    _Te34;

	__asm        cmp    dword ptr [ebp-0x44], 0x51;
	__asm        jl     _Te70;

	__asm        cmp    dword ptr [ebp-0x44], 0x56;
	__asm        jle    _Te28;

	__asm        jmp    _Te70;
_Tf08:
	__asm        cmp    dword ptr [ebp-0x44], 0x68;
	__asm        jg     _Tf35;

	__asm        cmp    dword ptr [ebp-0x44], 0x61;
	__asm        jge    _Te4c;

	__asm        cmp    dword ptr [ebp-0x44], 0x5D;
	__asm        jl     _Te70;

	__asm        cmp    dword ptr [ebp-0x44], 0x60;
	__asm        jle    _Te40;

	__asm        jmp    _Te70;
_Tf35:
	__asm        cmp    dword ptr [ebp-0x44], 0x8056;
	__asm        jg     _Tf72;

	__asm        cmp    dword ptr [ebp-0x44], 0x8051;
	__asm        jge    _Te28;

	__asm        cmp    dword ptr [ebp-0x44], 0x69;
	__asm        je     _Te58;

	__asm        cmp    dword ptr [ebp-0x44], 0x6A;
	__asm        jl     _Te70;

	__asm        cmp    dword ptr [ebp-0x44], 0x6B;
	__asm        jle    _Te64;

	__asm        jmp    _Te70;
_Tf72:
	__asm        sub    dword ptr [ebp-0x44], 0x8057;
	__asm        cmp    dword ptr [ebp-0x44], 0x14;
	__asm        ja     _Te70;

	__asm        mov    eax, [ebp-0x44];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, _SwitchTable_fa5[0][eax];
	__asm        jmp    _Switch_f95[0][ecx*4];
// Switch pointers:
//   _Te34
//   _Te40
//   _Te64
//   _Te70
// Switch table
_Tfba:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x1A], ax;
// LINE 1165:
_Tfdb:
	__asm        jmp    _T15ab;
// LINE 1168:
_Tfe0:
	__asm        cmp    x, 0x7F;
	__asm        jge    _T127a;

	__asm        cmp    y, 0x7F;
	__asm        jge    _T127a;
// LINE 1169:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T127a;

	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T127a;
// LINE 1171:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    yindex, al;
// LINE 1172:
	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4+4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x22], al;
// LINE 1173:
	__asm        mov    al, reinterpret_cast<uint8_t>(x);
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4+4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x23], al;
// LINE 1174:
	__asm        mov    dword ptr [ebp-0x48], 0x60;
	__asm        jmp    _T111f;
_T1096:
	__asm        mov    dword ptr [ebp-0x20], 8;
	__asm        jmp    _T1258;
_T10a2:
	__asm        mov    dword ptr [ebp-0x20], 0xA;
	__asm        jmp    _T1258;
_T10ae:
	__asm        mov    dword ptr [ebp-0x20], 8;
	__asm        jmp    _T1258;
_T10ba:
	__asm        mov    dword ptr [ebp-0x20], 4;
	__asm        jmp    _T1258;
_T10c6:
	__asm        mov    dword ptr [ebp-0x20], 8;
	__asm        jmp    _T1258;
_T10d2:
	__asm        mov    dword ptr [ebp-0x20], 8;
	__asm        jmp    _T1258;
_T10de:
	__asm        mov    dword ptr [ebp-0x20], 0xA;
	__asm        jmp    _T1258;
_T10ea:
	__asm        mov    dword ptr [ebp-0x20], 8;
	__asm        jmp    _T1258;
_T10f6:
	__asm        mov    dword ptr [ebp-0x20], 0xA;
	__asm        jmp    _T1258;
_T1102:
	__asm        mov    dword ptr [ebp-0x20], 4;
	__asm        jmp    _T1258;
_T110e:
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    _T1258;

	__asm        jmp    _T1258;
_T111f:
	__asm        cmp    dword ptr [ebp-0x48], 0x2B;
	__asm        jg     _T114c;

	__asm        cmp    dword ptr [ebp-0x48], 0x27;
	__asm        jge    _T10a2;

	__asm        cmp    dword ptr [ebp-0x48], 0x1D;
	__asm        jl     _T110e;

	__asm        cmp    dword ptr [ebp-0x48], 0x26;
	__asm        jle    _T1096;

	__asm        jmp    _T110e;
_T114c:
	__asm        cmp    dword ptr [ebp-0x48], 0x50;
	__asm        jg     _T1179;

	__asm        cmp    dword ptr [ebp-0x48], 0x49;
	__asm        jge    _T10ba;

	__asm        cmp    dword ptr [ebp-0x48], 0x3F;
	__asm        jl     _T110e;

	__asm        cmp    dword ptr [ebp-0x48], 0x46;
	__asm        jle    _T10ae;

	__asm        jmp    _T110e;
_T1179:
	__asm        cmp    dword ptr [ebp-0x48], 0x59;
	__asm        jg     _T11a6;

	__asm        cmp    dword ptr [ebp-0x48], 0x57;
	__asm        jge    _T10d2;

	__asm        cmp    dword ptr [ebp-0x48], 0x51;
	__asm        jl     _T110e;

	__asm        cmp    dword ptr [ebp-0x48], 0x56;
	__asm        jle    _T10c6;

	__asm        jmp    _T110e;
_T11a6:
	__asm        cmp    dword ptr [ebp-0x48], 0x68;
	__asm        jg     _T11d3;

	__asm        cmp    dword ptr [ebp-0x48], 0x61;
	__asm        jge    _T10ea;

	__asm        cmp    dword ptr [ebp-0x48], 0x5D;
	__asm        jl     _T110e;

	__asm        cmp    dword ptr [ebp-0x48], 0x60;
	__asm        jle    _T10de;

	__asm        jmp    _T110e;
_T11d3:
	__asm        cmp    dword ptr [ebp-0x48], 0x8056;
	__asm        jg     _T1210;

	__asm        cmp    dword ptr [ebp-0x48], 0x8051;
	__asm        jge    _T10c6;

	__asm        cmp    dword ptr [ebp-0x48], 0x69;
	__asm        je     _T10f6;

	__asm        cmp    dword ptr [ebp-0x48], 0x6A;
	__asm        jl     _T110e;

	__asm        cmp    dword ptr [ebp-0x48], 0x6B;
	__asm        jle    _T1102;

	__asm        jmp    _T110e;
_T1210:
	__asm        sub    dword ptr [ebp-0x48], 0x8057;
	__asm        cmp    dword ptr [ebp-0x48], 0x14;
	__asm        ja     _T110e;

	__asm        mov    eax, [ebp-0x48];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, _SwitchTable_1243[0][eax];
	__asm        jmp    _Switch_1233[0][ecx*4];
// Switch pointers:
//   _T10d2
//   _T10de
//   _T1102
//   _T110e
// Switch table
_T1258:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4+4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x24], ax;
// LINE 1176:
_T127a:
	__asm        jmp    _T15ab;
// LINE 1179:
_T127f:
	__asm        cmp    x, 0x7F;
	__asm        jge    _T1519;

	__asm        cmp    y, 0x7F;
	__asm        jge    _T1519;
// LINE 1180:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T1519;

	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T1519;
// LINE 1182:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    yindex, al;
// LINE 1183:
	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4+4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x22], al;
// LINE 1184:
	__asm        mov    al, reinterpret_cast<uint8_t>(x);
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4+4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x23], al;
// LINE 1185:
	__asm        mov    dword ptr [ebp-0x4C], 0x8060;
	__asm        jmp    _T13be;
_T1335:
	__asm        mov    dword ptr [ebp-0x24], 8;
	__asm        jmp    _T14f7;
_T1341:
	__asm        mov    dword ptr [ebp-0x24], 0xA;
	__asm        jmp    _T14f7;
_T134d:
	__asm        mov    dword ptr [ebp-0x24], 8;
	__asm        jmp    _T14f7;
_T1359:
	__asm        mov    dword ptr [ebp-0x24], 4;
	__asm        jmp    _T14f7;
_T1365:
	__asm        mov    dword ptr [ebp-0x24], 8;
	__asm        jmp    _T14f7;
_T1371:
	__asm        mov    dword ptr [ebp-0x24], 8;
	__asm        jmp    _T14f7;
_T137d:
	__asm        mov    dword ptr [ebp-0x24], 0xA;
	__asm        jmp    _T14f7;
_T1389:
	__asm        mov    dword ptr [ebp-0x24], 8;
	__asm        jmp    _T14f7;
_T1395:
	__asm        mov    dword ptr [ebp-0x24], 0xA;
	__asm        jmp    _T14f7;
_T13a1:
	__asm        mov    dword ptr [ebp-0x24], 4;
	__asm        jmp    _T14f7;
_T13ad:
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    _T14f7;

	__asm        jmp    _T14f7;
_T13be:
	__asm        cmp    dword ptr [ebp-0x4C], 0x2B;
	__asm        jg     _T13eb;

	__asm        cmp    dword ptr [ebp-0x4C], 0x27;
	__asm        jge    _T1341;

	__asm        cmp    dword ptr [ebp-0x4C], 0x1D;
	__asm        jl     _T13ad;

	__asm        cmp    dword ptr [ebp-0x4C], 0x26;
	__asm        jle    _T1335;

	__asm        jmp    _T13ad;
_T13eb:
	__asm        cmp    dword ptr [ebp-0x4C], 0x50;
	__asm        jg     _T1418;

	__asm        cmp    dword ptr [ebp-0x4C], 0x49;
	__asm        jge    _T1359;

	__asm        cmp    dword ptr [ebp-0x4C], 0x3F;
	__asm        jl     _T13ad;

	__asm        cmp    dword ptr [ebp-0x4C], 0x46;
	__asm        jle    _T134d;

	__asm        jmp    _T13ad;
_T1418:
	__asm        cmp    dword ptr [ebp-0x4C], 0x59;
	__asm        jg     _T1445;

	__asm        cmp    dword ptr [ebp-0x4C], 0x57;
	__asm        jge    _T1371;

	__asm        cmp    dword ptr [ebp-0x4C], 0x51;
	__asm        jl     _T13ad;

	__asm        cmp    dword ptr [ebp-0x4C], 0x56;
	__asm        jle    _T1365;

	__asm        jmp    _T13ad;
_T1445:
	__asm        cmp    dword ptr [ebp-0x4C], 0x68;
	__asm        jg     _T1472;

	__asm        cmp    dword ptr [ebp-0x4C], 0x61;
	__asm        jge    _T1389;

	__asm        cmp    dword ptr [ebp-0x4C], 0x5D;
	__asm        jl     _T13ad;

	__asm        cmp    dword ptr [ebp-0x4C], 0x60;
	__asm        jle    _T137d;

	__asm        jmp    _T13ad;
_T1472:
	__asm        cmp    dword ptr [ebp-0x4C], 0x8056;
	__asm        jg     _T14af;

	__asm        cmp    dword ptr [ebp-0x4C], 0x8051;
	__asm        jge    _T1365;

	__asm        cmp    dword ptr [ebp-0x4C], 0x69;
	__asm        je     _T1395;

	__asm        cmp    dword ptr [ebp-0x4C], 0x6A;
	__asm        jl     _T13ad;

	__asm        cmp    dword ptr [ebp-0x4C], 0x6B;
	__asm        jle    _T13a1;

	__asm        jmp    _T13ad;
_T14af:
	__asm        sub    dword ptr [ebp-0x4C], 0x8057;
	__asm        cmp    dword ptr [ebp-0x4C], 0x14;
	__asm        ja     _T13ad;

	__asm        mov    eax, [ebp-0x4C];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, _SwitchTable_14e2[0][eax];
	__asm        jmp    _Switch_14d2[0][ecx*4];
// Switch pointers:
//   _T1371
//   _T137d
//   _T13a1
//   _T13ad
// Switch table
_T14f7:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, x;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*4+4];
	__asm        xor    edx, edx;
	__asm        mov    dl, yindex;
	__asm        mov    ebx, edx;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    edx, [ebx+edx*2];
	__asm        mov    [ecx+edx+0x24], ax;
// LINE 1187:
_T1519:
	__asm        jmp    _T15ab;
// LINE 1190:
_T151e:
	__asm        push   0x4A6;
	__asm        push   0x5B8210;
	__asm        push   0x5B8234;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T153f;

	__asm        jmp    _T153f;
// LINE 1191:
_T153f:
	__asm        jmp    _T15ab;
_T1544:
	__asm        cmp    dword ptr [ebp-0x2C], 0x805D;
	__asm        jg     _T157f;

	__asm        je     _T2bd;

	__asm        sub    dword ptr [ebp-0x2C], 0x5D;
	__asm        cmp    dword ptr [ebp-0x2C], 3;
	__asm        ja     _T151e;

	__asm        mov    eax, [ebp-0x2C];
	__asm        jmp    _Switch_156f[0][eax*4];
// Switch pointers:
//   _T1c
//   _T560
//   _Taa6
//   _Tfe0
_T157f:
	__asm        cmp    dword ptr [ebp-0x2C], 0x805E;
	__asm        je     _T803;

	__asm        cmp    dword ptr [ebp-0x2C], 0x805F;
	__asm        je     _Td43;

	__asm        cmp    dword ptr [ebp-0x2C], 0x8060;
	__asm        je     _T127f;

	__asm        jmp    _T151e;
// LINE 1192:
_T15ab:
	__asm        jmp    _T15b0;
_T15b0:
}

// FUNCTION: COPTER_D 0x0054048d
void RoadGraph::FindRoads(int32_t x, int32_t y, /*packed*/ struct RGVertex *pRGV) {
	/*bp-0x4*/   unsigned short fromTile;
	/*bp-0x8*/   int32_t Offset;
	/*bp-0xc*/   int32_t stepSize;

// LINE 1198:
	__asm        cmp    x, 0;
	__asm        jl     _T3a;

	__asm        cmp    y, 0;
	__asm        jl     _T3a;

	__asm        cmp    x, 0x80;
	__asm        jge    _T3a;

	__asm        cmp    y, 0x80;
	__asm        jl     _T45;
_T3a:
	__asm        mov    fromTile, 0;
	__asm        jmp    _T7d;
_T45:
	__asm        mov    eax, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    fromTile, ax;
	__asm        jmp    _T7d;
// LINE 1202:
_T7d:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x69;
	__asm        jne    _Ta1;
// LINE 1204:
	stepSize = 0x2;
// LINE 1205:
	Offset = 0x1;
// LINE 1207:
	__asm        jmp    _Taf;
// LINE 1209:
_Ta1:
	stepSize = 0x1;
// LINE 1210:
	Offset = 0x0;
// LINE 1213:
_Taf:
	__asm        mov    eax, Offset;
	__asm        cmp    y, eax;
	__asm        jle    _Te7;
// LINE 1215:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        test   cl, 1;
	__asm        je     _Te7;
// LINE 1216:
	__asm        push   0;
	__asm        mov    eax, y;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    eax, pRGV;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::MakeRoad;
// LINE 1219:
_Te7:
	__asm        mov    eax, 0x7F;
	__asm        sub    eax, Offset;
	__asm        cmp    eax, x;
	__asm        jle    _T126;
// LINE 1221:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        test   cl, 2;
	__asm        je     _T126;
// LINE 1222:
	__asm        push   1;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        add    eax, stepSize;
	__asm        push   eax;
	__asm        mov    eax, pRGV;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::MakeRoad;
// LINE 1225:
_T126:
	__asm        mov    eax, 0x7F;
	__asm        sub    eax, Offset;
	__asm        cmp    eax, y;
	__asm        jle    _T165;
// LINE 1227:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        test   cl, 4;
	__asm        je     _T165;
// LINE 1228:
	__asm        push   2;
	__asm        mov    eax, y;
	__asm        add    eax, stepSize;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    eax, pRGV;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::MakeRoad;
// LINE 1231:
_T165:
	__asm        mov    eax, Offset;
	__asm        cmp    x, eax;
	__asm        jle    _T19d;
// LINE 1233:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        test   cl, 8;
	__asm        je     _T19d;
// LINE 1234:
	__asm        push   3;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, pRGV;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::MakeRoad;
// LINE 1236:
_T19d:
	__asm        jmp    _T1a2;
_T1a2:
}

// FUNCTION: COPTER_D 0x00540636
void RoadGraph::MakeRoad(/*packed*/ struct RGVertex *pRGV, unsigned char x, unsigned char y, enum DirIndex2 currentDir) {
	/*bp-0x4*/   int32_t deadEnd;
	/*bp-0x8*/   /*packed*/ struct Road *pRoad;
	/*bp-0xc*/   short lastAlt;
	/*bp-0x10*/  int32_t fStart;
	/*bp-0x14*/  /*packed*/ struct _GridCoordinates startLoc;
	/*bp-0x18*/  int32_t decrementFlag;
	/*bp-0x1c*/  enum DirIndex2 returnDir;
	/*bp-0x20*/  /*packed*/ struct Edge *pEdge;
	/*bp-0x24*/  int32_t element;
	/*bp-0x28*/  enum DirIndex2 returnStatus;
	/*bp-0x2c*/  int32_t repeatCount;

// LINE 1259:
	element = 0x0;
// LINE 1260:
	repeatCount = 0x0;
// LINE 1261:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, currentDir;
	__asm        and    ecx, IndexToType[0][eax*4];
	__asm        mov    deadEnd, ecx;
// LINE 1262:
	decrementFlag = 0x0;
// LINE 1266:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        push   eax;
	__asm        call   IsThisAnIntersection;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T5e;

	__asm        jmp    _Taf3;
// LINE 1270:
_T5e:
	startLoc.x = x;
// LINE 1271:
	startLoc.y = y;
// LINE 1275:
	__asm        mov    eax, currentDir;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, eax;
	__asm        add    eax, pRGV;
	__asm        add    eax, 4;
	__asm        mov    pEdge, eax;
// LINE 1276:
	__asm        mov    eax, pEdge;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+4];
	__asm        lea    eax, [ecx*2];
	__asm        push   eax;
	__asm        mov    eax, G_citymempool;
	__asm        push   eax;
	__asm        call   S2Alloc;
	__asm        add    esp, 8;
	__asm        mov    ecx, pEdge;
	__asm        mov    [ecx+6], eax;
// LINE 1281:
	pRoad = pEdge->roadArray;
// LINE 1282:
	__asm        cmp    deadEnd, 0;
	__asm        je     _T34d;

	__asm        mov    eax, pEdge;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+4];
	__asm        cmp    ecx, 1;
	__asm        jne    _T34d;
// LINE 1284:
	__asm        mov    eax, pRoad;
	__asm        mov    byte ptr [eax+1], 0;
// LINE 1285:
	__asm        mov    eax, currentDir;
	__asm        sub    eax, 2;
	__asm        and    al, 3;
	__asm        mov    ecx, pRoad;
	__asm        mov    cl, [ecx];
	__asm        and    cl, 0xFC;
	__asm        or     al, cl;
	__asm        mov    ecx, pRoad;
	__asm        mov    [ecx], al;
// LINE 1288:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     _T11d;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     _T11d;

	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T11d;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T128;
_T11d:
	__asm        mov    word ptr [ebp-0x50], 0;
	__asm        jmp    _T168;
_T128:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x50], ax;
	__asm        jmp    _T168;
_T168:
	__asm        mov    eax, [ebp-0x50];
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _T195;
_T178:
	__asm        mov    dword ptr [ebp-0x30], 1;
	__asm        jmp    _T1e1;
_T184:
	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        jmp    _T1e1;

	__asm        jmp    _T1e1;
_T195:
	__asm        cmp    dword ptr [ebp-0x58], 0x6B;
	__asm        jg     _T1c2;

	__asm        cmp    dword ptr [ebp-0x58], 0x61;
	__asm        jge    _T178;

	__asm        cmp    dword ptr [ebp-0x58], 0x49;
	__asm        jl     _T184;

	__asm        cmp    dword ptr [ebp-0x58], 0x50;
	__asm        jle    _T178;

	__asm        jmp    _T184;
_T1c2:
	__asm        cmp    dword ptr [ebp-0x58], 0x806A;
	__asm        jl     _T184;

	__asm        cmp    dword ptr [ebp-0x58], 0x806B;
	__asm        jle    _T178;

	__asm        jmp    _T184;
_T1e1:
	__asm        mov    eax, [ebp-0x30];
	__asm        and    al, 1;
	__asm        shl    al, 4;
	__asm        mov    ecx, pRoad;
	__asm        mov    cl, [ecx];
	__asm        and    cl, 0xEF;
	__asm        or     al, cl;
	__asm        mov    ecx, pRoad;
	__asm        mov    [ecx], al;
// LINE 1289:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     _T232;

	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T232;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     _T232;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T23e;
_T232:
	__asm        mov    dword ptr [ebp-0x34], 1;
	__asm        jmp    _T331;
_T23e:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, BuildMap[eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        mov    [ebp-0x5C], edx;
	__asm        jmp    _T309;
_T25c:
	__asm        cmp    currentDir, 3;
	__asm        jne    _T272;

	__asm        mov    dword ptr [ebp-0x34], 2;
	__asm        jmp    _T279;
_T272:
	__asm        mov    dword ptr [ebp-0x34], 0;
_T279:
	__asm        jmp    _T331;

	__asm        jmp    _T331;
_T283:
	__asm        cmp    currentDir, 0;
	__asm        jne    _T299;

	__asm        mov    dword ptr [ebp-0x34], 2;
	__asm        jmp    _T2a0;
_T299:
	__asm        mov    dword ptr [ebp-0x34], 0;
_T2a0:
	__asm        jmp    _T331;

	__asm        jmp    _T331;
_T2aa:
	__asm        cmp    currentDir, 1;
	__asm        jne    _T2c0;

	__asm        mov    dword ptr [ebp-0x34], 2;
	__asm        jmp    _T2c7;
_T2c0:
	__asm        mov    dword ptr [ebp-0x34], 0;
_T2c7:
	__asm        jmp    _T331;

	__asm        jmp    _T331;
_T2d1:
	__asm        cmp    currentDir, 2;
	__asm        jne    _T2e7;

	__asm        mov    dword ptr [ebp-0x34], 2;
	__asm        jmp    _T2ee;
_T2e7:
	__asm        mov    dword ptr [ebp-0x34], 0;
_T2ee:
	__asm        jmp    _T331;

	__asm        jmp    _T331;
_T2f8:
	__asm        mov    dword ptr [ebp-0x34], 1;
	__asm        jmp    _T331;

	__asm        jmp    _T331;
_T309:
	__asm        sub    dword ptr [ebp-0x5C], 0x1F;
	__asm        cmp    dword ptr [ebp-0x5C], 3;
	__asm        ja     _T2f8;

	__asm        mov    eax, [ebp-0x5C];
	__asm        jmp    _Switch_321[0][eax*4];
// Switch pointers:
//   _T25c
//   _T283
//   _T2aa
//   _T2d1
_T331:
	__asm        mov    eax, [ebp-0x34];
	__asm        and    al, 3;
	__asm        shl    al, 2;
	__asm        mov    ecx, pRoad;
	__asm        mov    cl, [ecx];
	__asm        and    cl, 0xF3;
	__asm        or     al, cl;
	__asm        mov    ecx, pRoad;
	__asm        mov    [ecx], al;
// LINE 1290:
	__asm        jmp    _Taf3;
// LINE 1296:
_T34d:
	__asm        cmp    deadEnd, 0;
	__asm        jne    _T3fb;
// LINE 1300:
_T357:
	__asm        mov    eax, reinterpret_cast<uint32_t>(y);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(x);
	__asm        push   eax;
	__asm        lea    eax, returnDir;
	__asm        push   eax;
	__asm        mov    eax, currentDir;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::WhatDirAmIConnectedTo;
	__asm        mov    returnStatus, eax;
// LINE 1301:
	__asm        cmp    returnStatus, 0xFFFFFFFF;
	__asm        jne    _T381;
// LINE 1302:
	__asm        jmp    _T3ef;
// LINE 1304:
_T381:
	__asm        cmp    returnStatus, 0xFFFFFFFE;
	__asm        jne    _T390;
// LINE 1305:
	__asm        jmp    _T3ef;
// LINE 1307:
_T390:
	currentDir = returnDir;
// LINE 1308:
	__asm        mov    eax, currentDir;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T3c6;
// LINE 1310:
_T3a1:
	__asm        dec    y;
	__asm        jmp    _T3ea;
// LINE 1311:
_T3a9:
	__asm        inc    x;
	__asm        jmp    _T3ea;
// LINE 1312:
_T3b1:
	__asm        inc    y;
	__asm        jmp    _T3ea;
// LINE 1313:
_T3b9:
	__asm        dec    x;
	__asm        jmp    _T3ea;
// LINE 1314:
	__asm        jmp    _T3ea;
_T3c6:
	__asm        cmp    dword ptr [ebp-0x60], 3;
	__asm        ja     _T3ea;

	__asm        mov    eax, [ebp-0x60];
	__asm        jmp    _Switch_3da[0][eax*4];
// Switch pointers:
//   _T3a1
//   _T3a9
//   _T3b1
//   _T3b9
// LINE 1315:
_T3ea:
	__asm        jmp    _T357;
// LINE 1319:
_T3ef:
	__asm        mov    eax, returnDir;
	__asm        sub    eax, 2;
	__asm        and    eax, 3;
	__asm        mov    currentDir, eax;
// LINE 1325:
_T3fb:
	__asm        mov    eax, pEdge;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+4];
	__asm        dec    ecx;
	__asm        mov    element, ecx;
// LINE 1326:
	pRoad = BinaryOp(add, pEdge->roadArray, BinaryOp(mul, element, Const(2)));
// LINE 1327:
	__asm        mov    eax, pRoad;
	__asm        mov    byte ptr [eax+1], 0;
// LINE 1328:
	__asm        mov    eax, currentDir;
	__asm        sub    eax, 2;
	__asm        and    al, 3;
	__asm        mov    ecx, pRoad;
	__asm        mov    cl, [ecx];
	__asm        and    cl, 0xFC;
	__asm        or     al, cl;
	__asm        mov    ecx, pRoad;
	__asm        mov    [ecx], al;
// LINE 1331:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     _T46f;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     _T46f;

	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T46f;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T47a;
_T46f:
	__asm        mov    word ptr [ebp-0x4C], 0;
	__asm        jmp    _T4ba;
_T47a:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x4C], ax;
	__asm        jmp    _T4ba;
_T4ba:
	__asm        mov    eax, [ebp-0x4C];
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T4e7;
_T4ca:
	__asm        mov    dword ptr [ebp-0x38], 1;
	__asm        jmp    _T533;
_T4d6:
	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        jmp    _T533;

	__asm        jmp    _T533;
_T4e7:
	__asm        cmp    dword ptr [ebp-0x64], 0x6B;
	__asm        jg     _T514;

	__asm        cmp    dword ptr [ebp-0x64], 0x61;
	__asm        jge    _T4ca;

	__asm        cmp    dword ptr [ebp-0x64], 0x49;
	__asm        jl     _T4d6;

	__asm        cmp    dword ptr [ebp-0x64], 0x50;
	__asm        jle    _T4ca;

	__asm        jmp    _T4d6;
_T514:
	__asm        cmp    dword ptr [ebp-0x64], 0x806A;
	__asm        jl     _T4d6;

	__asm        cmp    dword ptr [ebp-0x64], 0x806B;
	__asm        jle    _T4ca;

	__asm        jmp    _T4d6;
_T533:
	__asm        mov    eax, [ebp-0x38];
	__asm        and    al, 1;
	__asm        shl    al, 4;
	__asm        mov    ecx, pRoad;
	__asm        mov    cl, [ecx];
	__asm        and    cl, 0xEF;
	__asm        or     al, cl;
	__asm        mov    ecx, pRoad;
	__asm        mov    [ecx], al;
// LINE 1332:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     _T584;

	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T584;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     _T584;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T590;
_T584:
	__asm        mov    dword ptr [ebp-0x3C], 1;
	__asm        jmp    _T683;
_T590:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, BuildMap[eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        mov    [ebp-0x68], edx;
	__asm        jmp    _T65b;
_T5ae:
	__asm        cmp    currentDir, 3;
	__asm        jne    _T5c4;

	__asm        mov    dword ptr [ebp-0x3C], 2;
	__asm        jmp    _T5cb;
_T5c4:
	__asm        mov    dword ptr [ebp-0x3C], 0;
_T5cb:
	__asm        jmp    _T683;

	__asm        jmp    _T683;
_T5d5:
	__asm        cmp    currentDir, 0;
	__asm        jne    _T5eb;

	__asm        mov    dword ptr [ebp-0x3C], 2;
	__asm        jmp    _T5f2;
_T5eb:
	__asm        mov    dword ptr [ebp-0x3C], 0;
_T5f2:
	__asm        jmp    _T683;

	__asm        jmp    _T683;
_T5fc:
	__asm        cmp    currentDir, 1;
	__asm        jne    _T612;

	__asm        mov    dword ptr [ebp-0x3C], 2;
	__asm        jmp    _T619;
_T612:
	__asm        mov    dword ptr [ebp-0x3C], 0;
_T619:
	__asm        jmp    _T683;

	__asm        jmp    _T683;
_T623:
	__asm        cmp    currentDir, 2;
	__asm        jne    _T639;

	__asm        mov    dword ptr [ebp-0x3C], 2;
	__asm        jmp    _T640;
_T639:
	__asm        mov    dword ptr [ebp-0x3C], 0;
_T640:
	__asm        jmp    _T683;

	__asm        jmp    _T683;
_T64a:
	__asm        mov    dword ptr [ebp-0x3C], 1;
	__asm        jmp    _T683;

	__asm        jmp    _T683;
_T65b:
	__asm        sub    dword ptr [ebp-0x68], 0x1F;
	__asm        cmp    dword ptr [ebp-0x68], 3;
	__asm        ja     _T64a;

	__asm        mov    eax, [ebp-0x68];
	__asm        jmp    _Switch_673[0][eax*4];
// Switch pointers:
//   _T5ae
//   _T5d5
//   _T5fc
//   _T623
_T683:
	__asm        mov    eax, [ebp-0x3C];
	__asm        and    al, 3;
	__asm        shl    al, 2;
	__asm        mov    ecx, pRoad;
	__asm        mov    cl, [ecx];
	__asm        and    cl, 0xF3;
	__asm        or     al, cl;
	__asm        mov    ecx, pRoad;
	__asm        mov    [ecx], al;
// LINE 1333:
	fStart = 0x1;
// LINE 1336:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, AltMap[eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dx, [eax+ecx*2];
	__asm        and    edx, 0x1F;
	__asm        mov    lastAlt, dx;
// LINE 1339:
_T6bf:
	__asm        mov    eax, reinterpret_cast<uint32_t>(y);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(x);
	__asm        push   eax;
	__asm        lea    eax, returnDir;
	__asm        push   eax;
	__asm        mov    eax, currentDir;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::WhatDirAmIConnectedTo;
	__asm        mov    returnStatus, eax;
// LINE 1341:
	__asm        cmp    deadEnd, 0;
	__asm        je     _T799;
// LINE 1343:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        cmp    eax, ecx;
	__asm        jne    _T71c;

	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        cmp    eax, ecx;
	__asm        jne    _T71c;

	__asm        cmp    fStart, 0;
	__asm        jne    _T71c;
// LINE 1345:
	__asm        jmp    _Taee;
// LINE 1347:
	__asm        jmp    _T78d;
_T71c:
	__asm        cmp    returnStatus, 0xFFFFFFFF;
	__asm        jne    _T78d;
// LINE 1349:
	decrementFlag = 0x1;
// LINE 1351:
	__asm        mov    eax, currentDir;
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    _T75d;
// LINE 1353:
_T738:
	__asm        dec    y;
	__asm        jmp    _T781;
// LINE 1354:
_T740:
	__asm        inc    x;
	__asm        jmp    _T781;
// LINE 1355:
_T748:
	__asm        inc    y;
	__asm        jmp    _T781;
// LINE 1356:
_T750:
	__asm        dec    x;
	__asm        jmp    _T781;
// LINE 1357:
	__asm        jmp    _T781;
_T75d:
	__asm        cmp    dword ptr [ebp-0x6C], 3;
	__asm        ja     _T781;

	__asm        mov    eax, [ebp-0x6C];
	__asm        jmp    _Switch_771[0][eax*4];
// Switch pointers:
//   _T738
//   _T740
//   _T748
//   _T750
// LINE 1359:
_T781:
	__asm        mov    eax, returnDir;
	__asm        sub    eax, 2;
	__asm        and    eax, 3;
	__asm        mov    returnDir, eax;
// LINE 1362:
_T78d:
	fStart = 0x0;
// LINE 1364:
	__asm        jmp    _T7a8;
// LINE 1366:
_T799:
	__asm        cmp    returnStatus, 0xFFFFFFFE;
	__asm        jne    _T7a8;
// LINE 1367:
	__asm        jmp    _Taee;
// LINE 1371:
_T7a8:
	__asm        mov    eax, returnDir;
	__asm        cmp    currentDir, eax;
	__asm        jne    _T7bf;
// LINE 1373:
	__asm        mov    eax, pRoad;
	__asm        inc    byte ptr [eax+1];
// LINE 1375:
	__asm        jmp    _Ta77;
// LINE 1377:
_T7bf:
	currentDir = returnDir;
// LINE 1378:
	element--;
// LINE 1379:
	pRoad = BinaryOp(add, pEdge->roadArray, BinaryOp(mul, element, Const(2)));
// LINE 1381:
	__asm        cmp    decrementFlag, 0;
	__asm        je     _T7f4;
// LINE 1383:
	__asm        mov    eax, pRoad;
	__asm        mov    byte ptr [eax+1], 0xFF;
// LINE 1384:
	decrementFlag = 0x0;
// LINE 1386:
	__asm        jmp    _T7fb;
// LINE 1387:
_T7f4:
	__asm        mov    eax, pRoad;
	__asm        mov    byte ptr [eax+1], 0;
// LINE 1389:
_T7fb:
	__asm        mov    eax, currentDir;
	__asm        sub    eax, 2;
	__asm        and    al, 3;
	__asm        mov    ecx, pRoad;
	__asm        mov    cl, [ecx];
	__asm        and    cl, 0xFC;
	__asm        or     al, cl;
	__asm        mov    ecx, pRoad;
	__asm        mov    [ecx], al;
// LINE 1392:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     _T84c;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     _T84c;

	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T84c;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T857;
_T84c:
	__asm        mov    word ptr [ebp-0x48], 0;
	__asm        jmp    _T897;
_T857:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x48], ax;
	__asm        jmp    _T897;
_T897:
	__asm        mov    eax, [ebp-0x48];
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    _T8c4;
_T8a7:
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        jmp    _T910;
_T8b3:
	__asm        mov    dword ptr [ebp-0x40], 0;
	__asm        jmp    _T910;

	__asm        jmp    _T910;
_T8c4:
	__asm        cmp    dword ptr [ebp-0x70], 0x6B;
	__asm        jg     _T8f1;

	__asm        cmp    dword ptr [ebp-0x70], 0x61;
	__asm        jge    _T8a7;

	__asm        cmp    dword ptr [ebp-0x70], 0x49;
	__asm        jl     _T8b3;

	__asm        cmp    dword ptr [ebp-0x70], 0x50;
	__asm        jle    _T8a7;

	__asm        jmp    _T8b3;
_T8f1:
	__asm        cmp    dword ptr [ebp-0x70], 0x806A;
	__asm        jl     _T8b3;

	__asm        cmp    dword ptr [ebp-0x70], 0x806B;
	__asm        jle    _T8a7;

	__asm        jmp    _T8b3;
_T910:
	__asm        mov    eax, [ebp-0x40];
	__asm        and    al, 1;
	__asm        shl    al, 4;
	__asm        mov    ecx, pRoad;
	__asm        mov    cl, [ecx];
	__asm        and    cl, 0xEF;
	__asm        or     al, cl;
	__asm        mov    ecx, pRoad;
	__asm        mov    [ecx], al;
// LINE 1393:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     _T961;

	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T961;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     _T961;

	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T96d;
_T961:
	__asm        mov    dword ptr [ebp-0x44], 1;
	__asm        jmp    _Ta60;
_T96d:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, BuildMap[eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        mov    [ebp-0x74], edx;
	__asm        jmp    _Ta38;
_T98b:
	__asm        cmp    currentDir, 3;
	__asm        jne    _T9a1;

	__asm        mov    dword ptr [ebp-0x44], 2;
	__asm        jmp    _T9a8;
_T9a1:
	__asm        mov    dword ptr [ebp-0x44], 0;
_T9a8:
	__asm        jmp    _Ta60;

	__asm        jmp    _Ta60;
_T9b2:
	__asm        cmp    currentDir, 0;
	__asm        jne    _T9c8;

	__asm        mov    dword ptr [ebp-0x44], 2;
	__asm        jmp    _T9cf;
_T9c8:
	__asm        mov    dword ptr [ebp-0x44], 0;
_T9cf:
	__asm        jmp    _Ta60;

	__asm        jmp    _Ta60;
_T9d9:
	__asm        cmp    currentDir, 1;
	__asm        jne    _T9ef;

	__asm        mov    dword ptr [ebp-0x44], 2;
	__asm        jmp    _T9f6;
_T9ef:
	__asm        mov    dword ptr [ebp-0x44], 0;
_T9f6:
	__asm        jmp    _Ta60;

	__asm        jmp    _Ta60;
_Ta00:
	__asm        cmp    currentDir, 2;
	__asm        jne    _Ta16;

	__asm        mov    dword ptr [ebp-0x44], 2;
	__asm        jmp    _Ta1d;
_Ta16:
	__asm        mov    dword ptr [ebp-0x44], 0;
_Ta1d:
	__asm        jmp    _Ta60;

	__asm        jmp    _Ta60;
_Ta27:
	__asm        mov    dword ptr [ebp-0x44], 1;
	__asm        jmp    _Ta60;

	__asm        jmp    _Ta60;
_Ta38:
	__asm        sub    dword ptr [ebp-0x74], 0x1F;
	__asm        cmp    dword ptr [ebp-0x74], 3;
	__asm        ja     _Ta27;

	__asm        mov    eax, [ebp-0x74];
	__asm        jmp    _Switch_a50[0][eax*4];
// Switch pointers:
//   _T98b
//   _T9b2
//   _T9d9
//   _Ta00
_Ta60:
	__asm        mov    eax, [ebp-0x44];
	__asm        and    al, 3;
	__asm        shl    al, 2;
	__asm        mov    ecx, pRoad;
	__asm        mov    cl, [ecx];
	__asm        and    cl, 0xF3;
	__asm        or     al, cl;
	__asm        mov    ecx, pRoad;
	__asm        mov    [ecx], al;
// LINE 1396:
_Ta77:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, AltMap[eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dx, [eax+ecx*2];
	__asm        and    edx, 0x1F;
	__asm        mov    lastAlt, dx;
// LINE 1397:
	__asm        mov    eax, currentDir;
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    _Tac5;
// LINE 1399:
_Taa0:
	__asm        dec    y;
	__asm        jmp    _Tae9;
// LINE 1400:
_Taa8:
	__asm        inc    x;
	__asm        jmp    _Tae9;
// LINE 1401:
_Tab0:
	__asm        inc    y;
	__asm        jmp    _Tae9;
// LINE 1402:
_Tab8:
	__asm        dec    x;
	__asm        jmp    _Tae9;
// LINE 1403:
	__asm        jmp    _Tae9;
_Tac5:
	__asm        cmp    dword ptr [ebp-0x78], 3;
	__asm        ja     _Tae9;

	__asm        mov    eax, [ebp-0x78];
	__asm        jmp    _Switch_ad9[0][eax*4];
// Switch pointers:
//   _Taa0
//   _Taa8
//   _Tab0
//   _Tab8
// LINE 1404:
_Tae9:
	__asm        jmp    _T6bf;
// LINE 1406:
_Taee:
	__asm        jmp    _Taf3;
_Taf3:
}

// FUNCTION: COPTER_D 0x00541130
void RoadGraph::FindPlaceOnRoad(/*packed*/ struct Goal& goal, /*packed*/ struct _GridCoordinates currLoc) {
	/*bp-0x4*/   /*packed*/ struct Road *pRoad;

// LINE 1414:
	goal.gridLoc.x = goal.pRGV->x;
// LINE 1415:
	goal.gridLoc.y = goal.pRGV->y;
// LINE 1417:
_T27:
	__asm        mov    eax, goal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xC];
	__asm        xor    eax, eax;
	__asm        mov    al, currLoc.x;
	__asm        cmp    ecx, eax;
	__asm        jne    _T51;

	__asm        mov    eax, goal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD];
	__asm        xor    eax, eax;
	__asm        mov    al, currLoc.y;
	__asm        cmp    ecx, eax;
	__asm        je     _T124;
// LINE 1419:
_T51:
	__asm        mov    eax, goal;
	__asm        mov    eax, [eax+0x12];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _Tb4;
// LINE 1421:
_T5f:
	__asm        mov    eax, goal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD];
	__asm        dec    ecx;
	__asm        mov    eax, goal;
	__asm        mov    [eax+0xD], cl;
	__asm        jmp    _Td8;
// LINE 1422:
_T73:
	__asm        mov    eax, goal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xC];
	__asm        inc    ecx;
	__asm        mov    eax, goal;
	__asm        mov    [eax+0xC], cl;
	__asm        jmp    _Td8;
// LINE 1423:
_T87:
	__asm        mov    eax, goal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD];
	__asm        inc    ecx;
	__asm        mov    eax, goal;
	__asm        mov    [eax+0xD], cl;
	__asm        jmp    _Td8;
// LINE 1424:
_T9b:
	__asm        mov    eax, goal;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xC];
	__asm        dec    ecx;
	__asm        mov    eax, goal;
	__asm        mov    [eax+0xC], cl;
	__asm        jmp    _Td8;
// LINE 1425:
	__asm        jmp    _Td8;
_Tb4:
	__asm        cmp    dword ptr [ebp-0xC], 3;
	__asm        ja     _Td8;

	__asm        mov    eax, [ebp-0xC];
	__asm        jmp    _Switch_c8[0][eax*4];
// Switch pointers:
//   _T5f
//   _T73
//   _T87
//   _T9b
// LINE 1427:
_Td8:
	__asm        mov    eax, goal;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RoadGraph::GetNextGoal;
// LINE 1430:
	__asm        mov    eax, goal;
	__asm        cmp    dword ptr [eax+0xE], 0xFFFFFFFE;
	__asm        je     _Tfe;

	__asm        mov    eax, goal;
	__asm        cmp    dword ptr [eax+0xE], 0xFFFFFFFF;
	__asm        jne    _T11f;
// LINE 1431:
_Tfe:
	__asm        push   0x597;
	__asm        push   0x5B823C;
	__asm        push   0x5B8260;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T11f;

	__asm        jmp    _T11f;
// LINE 1433:
_T11f:
	__asm        jmp    _T27;
// LINE 1435:
_T124:
	__asm        mov    eax, goal;
	__asm        mov    eax, [eax+0xE];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, goal;
	__asm        mov    ecx, [ecx];
	__asm        mov    eax, [ecx+eax*2+0xA];
	__asm        mov    ecx, goal;
	__asm        mov    ecx, [ecx+4];
	__asm        lea    eax, [eax+ecx*2];
	__asm        mov    pRoad, eax;
// LINE 1436:
	__asm        mov    eax, pRoad;
	__asm        mov    al, [eax];
	__asm        shr    al, 4;
	__asm        and    al, 1;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, goal;
	__asm        mov    [eax+0x22], ecx;
// LINE 1437:
	__asm        mov    eax, pRoad;
	__asm        mov    al, [eax];
	__asm        shr    al, 2;
	__asm        and    al, 3;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, goal;
	__asm        mov    [eax+0x26], ecx;
// LINE 1438:
	__asm        mov    eax, goal;
	__asm        mov    eax, [eax];
	__asm        mov    al, [eax+2];
	__asm        shr    al, 4;
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, goal;
	__asm        mov    [eax+0x1E], ecx;
// LINE 1439:
	__asm        mov    eax, goal;
	__asm        mov    eax, [eax];
	__asm        mov    al, [eax+2];
	__asm        and    al, 0xF;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        mov    eax, goal;
	__asm        mov    [eax+0x1A], ecx;
// LINE 1440:
	__asm        jmp    _T19a;
_T19a:
}

// FUNCTION: COPTER_D 0x005412d1
int32_t RoadGraph::SetElevation(unsigned short t) {
// LINE 1447:
	__asm        mov    eax, reinterpret_cast<uint32_t>(t);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T32;
_T1c:
	__asm        mov    eax, 1;
	__asm        jmp    _T81;
_T26:
	__asm        xor    eax, eax;
	__asm        jmp    _T81;

	__asm        jmp    _T7e;
_T32:
	__asm        cmp    dword ptr [ebp-0xC], 0x6B;
	__asm        jg     _T5f;

	__asm        cmp    dword ptr [ebp-0xC], 0x61;
	__asm        jge    _T1c;

	__asm        cmp    dword ptr [ebp-0xC], 0x49;
	__asm        jl     _T26;

	__asm        cmp    dword ptr [ebp-0xC], 0x50;
	__asm        jle    _T1c;

	__asm        jmp    _T26;
_T5f:
	__asm        cmp    dword ptr [ebp-0xC], 0x806A;
	__asm        jl     _T26;

	__asm        cmp    dword ptr [ebp-0xC], 0x806B;
	__asm        jle    _T1c;

	__asm        jmp    _T26;
_T7e:
	__asm        mov    eax, [ebp-4];
_T81:
	__asm        jmp    _T86;
// LINE 1448:
_T86:
}



// Contribution: 1:00140360-00140526 Module: 155, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 2:00004430-0000447f Module: 155, 8 byte alignment, initialized_data, read, 
// GLOBAL: COPTER_D 0x00593430
static const enum DirectionTypes IndexToType[4] = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00593440
static const enum DirIndex2 TypeToIndex2[16] = { 0 /* todo */ };



// Contribution: 3:000210f0-00021265 Module: 155, 4 byte alignment, initialized_data, read, write, 
